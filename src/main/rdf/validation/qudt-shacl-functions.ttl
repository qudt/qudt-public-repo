@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix qfn: <http://qudt.org/shacl/functions#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

qfn:
  a owl:Ontology ;
  rdfs:isDefinedBy qfn: ;
  rdfs:label "QUDT SHACL FUNCTIONS" ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://qudt.org/shacl/functions#"^^xsd:anyURI ;
    sh:prefix "qfn" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://qudt.org/schema/qudt/"^^xsd:anyURI ;
    sh:prefix "qudt" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://qudt.org/vocab/dimensionvector/"^^xsd:anyURI ;
    sh:prefix "qkdv" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://qudt.org/vocab/quantitykind/"^^xsd:anyURI ;
    sh:prefix "quantitykind" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://qudt.org/vocab/unit/"^^xsd:anyURI ;
    sh:prefix "unit" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
    sh:prefix "rdf" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI ;
    sh:prefix "rdfs" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI ;
    sh:prefix "xsd" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://www.w3.org/2002/07/owl#"^^xsd:anyURI ;
    sh:prefix "owl" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://www.w3.org/2004/02/skos/core#"^^xsd:anyURI ;
    sh:prefix "skos" ;
  ] ;
  sh:declare [
    a sh:PrefixDeclaration ;
    sh:namespace "http://www.w3.org/ns/shacl#"^^xsd:anyURI ;
    sh:prefix "sh" ;
  ] .

qfn:decimalPrecision
  a sh:SPARQLFunction ;
  rdfs:comment "Determines the precision (number of significant digits) of the decimal number provided as its first argument" ;
  sh:parameter [
    sh:datatype xsd:decimal ;
    sh:description "The decimal value of which to determine the precision " ;
    sh:order 0 ;
    sh:path qfn:value ;
  ] ;
  sh:prefixes qfn: ;
  sh:returnType xsd:decimal ;
  sh:select """
        SELECT ?result
        WHERE {
            # determines precision of input
            # simple: remove any '.' if present
            BIND(STR(?value) as ?tmpVal)
            BIND(REPLACE(?tmpVal, "([^.]*)\\\\.([^.]*)", "$1$2") as ?tmpVal1)
            # leading 0 before the dot are insignificant, trailing 0 after the dot are insignificant. strip.
            BIND(REPLACE(?tmpVal1, "^\\\\s*[+-]?\\\\s*0*([1-9]([0-9]*[1-9])?)0*$","$1") as ?val)
            # 2. dVal
            BIND(STRLEN(STRBEFORE(?val,".")) as ?tmp0)
            BIND(IF(?tmp0 = 0, STRLEN(?val), ?tmp0) as ?dVal)
            # 3. uVal
            BIND(REPLACE(REPLACE(?val,"\\\\.",""), "^0+","") as ?uVal)
            # 4. pVal
            BIND(STRLEN(?uVal) as ?pVal)
            BIND(xsd:integer(?pVal) as ?result)
        }
    """ .

qfn:decimalRoundToPrecision
  a sh:SPARQLFunction ;
  sh:parameter [
    sh:datatype xsd:decimal ;
    sh:description "The decimal value to normalize" ;
    sh:order 0 ;
    sh:path qfn:value ;
  ] ;
  sh:parameter [
    sh:datatype xsd:integer ;
    sh:description "Number of significant digits (default: 34)" ;
    sh:order 1 ;
    sh:path qfn:precision ;
  ] ;
  sh:prefixes qfn: ;
  sh:returnType xsd:decimal ;
  sh:select """
        SELECT ?result
        WHERE {
            # rounds input decimal v to precision p
            #
            # unscaled number: significant digits
            # precision: number of significant digits
            # scale: (value = unscaled * 10^(-scale) ) eg: 123.45: unscaled: 12345 scale = 2;  110 = unscaled: 11, scale = -1; 0.000123 = unscaled: 123, scale = 6
            #
            # Algorithm:
            #
            # 1. val = normalized v (strip leading 0s, don't add trailing 0 if it has no dot)
            # 2. find the dot position dVal (dVal = length(val) if no dot)
            # 3. find the unscaled number uVal as the digits without the dot, leading 0s removed, trailing 0s kept
            # 4. length of uVal is the precision of our value, pVal = length(uVal)
            # 5. find the position eVal in val at which the unscaled number ends
            # 6. scale sVal = eVal - dVal (e.g 123.456: dVal = 3, eVal = 6, sVal = 3, pVal = 6; 123: dVal = 0; 12345: dVal = 5, eVal = 5, sVal = 0, pVal = 5; 12000: dVal = 5, eVal = 2, sVal = -3, pVal = 2; 0.00123: dVal = 1, eVal=6, sVal= 5, pVal=3 )
            # 7. precision to use pNew = min (p, pVal)
            # 8. New unscaled number uNew with given precision. if pNew == pVal: uNew = uVal . otherwise, make tmp value from unscaled, inserting a dot at position pNew and use ROUND on it, ie uNew = ROUND(tmp)
            # 9. New scale sNew = sVal - (pVal - pNew)
            # 10. if sNew = 0 : newVal = CONCAT(uVal)
            #     if sNew < 0 : newVal = CONCAT(uNew, SUBSTR(zeros,1,- sNew) ) - append zeros for each negative scale point
            #     if sNew > 0 : newVal = CONCAT("0.", SUBSTR(zeros, 1, - sNew - pNew), uNew) - insert zeros to fill if needed
            # 11. result = xsd:decimal(newVal)
            #
            # for testing:
            # VALUES (?value ?precision) { (12345678 4) (0.00123456 3) (.00123456 4) (000123.456000 2) (123456789.0123456789 14) (0.123 5) (12345 3) (2 10) (3 1) (7 0) }
            #
            BIND(IF(bound(?precision), ?precision, 34) as ?p)
            BIND("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000" as ?zeroPad)

            # 1: normalize
            BIND(STR(?value) as ?tmpValueStr)
            # leading 0 before the dot are insignificant. strip.
            BIND(REPLACE(?tmpValueStr, "^[+-]?0*(0?\\\\.|[1-9])","$1") as ?tmpValueStrNoLeading0)
            # remember sign if negative
            BIND(IF(REGEX(?tmpValueStr, "^-"), "-","") AS ?sign)
            # if the number starts with '.', prepend '0'
            BIND(IF(STRSTARTS(?tmpValueStrNoLeading0, "."), CONCAT("0", ?tmpValueStrNoLeading0), ?tmpValueStrNoLeading0) as ?val)
            # 2. dVal
            BIND(STRLEN(STRBEFORE(?val,".")) as ?tmp0)
            BIND(IF(?tmp0 = 0, STRLEN(?val), ?tmp0) as ?dVal)
            # 3. uVal
            BIND(REPLACE(REPLACE(?val,"\\\\.",""), "^0+","") as ?uVal)
            # 4. pVal
            BIND(STRLEN(?uVal) as ?pVal)
            # 5. eVal
            BIND(REPLACE(?val,"\\\\.","") as ?tmp1)
            BIND(STRLEN(?tmp1) - STRLEN(STRAFTER(?tmp1,?uVal)) as ?eVal)
            # 6. sVal
            BIND(?eVal - ?dVal as ?sVal)
            # 7. pNew
            BIND(IF(?p < ?pVal, ?p, ?pVal) as ?pNew)
            # 8. uNew
            BIND(CONCAT(SUBSTR(?uVal,1,?pNew),".", SUBSTR(?uVal, ?pNew+1) ) as ?tmp2)
            BIND(IF(?pNew = ?pVal, ?uVal, REPlACE(STR(ROUND(xsd:decimal(?tmp2))), ".0$","")) as ?uNew)
            # 9. sNew
            BIND(?sVal - (?pVal - ?pNew) as ?sNew)
            # 10. newVal
            BIND(IF(?sNew = 0, ?uNew,
                    IF (?sNew < 0 ,
                        CONCAT(?uNew, SUBSTR(?zeroPad, 1, - ?sNew)),
                        CONCAT(SUBSTR(?zeroPad, 1, ?sNew - ?pNew), ?uNew)
                    )) as ?tmp3)
            BIND(IF(?sNew <= 0, ?tmp3,
                    CONCAT(SUBSTR(?tmp3,1,STRLEN(?tmp3) - ?sNew), ".", SUBSTR(?tmp3, STRLEN(?tmp3) - ?sNew + 1))
                ) as ?tmp4)
            BIND(IF(STRSTARTS(?tmp4, "."), CONCAT("0",?tmp4), ?tmp4) as ?tmp5)
            # 11. result
            # 12. append '.0' if there is no '.' in the string
            BIND(IF(CONTAINS(?tmp5,"."), ?tmp5, CONCAT(?tmp5,".0")) AS ?tmp6)
            BIND(REPLACE(?tmp6, "^0*([1-9][0-9]*.[0-9][1-9]*)0*$", "$1", "") AS ?tmp7)
            BIND(CONCAT(?sign, ?tmp7) AS ?newVal)
            BIND(xsd:decimal(?newVal) as ?result)
        }
    """ .

qfn:decimalToDouble
  a sh:SPARQLFunction ;
  sh:parameter [
    sh:datatype xsd:decimal ;
    sh:description "The decimal value to expess as double" ;
    sh:order 0 ;
    sh:path qfn:input ;
  ] ;
  sh:prefixes qfn: ;
  sh:returnType xsd:decimal ;
  sh:select """
    SELECT ?result
    WHERE {
      BIND(IF(?input = 0.0, "0.0", "") AS ?zeroCheck)
      BIND(STR(?input) AS ?str)
      BIND(STRSTARTS(?str, "-") AS ?isNegative)
      BIND(IF(?isNegative, SUBSTR(?str, 2), ?str) AS ?absStr)
      BIND(CONTAINS(?absStr, ".") AS ?hasDecimal)
      BIND(IF(?hasDecimal, STRBEFORE(?absStr, "."), ?absStr) AS ?intPart)
      BIND(IF(?hasDecimal, STRAFTER(?absStr, "."), "") AS ?fracPart)
      BIND(IF(?intPart = "", "", REPLACE(?intPart, "^0+", "", "")) AS ?trimmedInt)
      BIND(IF(?fracPart = "", "", REPLACE(?fracPart, "^0+", "", "")) AS ?trimmedFrac)  # Only trim leading zeros
      BIND(IF(?fracPart = "", "", REPLACE(?fracPart, "0+$","","")) AS ?fracTrimmedAtEnd) # only trim trailing zeros
      BIND(STRLEN(?trimmedInt) AS ?trimmedIntLen)
      BIND(STRLEN(?trimmedFrac) AS ?trimmedFracLen)
      BIND(STRLEN(?fracPart) AS ?fracLen)
      BIND(IF(
        ?trimmedIntLen > 0,
        ?trimmedIntLen - 1,
        IF(
          ?trimmedFracLen > 0,
          -(?fracLen - ?trimmedFracLen + 1),
          0
        )
      ) AS ?exp)
      BIND(IF(
        ?trimmedIntLen > 0,
        CONCAT(
          SUBSTR(?trimmedInt, 1, 1),
          IF(?trimmedIntLen > 1 || ?trimmedFracLen > 0, ".", ""),
          SUBSTR(?trimmedInt, 2),
          ?fracTrimmedAtEnd
        ),
        IF(
          ?trimmedFracLen > 0,
          CONCAT(
            SUBSTR(?trimmedFrac, 1, 1),
            IF(?trimmedFracLen > 1, ".", ""),
            SUBSTR(?trimmedFrac, 2)
          ),
          "0.0"
        )
      ) AS ?mantissaTmpStr)
      BIND(REPLACE(?mantissaTmpStr, "^0*([0-9]+(\\\\.[0-9][1-9]*)?)0*$", "$1","") AS ?mantissaStr)
      BIND(STRDT(IF(
        ?zeroCheck = "0.0",
        "0E0",
        CONCAT(
          IF(?isNegative, "-", ""),
          ?mantissaStr,
          "E",
          STR(?exp)
        )
      ), xsd:double) AS ?result)
    }
    """ .

qfn:defaultValue
  a sh:SPARQLFunction ;
  sh:parameter [
    sh:description "Any value, may also be unbound" ;
    sh:order 0 ;
    sh:path qfn:value ;
  ] ;
  sh:parameter [
    sh:description "The default value to return if value is unbound" ;
    sh:order 1 ;
    sh:path qfn:defaultValue ;
  ] ;
  sh:prefixes qfn: ;
  sh:select """
    SELECT
        (IF(BOUND(?value), ?value, ?defaultValue) AS ?result)
    WHERE {}
    """ .

qfn:exp
  a sh:SPARQLFunction ;
  sh:parameter [
    sh:datatype xsd:decimal ;
    sh:description "The decimal value to exponentiate" ;
    sh:order 0 ;
    sh:path qfn:value ;
  ] ;
  sh:parameter [
    sh:datatype xsd:integer ;
    sh:description "The exponent - an integer between 0 and 8 (inclusive)" ;
    sh:order 1 ;
    sh:path qfn:exponent ;
  ] ;
  sh:prefixes qfn: ;
  sh:returnType xsd:decimal ;
  sh:select """
    SELECT ?result
    WHERE {
        # supports exponents 0 to 8
        BIND(ABS(?exponent) as ?absoluteExponent)
        BIND(if (?exponent < 0, 1.0 / ?value, ?value ) as ?multiplier)
        BIND(
            IF(?absoluteExponent = 0, 1.1,
                IF(?absoluteExponent = 1,
                    ?multiplier,
                    IF(?absoluteExponent = 2,
                        ?multiplier * ?multiplier,
                        IF(?absoluteExponent = 3,
                            ?multiplier * ?multiplier * ?multiplier,
                            IF(?absoluteExponent = 4,
                                ?multiplier * ?multiplier * ?multiplier * ?multiplier,
                                IF(?absoluteExponent = 5,
                                    ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier,
                                    IF(?absoluteExponent = 6,
                                        ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier,
                                        IF(?absoluteExponent = 7,
                                            ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier,
                                            IF(?absoluteExponent = 8,
                                                ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier * ?multiplier,
                                                CONCAT("CANNOT HANDLE EXPONENT ", ?exponent))))))))))
        AS ?result )
    }
    """ .


