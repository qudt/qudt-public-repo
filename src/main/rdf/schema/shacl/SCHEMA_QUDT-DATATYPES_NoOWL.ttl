@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .

<http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype>
  a owl:Ontology ;
  owl:imports <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  owl:imports <http://www.linkedmodel.org/schema/dtype> ;
  owl:imports <http://www.linkedmodel.org/schema/vaem> ;
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
  owl:imports sh: ;
  rdfs:label "QUDT SHACL SCHEMA Datatypes Version $$QUDT_VERSION$$" ;
  sh:declare [
    sh:namespace "http://qudt.org/schema/qudt/"^^xsd:anyURI ;
    sh:prefix "qudt" ;
  ] ;
  sh:declare [
    sh:namespace "http://qudt.org/vocab/quantitykind/"^^xsd:anyURI ;
    sh:prefix "quantitykind" ;
  ] ;
  sh:declare [
    sh:namespace "http://qudt.org/vocab/unit/"^^xsd:anyURI ;
    sh:prefix "unit" ;
  ] ;
  sh:declare [
    sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
    sh:prefix "rdf" ;
  ] ;
  vaem:hasCatalogEntry voag:QUDT-SchemaCatalogEntry ;
  vaem:hasGraphMetadata <http://qudt.org/schema/shacl/datatype/GMD_datatype> ;
  vaem:hasGraphRole vaem:SchemaGraph ;
  vaem:intent "This ontology is to be used by other ontologies that need to reference type definitions." ;
  vaem:specificity 1 ;
  vaem:url "http://qudt.org/$$QUDT_VERSION$$/schema/dtype"^^xsd:anyURI .

qudt:AerospaceCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Coordinate system'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Aerospace Coordinate system" ;
  rdfs:subClassOf qudt:CoordinateSystem .

qudt:AlignmentType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  Specifies how a physical data field is aligned. 
  The alignment could be at a bit, byte or word boundary.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Alignment type" ;
  sh:in ( qudt:BitAligned qudt:ByteAligned qudt:WordAligned ) .

qudt:Array
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An <em>Array></em> is a data structure that stores a collection of elements, typically of the same type, in a contiguous block of memory. 
  Each element in an array is identified by an index or key, which is typically a numerical identifier, either starting at '0' or '1'.
  </p>
  <p>The key considerations for an Array are:
  </p>
  <ol>
  <li>Fixed Size: The size of an array may be pre-determined when it is created and cannot be changed;</li>
  <li>Index-Based Access: Elements can be accessed, updated, or modified using their index;</li>
  <li>Contiguous Memory Allocation: The elements are stored in consecutive memory locations, which allows efficient access using the index.</li>
  </ol>
  <p>An Array is represented as ordered entries of values arranged according to its dimensionality.
  The number of dimensions is specified in the attribute 'dimensionality'.
  </p>
  <p>An array can be multi-dimensional.
  Multiple indices are used but they are treated as extensions of the same structure.
  For Example: for a 2D array arr[2][3], indices refer to the row and column positions.
  A 2D array is still represented as a list, where each member of the list is a list.
  </p>
  <p>Higher dimensional arrays can be represented as nested lists.
  For each dimension a new nested list is defined.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Array" ;
  rdfs:subClassOf qudt:StructuredDatatype ;
  sh:node qudt:DimensionalityShape ;
  sh:property qudt:Array-isHeterogeneous ;
  sh:property qudt:Array-value ;
  sh:property qudt:DatatypePropertyShape ;
  sh:property qudt:DimensionalityPropertyShape ;
  sh:property qudt:DimensionsPropertyShape .

qudt:AssociativeArray
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An <em>Associative Array</em> (or <em>Map</em>) is an abstract data type composed of a collection of keys and a collection of values,
   where each key is associated with one value. 
  The operation of finding the value associated with a key is called a lookup or indexing,
   and this is the most important operation supported by an associative array.
  The relationship between a key and its value is sometimes called a mapping or binding.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Associative Array" ;
  rdfs:seeAlso qudt:Map ;
  rdfs:subClassOf qudt:Array .

qudt:AuralCue
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment """
  <p>An aural cue is a sound produced by a device or a system that is used to alert personnel of of an advisory, cautionary, warning, or emergency state.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Aural Cue" ;
  rdfs:subClassOf qudt:ModalCue ;
  sh:property qudt:AuralCue-sound .

qudt:AxialOrientationType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "The axial orientation of a coordinate system frame axis." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Axial Orientation Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:in ( qudt:PositiveZ qudt:PositiveY qudt:NegativeY qudt:NegativeZ qudt:PositiveX qudt:NegativeX ) .

qudt:BalancedTree
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Balanced Tree</em> is a data type that defines the properties of data structures that represent balanced trees. 
  A balanced tree is a tree where no leaf is much farther away from the root than any other leaf. 
  Different balancing schemes allow different definitions of "much farther" and different amounts of work to keep them balanced.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Balanced Tree Type" ;
  rdfs:subClassOf qudt:Tree ;
  sh:property qudt:BalancedTree-maxDepth .

qudt:BigIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Big Integer</em> is an integer that can be represented in eight octets (64 bits) of machine memory. 
  Big integers may be signed or unsigned.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Big Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype .

qudt:BinaryTree
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Binary Tree</em> is a data type that defines the properties of data structures that represent binary trees. 
  A binary tree is a tree in which each node has at most 2 children.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Binary Tree Type" ;
  rdfs:subClassOf qudt:Tree .

qudt:BitEncodingType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Bit Encoding Type</em> is an encoding type for the correspondence between the two possible values of a bit, 0 or 1, and some interpretation. 
  For example, in a boolean encoding, a bit denotes a truth value, where 0 corresponds to False and 1 corresponds to True.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Bit Encoding" ;
  rdfs:subClassOf qudt:Encoding ;
  sh:property [
    a sh:PropertyShape ;
    rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:in ( qudt:BitEncoding ) ;
    sh:path [
      sh:inversePath rdf:type ;
    ] ;
  ] .

qudt:BooleanEncodingType
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Boolean Encoding Type" ;
  rdfs:subClassOf qudt:Encoding ;
  sh:property [
    a sh:PropertyShape ;
    rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:in ( qudt:BooleanEncoding qudt:BitEncoding qudt:OctetEncoding ) ;
    sh:path [
      sh:inversePath rdf:type ;
    ] ;
  ] .

qudt:BooleanType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A boolean data type can take on only two values." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Boolean Type" ;
  rdfs:subClassOf qudt:OrdinalType ;
  sh:property qudt:BooleanType-encoding .

qudt:BooleanTypeEnumeratedValue
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Specifies how a boolean value is expressed" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "boolean value" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:ByteEncodingType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "This class contains the various ways that information may be encoded into bytes." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Byte Encoding" ;
  rdfs:subClassOf qudt:Encoding .

qudt:CardinalityType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  In mathematics, the cardinality of a set is a measure of the number of elements of the set.
  For example, the set $A = {2, 4, 6}$ contains 3 elements, and therefore $A$ has a cardinality of 3. 
  There are two approaches to cardinality: one which compares sets directly using bijections and injections,
   and another which uses cardinal numbers.
  """^^qudt:LatexString ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Cardinal_number> ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Cardinality> ;
  qudt:informativeReference "http://en.wikipedia.org/wiki/Cardinal_number"^^xsd:anyURI ;
  qudt:informativeReference "http://en.wikipedia.org/wiki/Cardinality"^^xsd:anyURI ;
  qudt:plainTextDescription "In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set 'A = {2, 4, 6}' contains 3 elements, and therefore 'A' has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Cardinality Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:in ( qudt:CT_COUNTABLY-INFINITE qudt:CT_UNCOUNTABLE qudt:CT_FINITE ) ;
  sh:property qudt:CardinalityType-literal ;
  sh:property [
    a sh:PropertyShape ;
    rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:in ( qudt:CT_COUNTABLY-INFINITE qudt:CT_FINITE qudt:CT_UNCOUNTABLE ) ;
    sh:path [
      sh:inversePath rdf:type ;
    ] ;
  ] .

qudt:CartesianCoordinates
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A set of  variables which fix a geometric object.
  If the coordinates are distances measured along perpendicular axes, they are known as Cartesian coordinates.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Cartesian Coordinate Type" ;
  rdfs:subClassOf qudt:Coordinates .

qudt:CharEncodingType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>The class of all character encoding schemes.
  Each defines a rule or algorithm for encoding character data as a sequence of bits or bytes.
  </p>"""^^rdf:HTML ;
  dcterms:description "The class of all character encoding schemes, each of which defines a rule or algorithm for encoding character data as a sequence of bits or bytes." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Char Encoding Type" ;
  rdfs:subClassOf qudt:Encoding ;
  sh:property [
    a sh:PropertyShape ;
    rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:in ( qudt:CharEncoding ) ;
    sh:path [
      sh:inversePath rdf:type ;
    ] ;
  ] .

qudt:CharacterType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A Character Type is a data type that defines the type and encoding of single characters.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Character Type" ;
  rdfs:subClassOf qudt:OrdinalType .

qudt:ColorCue
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment """
  <p>A visual cue that uses color to distinguish it from other cues. 
  Each color cue has exactly one corresponding coordinate point in the RGB space.
  </p>"""^^rdf:HTML ;
  rdfs:label "Color Cue" ;
  rdfs:subClassOf qudt:VisualCue ;
  sh:property qudt:ColorCue-rgbCode .

qudt:CompositeDataStructure
  a rdfs:Class, sh:NodeShape ;
  prov:wasInfluencedBy <https://en.wikipedia.org/wiki/List_of_data_structures> ;
  prov:wasInfluencedBy <https://en.wikipedia.org/wiki/Record_(computer_science)> ;
  rdfs:comment """
  <p>A <em>Composite Data Structure</em>, also referred to as <em>Data Record</em> is a datatype that aggregates element of possibly different types. 
  The aggregated items are called fields or members and are usually identified or indexed by field labels.
  </p>"""^^rdf:HTML ;
  rdfs:label "Composite Data Structure" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:CompositeDataStructure-dataElement .

qudt:CompositeDatatype
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Composite Datatype</em> is a datatype that is constructed from basic primitive types and other composite types. 
  </p>"""^^rdf:HTML ;
  prov:wasInfluencedBy <https://en.wikipedia.org/wiki/List_of_data_structures> ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Composite Data Type" ;
  rdfs:subClassOf qudt:StructuredDatatype ;
  sh:property qudt:CompositeDatatype-alignment ;
  sh:property qudt:CompositeDatatype-padding .

qudt:CompositeTable
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Table Type'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Composite Table Type" ;
  rdfs:subClassOf qudt:Table .

qudt:CompositionFunction
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Composition function" ;
  rdfs:subClassOf qudt:Function .

qudt:CompositionTreeType
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Composition Tree Type" ;
  rdfs:subClassOf qudt:TreeType ;
  sh:property qudt:CompositionTreeType-compositionFunction .

qudt:CoordinateCenterType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An enumeration of coordinate centers for coordinate systems, such as:
   "Earth centered", "Mars centered", "Moon centered", "Sun centered",  and "Vehicle centered".
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Coordinate Center Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  rdfs:subClassOf qudt:NominalScale ;
  sh:in ( qudt:CCT_MarsCentered qudt:CCT_EarthCentered qudt:CCT_MoonCentered
    qudt:CCT_VehicleCentered qudt:CCT_SunCentered ) ;
  skos:prefLabel "Coordinate center type" .

qudt:CoordinateMember
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Coordinate Member</em> is a data type that defines the properties of a coordinate in a coordinate system.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Coordinate Member Type" ;
  rdfs:subClassOf qudt:TupleMember ;
  rdfs:subClassOf qudt:TupleMemberType .

qudt:CoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Coordinate System</em> is a mathematical structure for assigning a unique n-tuple of numbers or scalars to each point in an n-dimensional space. 
  A Coordinate System Type is a data type that defines the properties of data structures that represent coordinate systems.
  </p>
  <p>In geometry, a coordinate system is a system which uses one or more numbers, or coordinates,
   to uniquely determine the position of a point or other geometric element on a manifold such as Euclidean space. 
  The order of the coordinates is significant.
  They are sometimes identified by their position in an ordered tuple and sometimes by a letter, as in 'the x-coordinate'. 
  </p>
  <p>In elementary mathematics the coordinates are taken to be real numbers, but may be complex numbers or elements of a more abstract system such as a commutative ring. 
  The use of a coordinate system allows problems in geometry to be translated into problems about numbers and vice versa; this is the basis of analytic geometry. 
  </p>
  <p>In astronomy, a celestial coordinate system is a system for specifying positions of celestial objects: satellites, planets, stars, galaxies, and so on. 
  Coordinate systems can specify a position in 3-dimensional space, or merely the direction of the object on the celestial sphere, if its distance is not known or not important.
  </p>
  <p>The coordinate systems are implemented in either spherical coordinates or rectangular coordinates. 
  Spherical coordinates, projected on the celestial sphere, are analogous to the geographic coordinate system used on the surface of the Earth.
  These differ in their choice of fundamental plane, which divides the celestial sphere into two equal hemispheres along a great circle.
  </p>
  <p>Rectangular coordinates, in appropriate units, are simply the cartesian equivalent of the spherical coordinates, with the same fundamental (x,y) plane and primary (x-axis) direction. 
  Each coordinate system is named for its choice of fundamental plane.
  </p>"""^^rdf:HTML ;
  qudt:dbpediaMatch <http://dbpedia.org/resource/Coordinate_system> ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Coordinate system" ;
  rdfs:seeAlso <http://en.wikipedia.org/wiki/Astronomical_coordinate_systems> ;
  rdfs:seeAlso <http://en.wikipedia.org/wiki/Coordinate_system> ;
  rdfs:seeAlso <http://mathworld.wolfram.com/CoordinateSystem.html> ;
  rdfs:seeAlso <http://mathworld.wolfram.com/Coordinates.html> ;
  rdfs:subClassOf qudt:Concept ;
  rdfs:subClassOf skos:Concept ;
  sh:property qudt:CoordinateSystem-abbreviation ;
  sh:property qudt:CoordinateSystem-acronym ;
  sh:property qudt:CoordinateSystem-coordinateCenter ;
  sh:property qudt:CoordinateSystem-referenceFrame .

qudt:CoordinateSystemType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Coordinate System</em> is a mathematical structure for assigning a unique n-tuple of numbers or scalars to each point in an n-dimensional space. 
  A Coordinate System Type is a data type that defines the properties of data structures that represent coordinate systems.
  </p>
  <p>The primary attributes of any coordinate system are the coordinate frame or orientation of the axes of the coordinate system and the coordinate center or origin of the coordinate system.
  The coordinate center is the easier of the two attributes to define and in trajectory-related coordinate systems is often taken to be the center of mass of natural solar system bodies such as the Earth, the Moon, or Mars.
  Precise definition of the coordinate frame, however, usually takes much more effort. 
  As a result, the primary purpose is to provide a detailed description of a number of different coordinate frames commonly used in mission analysis.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Coordinate System Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  rdfs:subClassOf qudt:TupleType ;
  sh:property qudt:CoordinateSystemType-originDefinition ;
  sh:property qudt:Coordinates-elementType .

qudt:Coordinates
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A coordinate system is a mathematical structure for assigning a unique n-tuple of numbers or scalars to each point in an n-dimensional space. 
  A Coordinate System Type is a data type that defines the properties of data structures that represent coordinate systems.
  </p>
  <p>The primary attributes of any coordinate system are the coordinate frame or orientation of the axes of the coordinate system and the coordinate center or origin of the coordinate system.
  The coordinate center is the easier of the two attributes to define and in trajectory-related coordinate systems is often taken to be the center of mass of natural solar system bodies such as the Earth, the Moon, or Mars.
  Precise definition of the coordinate frame, however, usually takes much more effort. 
  As a result, the primary purpose is to provide a detailed description of a number of different coordinate frames commonly used in mission analysis.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Coordinates" ;
  rdfs:subClassOf qudt:Tuple ;
  sh:property qudt:Coordinates-elementType .

qudt:Coordinates-2D
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A 2D coordinate system is a system for assigning a two-tuple of numbers or scalars to each point in an 2-dimensional space. 
  A corresponding 2D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 2D coordinate system.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "2D Coordinate Type" ;
  rdfs:subClassOf qudt:CartesianCoordinates ;
  rdfs:subClassOf qudt:Two-Tuple .

qudt:Coordinates-2D-DoublePrecision
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A 2D coordinates in double floating point precision for locating a point in physical space.
  </p>"""^^rdf:HTML ;
  qudt:elementTypeCount 2 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Coordinates-2D-Double precision" ;
  rdfs:subClassOf qudt:Coordinates-2D ;
  sh:property qudt:Coordinates-2D-DoublePrecision-double_X ;
  sh:property qudt:Coordinates-2D-DoublePrecision-double_Y .

qudt:Coordinates-2D-SinglePrecision
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A 2D coordinates in single floating point precision for locating a point in physical space.
  </p>"""^^rdf:HTML ;
  qudt:elementTypeCount 2 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Cartesian Coordinates 2D Single Precision" ;
  rdfs:subClassOf qudt:Coordinates-2D ;
  sh:property qudt:Coordinates-2D-DoublePrecision-double_X ;
  sh:property qudt:Coordinates-2D-DoublePrecision-double_Y .

qudt:Coordinates-3D
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A 3D coordinate system is a system for assigning a three-tuple of numbers or scalars to each point in an 3-dimensional space.
  A corresponding 3D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 3D coordinate system.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "3D Coordinate Type" ;
  rdfs:subClassOf qudt:CartesianCoordinates ;
  rdfs:subClassOf qudt:Three-Tuple .

qudt:Coordinates-3D-DoublePrecision
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A 3D coordinates in double floating point precision for locating a point in physical space.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "3D Coordinates (Double Precision)" ;
  rdfs:subClassOf qudt:Coordinates-3D ;
  sh:property qudt:Coordinates-3D-DoublePrecision-double_X ;
  sh:property qudt:Coordinates-3D-DoublePrecision-double_Y ;
  sh:property qudt:Coordinates-3D-DoublePrecision-double_Z .

qudt:Coordinates-3D-SinglePrecision
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A 3D coordinates in single floating point precision for locating a point in physical space.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "3D Coordinates (Single Precision)" ;
  rdfs:subClassOf qudt:Coordinates-3D ;
  sh:property qudt:Coordinates-3D-SinglePrecision-float_X ;
  sh:property qudt:Coordinates-3D-SinglePrecision-float_Y ;
  sh:property qudt:Coordinates-3D-SinglePrecision-float_Z .

qudt:Coordinates-3D-Type
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A 3D coordinate system is a system for assigning a three-tuple of numbers or scalars to each point in an 3-dimensional space. 
  A corresponding 3D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 3D coordinate system.
  </p>"""^^rdf:HTML ;
  rdfs:label "3D Coordinate Type" ;
  rdfs:subClassOf qudt:CartesianCoordinatesType ;
  rdfs:subClassOf qudt:ThreeTupleType .

qudt:DataEncoding
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p><em>Data Encoding</em> expresses the properties that specify how data is represented at the bit and byte level. 
  These properties are applicable to describing raw data.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Data Encoding" ;
  rdfs:subClassOf qudt:Aspect ;
  sh:property qudt:DataEncoding-bitOrder ;
  sh:property qudt:DataEncoding-byteOrder ;
  sh:property qudt:DataEncoding-encoding .

qudt:DataSetElement
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A field is a tuple that carries a name, a type and optionally other properties that characterize a member element of a composite data structure.
  """ ;
  rdfs:label "QUDT DataSet Element" ;
  rdfs:subClassOf qudt:DataItem ;
  rdfs:subClassOf qudt:Tuple ;
  sh:property qudt:DataSetElement-elementLabel ;
  sh:property qudt:DataSetElement-optional ;
  sh:property qudt:DataSetElement-quantityKind .

qudt:Datatype
  a rdfs:Class, sh:NodeShape ;
  rdfs:subClassOf rdfs:Resource ;
  sh:property qudt:Datatype-ansiSQLName ;
  sh:property qudt:Datatype-basis ;
  sh:property qudt:Datatype-bounded ;
  sh:property qudt:Datatype-cName ;
  sh:property qudt:Datatype-cardinality ;
  sh:property qudt:Datatype-id ;
  sh:property qudt:Datatype-javaName ;
  sh:property qudt:Datatype-jsName ;
  sh:property qudt:Datatype-matlabName ;
  sh:property qudt:Datatype-microsoftSQLServerName ;
  sh:property qudt:Datatype-mySQLName ;
  sh:property qudt:Datatype-odbcName ;
  sh:property qudt:Datatype-oleDBName ;
  sh:property qudt:Datatype-oracleSQLName ;
  sh:property qudt:Datatype-orderedType ;
  sh:property qudt:Datatype-protocolBuffersName ;
  sh:property qudt:Datatype-pythonName ;
  sh:property qudt:Datatype-vbName ;
  vaem:isElaboratedIn <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> .

qudt:DateStringType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Date String Types are scalar data types that define the properties of strings that represent calendar dates." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Date String Type" ;
  rdfs:subClassOf qudt:DateTimeStringType .

qudt:DateTimeStringEncodingType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  Date Time encodings are logical encodings for expressing date/time quantities as strings by applying unambiguous formatting and parsing rules.
  """ ;
  dcterms:description "Date Time encodings are logical encodings for expressing date/time quantities as strings by applying unambiguous formatting and parsing rules." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Date Time String Encoding Type" ;
  rdfs:subClassOf qudt:StringEncodingType ;
  sh:property qudt:DateTimeStringEncodingType-allowedPattern ;
  sh:property [
    sh:path qudt:allowedPattern ;
    sh:qualifiedMinCount 1 ;
    sh:qualifiedValueShape [
      sh:datatype xsd:string ;
    ] ;
  ] .

qudt:DateTimeStringType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A class of data types for structures that represent temporal quantities.
  For example, calendar dates, times, duration of time since a given epoch, etc.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Temporal Type" ;
  rdfs:subClassOf qudt:StringType ;
  sh:property qudt:DateTimeStringType-encoding .

qudt:Dictionary
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Map\"." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Dictionary Type" ;
  rdfs:subClassOf qudt:Map .

qudt:DimensionalDatatype
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Dimensional Data Type</em> is a data type that specifies a physical quantity or unit of measure.
  Information about the physical dimensions of the quantities and units is embedded in their types.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Dimensional Data Type" ;
  rdfs:subClassOf qudt:StructuredDatatype .

qudt:DiscreteState
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Discrete State</em> is the parent class for enumerated values that express a 'State' or 'Condition'.
  Examples are 'on' and 'off for a switch, 'open' and 'closed' for a valve, and 'wet' and 'dry'.
 </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Discrete State" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:property qudt:DiscreteState-inverted .

qudt:DoublePrecisionType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A double precision data type specifies how a numeric value, such as an integer or real number, is stored in memory.
  Typically this occupies two words in computer memory, where the byte length of a word depends on machine address size of the computer processor. 
  For example, on 32-bit machine architectures, a word is four bytes, and so double precision data value on a 32-bit machine architecture occupies eight bytes of memory.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Double Precision Type" ;
  rdfs:subClassOf qudt:NumericType ;
  sh:disjoint qudt:SinglePrecisionType .

qudt:EarthCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A "Trajectory Coordinate System" for all earth-centered coordinates, such as:
  </p>
  <ul>
  <li>Earth mean equator and prime meridian coordinate system";</li>
  <li>Earth true equator and prime meridian of epoch coordinate system";</li> 
  <li>International celestial reference system";</li>
  <li>International terrestrial reference system";</li>
  <li>Sun centered international celestial reference system";</li>
  <li>Vehicle centered international celestial reference system".</li>
  </ul>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Earth Coordinate System Type" ;
  rdfs:subClassOf qudt:TrajectoryCoordinateSystem ;
  sh:property qudt:EarthCoordinateSystem-coordinateCenter .

qudt:Encoding
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An encoding is a rule or algorithm that is used to convert data from a native, or unspecified form into a specific form that satisfies the encoding rules. 
  Examples of encodings include character encodings, such as UTF-8.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Encoding" ;
  rdfs:subClassOf skos:Concept ;
  sh:property qudt:Encoding-bits ;
  sh:property qudt:Encoding-bytes .

qudt:EndianType
  a rdfs:Class, sh:NodeShape ;
  qudt:informativeReference "http://en.wikipedia.org/wiki/Endianness"^^xsd:anyURI ;
  qudt:plainTextDescription "In computing, endianness is the ordering used to represent some kind of data as a sequence of smaller units. Typical cases are the order in which integer values are stored as bytes in computer memory (relative to a given memory addressing scheme) and the transmission order over a network or other medium. When specifically talking about bytes, endianness is also referred to simply as byte order.  Most computer processors simply store integers as sequences of bytes, so that, conceptually, the encoded value can be obtained by simple concatenation. For an 'n-byte' integer value this allows 'n!' (n factorial) possible representations (one for each byte permutation). The two most common of them are: increasing numeric significance with increasing memory addresses, known as little-endian, and its opposite, called big-endian." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Endian Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:property [
    a sh:PropertyShape ;
    rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:in ( qudt:LittleEndian qudt:BigEndian ) ;
    sh:path [
      sh:inversePath rdf:type ;
    ] ;
  ] .

qudt:EngineeringValueTupleMember
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A sub-type of 'Tuple Member Type'. 
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Engineering Value Tuple Member" ;
  rdfs:subClassOf qudt:TupleMember ;
  rdfs:subClassOf qudt:TupleMemberType ;
  sh:disjoint qudt:RawValueTupleMember ;
  sh:disjoint qudt:RawValueTupleMemberType ;
  sh:property qudt:EngineeringValueTupleMember-elementType .

qudt:Enumeration
  a rdfs:Class, sh:NodeShape ;
  rdfs:label "QUDT Enumeration" ;
  rdfs:subClassOf dtype:Enumeration ;
  rdfs:subClassOf qudt:StructuredDatatype ;
  sh:property qudt:Enumeration-bits ;
  sh:property qudt:Enumeration-defaultValue ;
  sh:property qudt:Enumeration-encoding ;
  sh:property qudt:Enumeration-value ;
  vaem:isElaboratedIn <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> .

qudt:EnumerationScale
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A sub-type of 'DTYPE Enumeration'.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Enumeration scale" ;
  rdfs:subClassOf dtype:Enumeration ;
  rdfs:subClassOf qudt:Scale ;
  sh:class dtype:Enumeration .

qudt:FieldType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A sub-type of 'Composite Data Type'.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Field Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:FieldType-elementName ;
  sh:property qudt:FieldType-elementType ;
  sh:property qudt:FieldType-fieldLabel ;
  sh:property qudt:FieldType-fieldType .

qudt:FileFormat
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A sub-type of 'Enumerated Value'.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "File format" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:FixedIntervalTimeSeriesArray
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Fixed Interval Time Series Array Type</em> is a data type that specifies the properties of arrays that hold time series data.
  For example, data that has been sampled over uniformly spaced time intervals.
  A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Fixed Interval Time Series Array Type" ;
  rdfs:subClassOf qudt:TimeSeriesArray .

qudt:FixedIntervalTimeSeriesArrayType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A <em>Fixed Interval Time Series Array Type</em> is a data type that specifies the properties of arrays that hold time series data.
  For example, data that has been sampled over uniformly spaced time intervals. 
  A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals.
  </p>"""^^rdf:HTML ;
  rdfs:label "Fixed Interval Time Series Array Type" ;
  rdfs:subClassOf qudt:TimeSeriesArrayType .

qudt:FloatingPointEncodingType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A type for specifying an "Encoding" with the following instance(s): 
  "Double Precision Encoding", and "Single Precision Real Encoding".
  </p>"""^^rdf:HTML ;
  dcterms:description "A \"Encoding\" with the following instance(s): \"Double Precision Encoding\", \"Single Precision Real Encoding\"." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Floating Point Encoding" ;
  rdfs:subClassOf qudt:Encoding .

qudt:FrameType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Frame Type</em> specifies the intertial type of a coordinate frame as either inertial, rotating, or non-rotating.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Frame Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:in ( qudt:FT_ROTATING qudt:FT_NON-ROTATING qudt:FT_INERTIAL ) .

qudt:Function
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Function" ;
  rdfs:subClassOf qudt:Concept .

qudt:FunctionDatatype
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A function data type defines the input and output data type for a function or method. 
  The data type includes at least the function name and the number of its parameters. 
  In some programming languages, it may also specify the function's return type or the types of its arguments.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Function Data Type" ;
  rdfs:subClassOf qudt:StructuredDatatype ;
  sh:property qudt:FunctionDatatype-argType ;
  sh:property qudt:FunctionDatatype-functionArity ;
  sh:property qudt:FunctionDatatype-returnType .

qudt:Graph
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Graph</em> is an instance of a kind of abstract data type, that consists of a set of nodes (also called vertices) and a set of edges that establish relationships (connections) between the nodes. 
  A Graph Type is a data type that defines the properties of data structures that represent graphs and their members (nodes and edges).
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Graph Type" ;
  rdfs:subClassOf qudt:DataItem .

qudt:GroundCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Aerospace coordinate system'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Ground coordinate system" ;
  rdfs:subClassOf qudt:AerospaceCoordinateSystem .

qudt:HeterogenousArray
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An <em>Array></em> is a data structure that stores a collection of elements, typically of the same type, in a contiguous block of memory. 
  Each element in an array is identified by an index or key, which is typically a numerical identifier, either starting at '0' or '1'.
  </p>
  <p>The key considerations for an Array are:
  </p>
  <ol>
  <li>Fixed Size: The size of an array may be pre-determined when it is created and cannot be changed;</li>
  <li>Index-Based Access: Elements can be accessed, updated, or modified using their index;</li>
  <li>Heterogenous Elements: all elements in the array may be of different data types;</li>
  <li>Contiguous Memory Allocation: 
    the elements are stored in consecutive memory locations, which allows efficient access using the index.</li>
  </ol>
  <p>An Array is represented as ordered entries of values arranged according to its dimensionality.
  The number of dimensions is specified in the attribute 'dimensionality'.
  </p>
  <p>The property 'qudt:datatype' refers to a list if the datatypes of the elements.  
  </p>
  <p>An heterogenous array can be multi-dimensional.
  Multiple indices are used but they are treated as extensions of the same structure.
  For example: for a 2D array arr[2][3], indices refer to the row and column positions.
  A 2D array is still represented as a list, where each member of the list is a list.
  </p>
  <p>Higher dimensional arrays can be represented as nested lists.
  For each dimension a new nested list is defined.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Heterogenous Array" ;
  rdfs:subClassOf qudt:Array ;
  sh:property qudt:HeterogenousArray-datatype .

qudt:HexBinaryType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A string composed of hex characters." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Hexidecimal Binary Type" ;
  rdfs:subClassOf qudt:TextStringType ;
  sh:property qudt:HexBinaryType-length ;
  sh:property qudt:HexBinaryType-maxLength ;
  sh:property qudt:HexBinaryType-minLength ;
  sh:property qudt:HexBinaryType-pattern .

qudt:HomogeneousArray
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An <em>Array></em> is a data structure that stores a collection of elements, typically of the same type, in a contiguous block of memory. 
  Each element in an array is identified by an index or key, which is typically a numerical identifier, either starting at '0' or '1'.
  </p>
  <p>The key considerations for an Array are:
  </p>
  <ol>
  <li>Fixed Size: The size of an array may be pre-determined when it is created and cannot be changed;</li>
  <li>Index-Based Access: Elements can be accessed, updated, or modified using their index;</li>
  <li>Homogeneous Elements: all elements in an array must be of the same datatype;</li>
  <li>Contiguous Memory Allocation: The elements are stored in consecutive memory locations, which allows efficient access using the index.</li>
  </ol>
  <p>An Array is represented as ordered entries of values arranged according to its dimensionality.
  The number of dimensions is specified in the attribute 'dimensionality'.
  </p>
  <p>The property 'qudt:datatype' refers to the datatype of the elements.  
  </p>
  <p>An array can be multi-dimensional.
  Multiple indices are used but they are treated as extensions of the same structure.
  For Example: for a 2D array arr[2][3], indices refer to the row and column positions.
  A 2D array is still represented as a list, where each member of the list is a list.
  </p>
  <p>Higher dimensional arrays can be represented as nested lists.
  For each dimension a new nested list is defined.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Homogeneous Array" ;
  rdfs:subClassOf qudt:Array .

qudt:IconicCue
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Iconic enumeration literal" ;
  rdfs:subClassOf qudt:ModalCue ;
  sh:disjoint qudt:AuralCue ;
  sh:disjoint qudt:KinestheticCue ;
  sh:disjoint qudt:VisualCue ;
  sh:property qudt:IconicCue-image .

qudt:InertialCoordinateFrame
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Coordinate Frame\"." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Inertial Coordinate Frame" ;
  rdfs:seeAlso qudt:NonRotatingInertialFrame ;
  rdfs:subClassOf qudt:InertialReferenceFrame ;
  sh:property qudt:InertialCoordinateFrame-frameType .

qudt:InertialReferenceFrame
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A sub-type of 'Reference Frame'.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Inertial reference frame" ;
  rdfs:subClassOf qudt:ReferenceFrame .

qudt:IntegerDatatype
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "An Integer Type is a data type that specifies how integer numbers are represented and stored in machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Integer Datatype" ;
  rdfs:subClassOf qudt:NumericType ;
  rdfs:subClassOf qudt:OrdinalType .

qudt:IntegerEncodingType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "The encoding scheme for integer types" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Integer Encoding" ;
  rdfs:subClassOf qudt:Encoding ;
  sh:property [
    a sh:PropertyShape ;
    rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:in ( qudt:LongUnsignedIntegerEncoding qudt:ShortUnsignedIntegerEncoding
      qudt:ShortUnsignedIntegerEncoding qudt:SignedIntegerEncoding qudt:UnsignedIntegerEncoding ) ;
    sh:path [
      sh:inversePath rdf:type ;
    ] ;
  ] .

qudt:IntegerListShape
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:subClassOf rdf:List ;
  sh:property [
    sh:datatype xsd:integer ;
    sh:path rdf:first ;
  ] ;
  sh:property [
    sh:or ( [
      sh:node ( ) ;
    ] [
      sh:node qudt:IntegerListShape ;
    ] ) ;
    sh:path rdf:rest ;
  ] .

qudt:InterpolatedTable
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Table Type'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Interpolated Table Type" ;
  rdfs:subClassOf qudt:Table ;
  rdfs:subClassOf qudt:TableType .

qudt:KinestheticCue
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Kinesthetic Cue" ;
  rdfs:subClassOf qudt:ModalCue ;
  sh:property qudt:KinestheticCue-code .

qudt:LargeObject
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A 'LargeObject' datatype is used to store blocks of unstructured data (such as text, graphic images, video clips, and sound waveforms). 
  They often are used to allow efficient, random, piece-wise access to the data.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Large object" ;
  rdfs:subClassOf qudt:CompositeDatatype .

qudt:LargeObjectType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A 'LargeObject' datatype is used to store blocks of unstructured data (such as text, graphic images, video clips, and sound waveforms). They often are used to allow efficient, random, piece-wise access to the data." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Large object" ;
  rdfs:subClassOf qudt:CompositeDatatype .

qudt:LimitType
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Limit type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:List
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'AbstractDataItem'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "List" ;
  rdfs:subClassOf qudt:DataItem ;
  sh:property qudt:DatatypePropertyShape ;
  sh:property qudt:MaybeQuantityPropertyShape ;
  sh:property qudt:MaybeUnitPropertyShape .

qudt:LocalCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Trajectory Coordinate System\" with the following instance(s): \"Local vertical curvilinear coordinate system\", \"Local vertical local horizontal coordinate system\", \"Vehicle centered local vertical curvilinear coordinate system\"." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Local Coordinate System Type" ;
  rdfs:subClassOf qudt:TrajectoryCoordinateSystem .

qudt:LongIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Long Integer is an integer that can be represented in four octets (32 bits) of machine memory. Long integers may be signed or unsigned." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Long Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype .

qudt:LunarCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Two slightly different coordinate frames are commonly used to define the orientation of the axes of a lunar body-fixed coordinate system: a mean Earth/rotation frame and a principal axis coordinate frame. The mean Earth/rotation frame (sometimes called the \"Mean Earth/polar axis\" frame) is a lunar body-fixed coordinate frame with the X-axis aligned with the mean direction from the Moon to the Earth and the Z-axis aligned with the mean axis of rotation of the Moon. The principal axis frame is a lunar body-fixed coordinate frame aligned with the principal axes of the Moon. Due to the fact that the Moon is synchronously rotating but is not exactly symmetric, the principal axes and the mean Earth/rotation axes of the Moon do not coincide." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Lunar Coordinate System" ;
  rdfs:subClassOf qudt:TrajectoryCoordinateSystem ;
  sh:property qudt:LunarCoordinateSystem-coordinateCenter ;
  sh:property qudt:LunarCoordinateSystem-realization ;
  sh:property qudt:LunarCoordinateSystem-xAxisDefinition ;
  sh:property qudt:LunarCoordinateSystem-yAxisDefinition ;
  sh:property qudt:LunarCoordinateSystem-zAxisDefinition .

qudt:MajorMinorType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Enumerated Value'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Major minor type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:in ( qudt:Minor qudt:Major ) .

qudt:Map
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Map Type is an abstract data type that defines the properties of map data structures. A Map (or Associative Array) is an abstract data structure composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Map Type" ;
  rdfs:seeAlso qudt:AssociativeArray ;
  rdfs:subClassOf qudt:CollectionKind .

qudt:MarsCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Trajectory Coordinate System\" with the following instance(s): \"Mars mean equator and IAU-Node of epoch\", \"Mars mean equator and prime meridian body-fixed\"." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Mars Coordinate System Type" ;
  rdfs:subClassOf qudt:TrajectoryCoordinateSystem ;
  sh:property qudt:MarsCoordinateSystem-coordinateCenter .

qudt:MathsFunctionType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'QUDT Concept'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Maths Function Type" ;
  rdfs:subClassOf qudt:Concept .

qudt:Matrix
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Matrix</em> is a data type that specifies the properties of an N-dimensional data structure.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Matrix" ;
  rdfs:subClassOf qudt:Array .

qudt:MemoryOrderType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Enumerated Value'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Memory order type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:ModalCue
  a rdfs:Class, sh:NodeShape ;
  rdfs:label "Modal Cue" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:property qudt:ModalCue-duration .

qudt:ModalEnumeration
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'QUDT Enumeration'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Modal Enumeration" ;
  rdfs:subClassOf qudt:Enumeration ;
  sh:property qudt:ModalEnumeration-defaultValue .

qudt:MultiDimensionalArray
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Multi-Dimensional Array</em> is an extension of a standard one-dimensional array,
   where elements are organized in a grid-like structure across two or more dimensions. 
  It is a collection of elements arranged in a tabular or multi-dimensional structure for representing complex datasets,
   such as matrices, tensors, or higher-dimensional data.
  </p>
  <p>The elements of a multi-dimensional array are N-tuples, where 'N' corresponds to the dimensionality of the array.
  Each element is specified using the property 'qudt:element'.
  </p>
  <p>Ordinary or one-dimensional arrays are indexed by a single integer. 
  For a multi-dimensional array, the index into the array uses an ordered list of integers, such as in 'a[3,1,5]'. 
  The length of the list of integers used to index into the multi-dimensional array is always the same.
  This is referred to as the array's dimensionality. 
  The bounds on each of these are called the array's dimensions.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Multi-Dimensional Array Type" ;
  rdfs:subClassOf qudt:Array .

qudt:MultiDimensionalDataFormat
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  Data formats for storing and manipulating scalar and multidimensional data in a platform and discipline independent manner,
   for example HDF, CDF and netCDF.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Multi dimensional data format" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:MultiDimensionalDataFormat-descriptor .

qudt:MultiModalEnumeration
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'QUDT Enumeration'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Multi modal enumeration" ;
  rdfs:subClassOf qudt:Enumeration ;
  sh:property qudt:MultiModalEnumeration-auralCueEnumeration ;
  sh:property qudt:MultiModalEnumeration-iconicCueEnumeration ;
  sh:property qudt:MultiModalEnumeration-kinestheticCueEnumeration ;
  sh:property qudt:MultiModalEnumeration-modalCueEnumeration ;
  sh:property qudt:MultiModalEnumeration-visualCueEnumeration .

qudt:MultiModalType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Enumerated Value'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Multi Modal Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:property qudt:MultiModalType-auralCue ;
  sh:property qudt:MultiModalType-iconicCue ;
  sh:property qudt:MultiModalType-kinestheticCue ;
  sh:property qudt:MultiModalType-modalCue ;
  sh:property qudt:MultiModalType-visualCue .

qudt:MultiSet
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A bag is a set in which elements may be repeated." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Bag" ;
  rdfs:subClassOf qudt:CollectionKind .

qudt:N-Tuple
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A tuple containing n objects is known as an "n-tuple". 
  For example the 4-tuple (or "quadruple"), with components of respective types PERSON, DAY, MONTH and YEAR.
  This could be used to record that a certain person was born on a certain day of a certain month of a certain year.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "N-Tuple Type" ;
  rdfs:subClassOf qudt:Tuple ;
  sh:property qudt:N-Tuple-elementType .

qudt:N-TupleType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A tuple containing n objects is known as an "n-tuple". 
  For example the 4-tuple (or "quadruple"), with components of respective types PERSON, DAY, MONTH and YEAR.
  This could be used to record that a certain person was born on a certain day of a certain month of a certain year.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "N-Tuple Type" ;
  rdfs:subClassOf qudt:TupleType ;
  sh:property qudt:N-Tuple-elementType .

qudt:NonRotatingInertialFrame
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>The non-rotating (or "inertial") coordinate frames are defined by taking a "snapshot" of the orientation of a particular set of right-handed, orthogonal axes at a specific epoch or time. 
  In other words, the non-rotating coordinate frame, however it is defined, is frozen or fixed at a specific time - for all time. 
  These non-rotating coordinate frames are referred to as "of Epoch" coordinate frames.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Non Rotating Coordinate Frame" ;
  rdfs:seeAlso qudt:InertialCoordinateFrame ;
  rdfs:subClassOf qudt:InertialReferenceFrame ;
  sh:property qudt:NonRotatingInertialFrame-frameType .

qudt:NumericType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Numeric data types are data types whose values denote quantities as defined by a mathematical number system." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Numeric Type" ;
  rdfs:subClassOf qudt:ScalarDatatype ;
  sh:property qudt:NumericType-accuracy ;
  sh:property qudt:NumericType-signedness .

qudt:OctetType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "An 8 bit unsigned integer" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Octet Type" ;
  rdfs:subClassOf qudt:UnsignedIntegerType .

qudt:OffOnStateTypeEnumeration
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A discrete state enumeration whose values are 'off' and 'on'. 
  The 'off' value is encoded as a zero (0) and the 'on' value as a one (1).
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:subClassOf qudt:Enumeration .

qudt:OnOffStateType
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "On off state type" ;
  rdfs:subClassOf qudt:DiscreteState .

qudt:OnOffStateTypeEnumeration
  a rdfs:Class, sh:NodeShape ;
  qudt:inverted true ;
  rdfs:comment """
  A discrete state enumeration whose values are 'off' and 'on'. 
  The 'on' value is encoded as a zero (0) and the 'off' value as a one (1).
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:subClassOf qudt:Enumeration .

qudt:OpenCloseStateType
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Open Close State Type" ;
  rdfs:subClassOf qudt:DiscreteState .

qudt:OrderedCollectionKind
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An <em>Ordered Collection Kind</em> is an abstract data type that defines the properties of collection data structures whose members can be linearly ordered. 
  An ordered collection is a collection together with an ordering relation (such as greater than) that linearly orders the collection elements.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Ordered Collection Kind" ;
  rdfs:subClassOf qudt:CollectionKind ;
  sh:property qudt:OrderedCollectionKind-orderingRelation .

qudt:OrderedTree
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An "Ordered Tree Type" is a data type that defines the properties of data structures that represent ordered trees. 
  An ordered tree is a tree where the children of every node are ordered, that is, there is a first child, second child, third child, etc. 
  Typically a type specification for an ordered tree will include the comparison operator (such as <b>lt</b> or <b>gt</b>) that is used to order the nodes.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Ordered Tree Type" ;
  rdfs:subClassOf qudt:OrderedCollectionKind ;
  rdfs:subClassOf qudt:Tree .

qudt:OrderedType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Describes how a data or information structure is ordered." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Ordered type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:property qudt:OrderedType-literal ;
  sh:property [
    a sh:PropertyShape ;
    sh:in ( qudt:Unordered qudt:PartiallyOrdered qudt:TotallyOrdered ) ;
    sh:path [
      sh:inversePath rdf:type ;
    ] ;
  ] .

qudt:OrdinalType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>An ordinal data type is a data type that specifies the properties of values that can easily be put in a one to one correspondence with a subset of the natural numbers. 
  Examples include boolean, character, and integer data types.
   </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Ordinal Data Type" ;
  rdfs:subClassOf qudt:ScalarDatatype .

qudt:PaddingType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>This describes how unused bits of a field are filled. 
  Unused bits could be set to one or zero. 
  A third option is "don't care".
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Padding type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:in ( qudt:PadWithOnes qudt:PadWithZeros qudt:PadWithAny ) .

qudt:ParameterModifiabilityType
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment "An enumeration of literals that signify whether a parameter is modifiable and if so, by whom." ;
  rdfs:label "Parameter modifiability type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:PartialArray
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A partial array is an Array with two attributes that define the starting and ending indices of the elements that are provided.
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Partial Array" ;
  rdfs:subClassOf qudt:Array .

qudt:Percentage
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Scalar Datatype for expressing a dimensionless ratio." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Percentage Type" ;
  rdfs:subClassOf qudt:NumericType .

qudt:PhysicalAddress
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Structured Datatype\"." ;
  dcterms:description "A physical address is a pointer to a memory location." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Physical Address Type" ;
  rdfs:subClassOf qudt:CompositeDatatype .

qudt:PolarCoordinates
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A set of  variables which fix a geometric object. 
  If the coordinates of a point P are determined by the distance from P to the origin and the angle subtended by the radial vector at P and a fixed axis, they are known as polar coordinates. 
  Typically, the angle is measured with respect to the x-axis." ;
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Polar Coordinate System Type" ;
  rdfs:subClassOf qudt:Coordinates .

qudt:PolarCoordinatesType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A set of  variables which fix a geometric object. 
  If the coordinates of a point P are determined by the distance from P to the origin and the angle subtended by the radial vector at P and a fixed axis, they are known as polar coordinates. 
  Typically, the angle is measured with respect to the x-axis." ;
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Polar Coordinate System Type" ;
  rdfs:subClassOf qudt:CoordinateSystemType .

qudt:Polarity
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A "Tagged Enumeration" with the following instance(s): "negative", "positive".
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Polarity" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:PositiveBigIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Positive Integers are integers that are either non-zero and non-negative." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Positive Big Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf qudt:UnsignedType ;
  sh:disjoint qudt:SignedIntegerType .

qudt:PositiveIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Positive Integers are integers that are either non-zero and non-negative." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Positive Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf qudt:UnsignedType ;
  sh:disjoint qudt:SignedIntegerType .

qudt:PriorityQueue
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Priority Queue</em> is a specialization of a queue where additionally each element has a priority associated with it. 
  In a priority queue, an element with high priority is served before an element with low priority. 
  If two elements have the same priority, they are served according to their order in the queue.
  </p>
  """^^rdf:HTML ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Priority_queue> ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Priority Queue" ;
  rdfs:subClassOf qudt:Queue .

qudt:Quantifiable
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:property qudt:Quantifiable-dataEncoding ;
  vaem:isElaboratedIn <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> .

qudt:QuantityKindList
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Quantity Kind List</em> is a list of qudt:QuantityKind. 
  They are used, for instance, to specify the quantity kind in a Mass Properties Array. 
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Quantity kind List" .

qudt:QuantityKindsListShape
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:subClassOf rdf:List ;
  sh:property [
    sh:class qudt:QuantityKind ;
    sh:path rdf:first ;
  ] ;
  sh:property [
    sh:or ( [
      sh:node ( ) ;
    ] [
      sh:node qudt:QuantityKindsListShape ;
    ] ) ;
    sh:path rdf:rest ;
  ] .

qudt:QuantityValueType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Dimensional Data Type'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Quantity value type" ;
  rdfs:subClassOf qudt:DimensionalDatatype ;
  sh:property qudt:QuantityValueType-basis ;
  sh:property qudt:QuantityValueType-elementType ;
  sh:property qudt:QuantityValueType-elementUnit .

qudt:RawValueTupleMember
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Tuple Member Type'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Raw value tuple member" ;
  rdfs:subClassOf qudt:TupleMember ;
  sh:property qudt:RawValueTupleMember-elementType .

qudt:RawValueTupleMemberType
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Raw value tuple member type" ;
  rdfs:subClassOf qudt:TupleMemberType ;
  sh:property qudt:RawValueTupleMember-elementType .

qudt:RealDatatype
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A real number is represented as a factor, called the mantissa, multiplied by a power (the exponent) of a base. 
  Different bases yield different approximations to real numbers, and conversion between them is limited in accuracy.
  Four floating-point types are defined in 'IEEE-754 Standard for Binary Floating-Point'. 
  These types are 'single', 'extended single', 'double', and 'extended double'.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Real Datatype" ;
  rdfs:subClassOf qudt:NumericType ;
  sh:property qudt:RealDatatype-base ;
  sh:property qudt:RealDatatype-maxExponent ;
  sh:property qudt:RealDatatype-maxMantissa ;
  sh:property qudt:RealDatatype-minMantissa ;
  sh:property qudt:RealDatatype-precision .

qudt:RealDoublePrecisionType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A real double precision data type specifies how a real number, or an approximation of a real number is stored in memory.
  Typically this occupies two words in computer memory, where the byte length of a word depends on machine address size of the computer processor. 
  For example, on 32-bit machine architectures, a word is four bytes.
  An example of a real double precision data type specification is the IEEE 754 standard for encoding binary or decimal floating point numbers in 8 bytes for storage on 32-bit machine architectures.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Real Double Precision Type" ;
  rdfs:subClassOf qudt:DoublePrecisionType ;
  rdfs:subClassOf qudt:RealDatatype .

qudt:RealNumberType
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment """
  <p>A <em>Real Number Type</em> is the class of data values that approximate real numbers in finite precision. 
  Often, such values are expressed in "mantissa, base, exponent" form. 
  Any rational number can be expressed in the form m*b^<sup>e</sup>, where m (the mantissa), b (the base), and e (the exponent) are integers. 
  Typically, b is chosen to be either 2 or 10, and then the values of m and e are determined given the choice of base.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Real number type" ;
  rdfs:subClassOf qudt:RealDatatype .

qudt:RealSinglePrecisionType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A real single precision data type specifies how a real number,
   or an approximation of a real number is stored in memory that occupies one word in computer memory, 
   where the byte length of a word depends on machine address size of the computer processor.
  </p>
  <p> 
  For example, on 32-bit machine architectures, a word is four bytes. 
  An example of a real single precision data type specification is the IEEE 754 standard for encoding binary
   or decimal floating point numbers in 4 bytes for storage on 32-bit machine architectures.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Real Single Precision Type" ;
  rdfs:subClassOf qudt:RealDatatype ;
  rdfs:subClassOf qudt:SinglePrecisionType .

qudt:Record
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A Record Type is a type whose values are records, i.e. aggregates of several items of possibly different types. 
  The aggregated items are called fields or members and are usually identified or indexed by field labels.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Record Type" ;
  rdfs:subClassOf qudt:CompositeDatatype .

qudt:ReferenceDatatype
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A reference is an object containing information which refers to data stored elsewhere, as opposed to containing the data itself. 
  A reference data type is a data type that specifies how a reference is represented and stored in memory,
   as well as the operations that can be performed on reference values. 
  The most common example of a reference data type is a pointer.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Reference Data Type" ;
  rdfs:subClassOf qudt:StructuredDatatype .

qudt:ReferenceFrame
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p> A <em>Reference Frame</em> (or "frame of reference") in physics, may refer to a coordinate system or set of axes.
The frame serves as the datum to measure the position, orientation, and other properties of objects in it.
Reference frame may refer to an observational reference frame tied to the state of motion of an observer. 
Reference frame may also refer to both an observational reference frame and an attached coordinate system as a unit.
</p>
"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Reference Frame" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:ReferenceFrame-comment ;
  sh:property qudt:ReferenceFrame-description ;
  sh:property qudt:ReferenceFrame-frameType ;
  sh:property qudt:ReferenceFrame-informativeReference ;
  sh:property qudt:ReferenceFrame-realization ;
  sh:property qudt:ReferenceFrame-xAxisDefinition ;
  sh:property qudt:ReferenceFrame-xCoordinateDefinition ;
  sh:property qudt:ReferenceFrame-yAxisDefinition ;
  sh:property qudt:ReferenceFrame-yCoordinateDefinition ;
  sh:property qudt:ReferenceFrame-zAxisDefinition ;
  sh:property qudt:ReferenceFrame-zCoordinateDefinition .

qudt:RotatingReferenceFrame
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Reference Frame'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Rotating reference frame" ;
  rdfs:subClassOf qudt:ReferenceFrame .

qudt:ScalarDatatype
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Scalar Datatype" ;
  sh:property qudt:ScalarDatatype-bitOrder ;
  sh:property qudt:ScalarDatatype-bits ;
  sh:property qudt:ScalarDatatype-byteOrder ;
  sh:property qudt:ScalarDatatype-bytes ;
  sh:property qudt:ScalarDatatype-encoding ;
  sh:property qudt:ScalarDatatype-length ;
  sh:property qudt:ScalarDatatype-maxExclusive ;
  sh:property qudt:ScalarDatatype-maxInclusive ;
  sh:property qudt:ScalarDatatype-minExclusive ;
  sh:property qudt:ScalarDatatype-minInclusive ;
  sh:property qudt:ScalarDatatype-rdfsDatatype ;
  vaem:isElaboratedIn <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> .

qudt:ScalarListShape
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:subClassOf rdf:List ;
  sh:property [
    sh:or qudt:NumericTypeUnion ;
    sh:path rdf:first ;
  ] ;
  sh:property [
    sh:or ( [
      sh:node ( ) ;
    ] [
      sh:node qudt:ScalarListShape ;
    ] ) ;
    sh:path rdf:rest ;
  ] .

qudt:Sequence
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Sequence</em> is an enumerated collection of objects in which repetitions are allowed. 
  Like a set, it contains members (also called elements, or terms). 
  The number of elements (possibly infinite) is called the length of the sequence.
  </p>
  <p>Unlike a set, order matters, and exactly the same elements can appear multiple times at different positions in the sequence. 
  Formally, a sequence can be defined as a function whose domain is either the set of the natural numbers (for infinite sequences) or the set of the first n natural numbers (for a sequence of finite length n). 
  </p>
  <p>The position of an element in a sequence is its rank or index; it is the integer from which the element is the image. 
  It depends on the context or of a specific convention, if the first element has index 0 or 1. [Wikipedia]
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Sequence" ;
  rdfs:subClassOf qudt:CollectionKind .

qudt:Set
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Set</em> is an abstract data type that defines the properties of sets. 
  A set is a collection (container) of certain values, without any particular order, and no repeated values. 
  It corresponds with a finite set in mathematics.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Set Type" ;
  rdfs:subClassOf qudt:CollectionKind .

qudt:ShortIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A Short Integer is an integer that can be represented in two octets (16 bits) of machine memory. 
  Short integers may be signed or unsigned.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Short Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype .

qudt:SignedBigIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Signed Big Integer is a signed integer that can be represented in eight octets (64 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed Big Integer Type" ;
  rdfs:subClassOf qudt:BigIntegerType ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  sh:property qudt:SignedBigIntegerType-literal ;
  sh:property qudt:SignedBigIntegerType-maxInclusive ;
  sh:property qudt:SignedBigIntegerType-minInclusive .

qudt:SignedIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Signed Integers are integers can take on both positive and negative values." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf qudt:SignedType .

qudt:SignedLongIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Signed Long Integer is a signed integer that can be represented in four octets (32 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed Long Integer Type" ;
  rdfs:subClassOf qudt:LongIntegerType ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  sh:property qudt:SignedLongIntegerType-abbreviation ;
  sh:property qudt:SignedLongIntegerType-maxInclusive ;
  sh:property qudt:SignedLongIntegerType-minInclusive .

qudt:SignedMediumIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Signed Medium Integers\" is an integer of 24 bits that can take on both positive and negative values." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed Integer Type" ;
  rdfs:subClassOf qudt:SignedIntegerType .

qudt:SignedShortIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Signed Short Integer is a signed integer that can be represented in four octets (32 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed Short Integer Type" ;
  rdfs:subClassOf qudt:ShortIntegerType ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  sh:property qudt:SignedShortIntegerType-abbreviation .

qudt:SignedType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A signed type is a numeric type that distinguishes between positive and negative numbers using an encoding scheme, such as sign and magnitude, one's compliment, and two's compliment to represent negative numbers." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed Type" ;
  rdfs:subClassOf qudt:NumericType ;
  sh:disjoint qudt:UnsignedType ;
  sh:property qudt:SignedType-signedness .

qudt:SignedVariableLengthIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Signed Variable Length Integer data type defines a data structure for representing signed integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed Variable Length Integer Type" ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  rdfs:subClassOf qudt:VariableLengthIntegerType .

qudt:SignednessType
  a owl:Class, rdfs:Class, sh:NodeShape ;
  dcterms:description "Specifics whether a value should be signed or unsigned." ;
  owl:oneOf ( qudt:SIGNED qudt:UNSIGNED ) ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signedness type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:property [
    a sh:PropertyShape ;
    rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:in ( qudt:SIGNED qudt:UNSIGNED ) ;
    sh:path [
      sh:inversePath rdf:type ;
    ] ;
  ] .

qudt:SinglePrecisionType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A single precision data type specifies how a numeric value, such as an integer or real number,
   is stored in memory that occupies one word in computer memory,
   where the byte length of a word depends on machine address size of the computer processor. 
  For example, on 32-bit machine architectures, a word is four bytes.
  A single precision data value on a 32-bit machine architecture occupies four bytes of memory.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Single Precision Type" ;
  rdfs:subClassOf qudt:NumericType .

qudt:SplineCalibrator
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Map Type'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Spline calibrator" ;
  rdfs:subClassOf qudt:Map .

qudt:SplinePoint
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Tuple Type'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Spline point" ;
  rdfs:subClassOf qudt:Tuple .

qudt:StateSpaceMatrix
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>In control engineering, a state space representation is a mathematical model of a physical system
   as a set of input, output and state variables related by first-order differential equations. 
  To abstract from the number of inputs, outputs and states, the variables are expressed as vectors.
  The differential and algebraic equations are written in matrix form (the last one can be done when the dynamical system is linear and time invariant).
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "State Space Matrix Type" ;
  rdfs:subClassOf qudt:Matrix .

qudt:StateSpaceVector
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A state vector in general control systems describes the observed states of an object in state space.
  For example in variables of the degrees of freedom for motion. 
  As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "State Space Vector Type" ;
  rdfs:subClassOf qudt:Vector ;
  sh:property qudt:StateSpaceVector-coordinateSystem .

qudt:StringEncodingType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p><em>String Encoding Type</em> is an "Encoding" with the following instance(s):
   "UTF-16 String", "UTF-8 Encoding".
   </p>
  """^^rdf:HTML ;
  dcterms:description """
  An "Encoding" with the following instance(s): "qudt:UTF8-StringEncoding", qudt:UTF16-StringEncoding".
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "String Encoding Type" ;
  rdfs:subClassOf qudt:Encoding .

qudt:StringType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>String Datatype</em> is a data type that specifies the properties of a list structure that holds characters.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "String Type" ;
  rdfs:subClassOf qudt:ScalarDatatype ;
  sh:property qudt:StringType-dimensionality ;
  sh:property qudt:StringType-isByteString ;
  sh:property qudt:StringType-maxLength ;
  sh:property qudt:StringType-memberDatatype ;
  sh:property qudt:StringType-typeMatrix .

qudt:StringUTF16
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>String UTF-16 Type is a string data type that specifies the properties of string data structures which encode strings using the UTF-16 encoding. 
  UTF-16 is the native internal representation of text in many software systems, for example:
  </p>
  <ol>
  <li>Microsoft Windows NT/Windows 2000/Windows XP/Windows CE;</li>
  <li>Qualcomm BREW, and Symbian operating systems;</li>
  <li>the Java and .NET byte code environments;</li>
  <li>Mac OS X's Cocoa and Core Foundation frameworks;</li>
  <li>Qt cross-platform graphical widget toolkit.</li>
  </ol>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "String UTF16 Type" ;
  rdfs:subClassOf qudt:StringType ;
  rdfs:subClassOf qudt:TextStringType ;
  sh:property qudt:StringUTF16-memberDatatype .

qudt:StringUTF8
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  String UTF-8 Type is a string data type that specifies the properties of string data structures which encode strings using the UTF-8 encoding. 
  UTF-8 includes ASCII, otherwise referred to as IA-5 (International Alphabet 5, as standardized by International Organization for Standardization [ISO]) as the first 128 values. 
  The Internet Engineering Task Force (IETF) requires all Internet protocols to identify the encoding used for character data with UTF-8 as at least one supported encoding. 
  The Internet Mail Consortium (IMC) recommends that all e-mail programs must be able to display and create mail using UTF-8.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "String UTF8 Type" ;
  rdfs:subClassOf qudt:StringType ;
  rdfs:subClassOf qudt:TextStringType ;
  sh:property qudt:StringUTF8-memberDatatype ;
  vaem:isElaboratedIn <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> .

qudt:StructuredDatatype
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Structured Datatype</em>, in contrast to a scalar data type, is used to characterize classes of more complex data structures.
  Examples are collections, linked and indexed lists, trees, ordered trees, and multi-dimensional file formats.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Structured Data Type" ;
  rdfs:subClassOf qudt:Datatype ;
  sh:property qudt:StructuredDatatype-elementType .

qudt:Table
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A Table Type is a data type that specifies the properties of table data structures. 
  A table is both a mode of visual communication and a means of arranging data. 
  The precise conventions and terminology for describing tables varies depending on the context. 
  Moreover, tables differ significantly in variety, structure, flexibility, notation, representation and use.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Table Type" ;
  rdfs:subClassOf qudt:StructuredData ;
  sh:property qudt:Table-byRow ;
  sh:property qudt:Table-columns ;
  sh:property qudt:Table-dimensionality ;
  sh:property qudt:Table-rows .

qudt:TaggedEnumeration
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "An enumeration where each literal  has a tag that is a non-negative integer. These enumerations are likely to have their literals encoded - hence the need for the tag." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Tagged Enumeration" ;
  rdfs:subClassOf qudt:Enumeration ;
  sh:property qudt:TaggedEnumeration-code .

qudt:TextStringType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A text string. Encodings can be specified as subclass or in connection to character arrays in Structured Datatypes.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Text String Type" ;
  rdfs:subClassOf qudt:StringType .

qudt:ThreeBodyRotatingCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Three Body Rotating Coordinate System</em> is one that is associated with two different three-body systems.
  For example, the Sun-Earth-spacecraft system and the Earth-Moon-spacecraft system.
  </p>
  <p>The lunar coordinate systems are primarily used when operating in close proximity to the Moon. 
  There are, however, a few additional coordinate systems that are also useful when analyzing (and depicting) trajectories in the vicinity of the Earth-Moon system.  
  The Sun-Earth and Earth-Moon rotating coordinate frames are defined as follows: 
  </p>
  <p>The pole vector or Z-axis of the coordinate frame is set equal to the instantaneous orbit normal of the secondary (smaller) body about the primary (larger) body.
  The X-axis is set equal to the vector from the primary body center of mass (CM) to the secondary body CM. 
  The X-axis rotates at a rate equal to the instantaneous rotation rate of the secondary body about the primary body.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Three Body Rotating Coordinate System Type" ;
  rdfs:subClassOf qudt:AerospaceCoordinateSystem .

qudt:ThreeTupleType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A three-tuple is a tuple with exactly three members. A Three-Tuple Type is a data type that defines the type properties of a class of three-tuples and their members." ;
  rdfs:label "Three-Tuple Type" ;
  rdfs:subClassOf qudt:N-TupleType ;
  sh:property qudt:Three-Tuple-elementType ;
  sh:property qudt:Three-Tuple-elementTypeCount .

qudt:Time
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment "The class of data values that denote a point in time. Time values may be encoded in a 12-hour clock or a 24-hour clock, such as 1:35 AM, or 13:35." ;
  rdfs:label "Time" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:Time-type .

qudt:TimeDataType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'QUDT Enumeration'." ;
  dtype:value qudt:TIME ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Time data type" ;
  rdfs:subClassOf qudt:Enumeration ;
  rdfs:subClassOf qudt:ScalarDatatype .

qudt:TimeInterval
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment "A relative interval that is an increment in time. For example, this is used in time series arrays to express the time point of a vector of values." ;
  rdfs:label "Time interval" ;
  rdfs:subClassOf qudt:Parameter ;
  sh:property qudt:TimeInterval-type .

qudt:TimeSeriesArray
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment """
  A Time Series Array is a data type that specifies the properties of arrays that hold time series data. 
  A time series is a sequence of data points, measured at successive time intervals. 
  The time intervals may be uniformly or non-uniformly spaced.
  """ ;
  rdfs:label "Time Series Array" ;
  rdfs:subClassOf qudt:Array ;
  sh:property qudt:TimeSeriesArray-incrementDatatype ;
  sh:property qudt:TimeSeriesArray-vector .

qudt:TimeStringType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Time takes a number of forms, depending on the units used (e.g., year, day, minute, millisecond, or combinations thereof) and the origin (i.e., time zero) to which the time value is related." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Time Type" ;
  rdfs:subClassOf qudt:DateTimeStringType ;
  rdfs:subClassOf qudt:TextStringType .

qudt:TrajectoryCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Coordinate System\"." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Trajectory Coordinate System" ;
  rdfs:subClassOf qudt:AerospaceCoordinateSystem .

qudt:Tree
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Tree\" is a data type that defines the properties of data structures that represent trees. A tree is a graph data structure accessed beginning at the root node. Each node is either a leaf or an internal node. An internal node has one or more child nodes and is called the parent of its child nodes. Leaf nodes have no chidren. Nodes that share the same parent are siblings. In graph theoretic terminology, a tree is a connected, undirected, acyclic graph." ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Tree_(data_structure)> ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Tree Type" ;
  rdfs:subClassOf qudt:Graph .

qudt:Triplet
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A \"Tuple\"." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Triplet" ;
  rdfs:seeAlso qudt:Three-Tuple ;
  rdfs:seeAlso qudt:ThreeTupleType ;
  rdfs:subClassOf qudt:Three-Tuple ;
  rdfs:subClassOf qudt:ThreeTupleType .

qudt:TupleMemberType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Tuple Member Type is a data type that defines the properties of a member of a tuple. It is used to provide fine grained type specification to the elements of tuples." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Tuple Member Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:TupleMember-elementType ;
  sh:property qudt:TupleMember-orderInStructure .

qudt:TupleType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "<p>The term <em>Tuple</em> originated as an abstraction of the sequence: single, double, triple, quadruple, quintuple, n-tuple.  In mathematics, a tuple is a finite sequence (also known as an <em>Ordered List</em> of objects, each of a specified type. The <em>n</em> can be any non-negative integer.</p>"^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Tuple Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:Tuple-elementType ;
  sh:property qudt:Tuple-elementTypeCount ;
  sh:property qudt:Tuple-length .

qudt:TwoTupleType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A 2-tuple is called a pair. For example, a complex number can be represented as a 2-tuple, and 2D coordinates are sometimes represented as 2-tuples." ;
  rdfs:label "Two-Tuple Type" ;
  rdfs:subClassOf qudt:N-TupleType ;
  sh:property qudt:Two-Tuple-elementType ;
  sh:property qudt:Two-Tuple-elementTypeCount .

qudt:TypeList
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'QUDT Datatype'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Type list" ;
  rdfs:subClassOf qudt:Datatype .

qudt:TypeMatrix
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment """
  Members of this class are matrix data structures that describe the datatypes of a class of matrices. 
  That is, the members of this class are matrices with cells that contain datatypes (c.f. type:Datatype) and are used to describe the datatype structure of other matrices.
  """ ;
  rdfs:label "Type matrix" ;
  rdfs:subClassOf qudt:MatrixType .

qudt:UnsignedBigIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "An Unsgned Big Integer is an unsigned integer that can be represented in eight octets (64 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned Big Integer Type" ;
  rdfs:subClassOf qudt:BigIntegerType ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  sh:property qudt:UnsignedBigIntegerType-abbreviation ;
  sh:property qudt:UnsignedBigIntegerType-maxInclusive ;
  sh:property qudt:UnsignedBigIntegerType-minInclusive .

qudt:UnsignedIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "Unsgned Integers are integers that are either strictly non-negative or non-positive." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf qudt:UnsignedType ;
  sh:disjoint qudt:SignedIntegerType .

qudt:UnsignedLongIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "An Unsigned Long Integer is an unsigned integer that can be represented in four octets (32 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned Long Integer Type" ;
  rdfs:subClassOf qudt:LongIntegerType ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  sh:property qudt:UnsignedLongIntegerType-literal ;
  sh:property qudt:UnsignedLongIntegerType-maxInclusive ;
  sh:property qudt:UnsignedLongIntegerType-minInclusive .

qudt:UnsignedMediumIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  An "Unsigned Medium Integer" is an integer of 24 bits that only takes on both positive values.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned Medium Integer Type" ;
  rdfs:subClassOf qudt:UnsignedIntegerType .

qudt:UnsignedShortIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "An Unsigned Short Integer is an unsigned integer that can be represented in four octets (32 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned Short Integer Type" ;
  rdfs:subClassOf qudt:ShortIntegerType ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  sh:property qudt:UnsignedShortIntegerType-abbreviation ;
  sh:property qudt:UnsignedShortIntegerType-maxInclusive ;
  sh:property qudt:UnsignedShortIntegerType-minInclusive .

qudt:UnsignedType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "An unsigned data type is a numeric type that does not distinguish between positive and negative values." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned Type" ;
  rdfs:subClassOf qudt:NumericType ;
  sh:disjoint qudt:SignedType ;
  sh:property qudt:UnsignedType-signedness .

qudt:UnsignedVariableLengthIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  An "Unsigned Variable Length Integer" data type defines a data structure for representing unsigned integers that uses a variable number of bits depending on the magnitude of the integer. 
  Typically, variable length integer data types are between one and 64 bits in length.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned Variable Length Integer Type" ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  rdfs:subClassOf qudt:VariableLengthIntegerType .

qudt:VariableIntervalTimeSeriesArray
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A Variable Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over non-uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals. For variable interval time series, the successive time intervals may follow a repeating pattern, or may be completely random." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Variable Interval Time Series Array Type" ;
  rdfs:subClassOf qudt:TimeSeriesArray .

qudt:VariableIntervalTimeSeriesArrayType
  a rdfs:Class, sh:NodeShape ;
  rdfs:comment "A Variable Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over non-uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals. For variable interval time series, the successive time intervals may follow a repeating pattern, or may be completely random." ;
  rdfs:label "Variable Interval Time Series Array Type" ;
  rdfs:subClassOf qudt:TimeSeriesArrayType .

qudt:VariableLengthIntegerType
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  A "Variable Length Integer" data type defines a data structure for representing integers that uses a variable number of bits depending on the magnitude of the integer. 
  Typically, variable length integer data types are between one and 64 bits in length.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Variable Length Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  sh:property qudt:VariableLengthIntegerType-maxBits ;
  sh:property qudt:VariableLengthIntegerType-minBits .

qudt:Vector
  a rdfs:Class, sh:NodeShape ;
  dcterms:description """
  <p>A <em>Vector</em> is an array data type that can have a dimensionality of one, or more elements.
  Vectors can represent physical quantities, such as velocity, force, displacement;
  mathematical objects such as points or directions in space;
  and abstract representations for things such as colors, features, or embeddings in computational contexts.
  </p>
  <p>As a one-dimensional mathematical object it can represent a quantity with both magnitude and direction in space.
  One-dimensional vectors can be thought of as a special case of a 1D array.
  For example a 3D vector can be expressed as a list of coordinates: [x,y,z].
  </p>
  <p>
  A vector in n-dimensional space can represent a point, a direction, or a linear combination of basis vectors.
  </p>
  <p>
  Vectors can represent quantifiable values.
  For example a car moving at 60 m/hr to the north, assuming north is along the y-axis, can be represented in 2D as:
  </p>
  <dd>[0, 60]</dd>
  <p>
  In machine learning a <em>Feature Vector</em> can be expressed for a dataset entry as:
  <p>
  <dd>[5.1, 3.5, 1.4, 0.2]</dd>
  <p>
  Im AI for text processing a <em>Word Embedding Vector</em> is expressed as a N-dimensional space, where N can be a large number.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Vector" ;
  rdfs:subClassOf qudt:Array ;
  sh:property qudt:MaybeQuantityPropertyShape ;
  sh:property qudt:QuantityKindsPropertyShape .

qudt:VehicleCoordinateSystem
  a rdfs:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Aerospace coordinate system'." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Vehicle coordinate system" ;
  rdfs:subClassOf qudt:AerospaceCoordinateSystem ;
  sh:property qudt:VehicleCoordinateSystem-pitchRotationDefinition ;
  sh:property qudt:VehicleCoordinateSystem-rollRotationDefinition ;
  sh:property qudt:VehicleCoordinateSystem-yawRotationDefinition .

qudt:VisualCue
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Visual Cue" ;
  rdfs:subClassOf qudt:ModalCue .

qudt:WetDryStateType
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Wet dry state type" ;
  rdfs:subClassOf qudt:DiscreteState ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:YesNoType
  a rdfs:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Yes no type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:MassPropertiesArray
  a owl:Class ;
  dcterms:description """
  <p>A <em>Mass Properties Array</em> holds, for an object, four values for the properties:
   Center of Gravity, Mass, Moment of Inertia, and Product of Inertia. 
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Mass Properties Array" ;
  rdfs:subClassOf qudt:HeterogenousArray ;
  sh:property qudt:QuantityKindsPropertyShape .

dcterms:contributor
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "contributor" .

dcterms:creator
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "creator" .

dcterms:description
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "description" .

dcterms:rights
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "rights" .

dcterms:subject
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "subject" .

dcterms:title
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "title" .

qudt:accuracy
  a rdf:Property ;
  dcterms:description """
  <p><em>Accuracy</em> is the degree to which a given quantity is correct and free from error. 
  For example, a quantity specified as 100+/-1 has an (absolute) accuracy of +/-1 (meaning its true value can fall in the range 99-101),
   while a quantity specified as 100+/-2% has a (relative) accuracy of +/-2% (meaning its true value can fall in the range 98-102).
  </p>
  <p>The concepts of accuracy and precision are both closely related and often confused. 
  While the accuracy of a number x is given by the number of significant decimal (or other) digits to the right of the decimal point in x,
   the precision of x is the total number of significant decimal (or other) digits.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "accuracy" .

qudt:alignment
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "alignment" .

qudt:allowedPattern
  a rdf:Property ;
  dcterms:description "This property relates a date string encoding (c.f. type:DateStringEncodingType) to one or more XML Schema compliant regular expressions that together determine the allowed lexical expressions that can be unambiguously parsed to determine a temporal quantity." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "allowed pattern" .

qudt:ansiSQLName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "ANSI SQL name" ;
  rdfs:subPropertyOf qudt:id .

qudt:arg1Type
  a rdf:Property ;
  dcterms:description "This property relates a funciton data type with the type of its arg1." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "arg1Type" ;
  rdfs:subPropertyOf qudt:argType .

qudt:arg2Type
  a rdf:Property ;
  dcterms:description "This property relates a funciton data type with the type of its arg2." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "arg2Type" ;
  rdfs:subPropertyOf qudt:argType .

qudt:arg3Type
  a rdf:Property ;
  dcterms:description "This property relates a funciton data type with the type of its arg3." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "arg3Type" ;
  rdfs:subPropertyOf qudt:argType .

qudt:argType
  a rdf:Property ;
  dcterms:description "This property relates a function data type with the type of one of its arguments." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "argType" ;
  rdfs:subPropertyOf qudt:elementDatatype .

qudt:auralCue
  a rdf:Property ;
  rdfs:label "aural cue" ;
  rdfs:subPropertyOf qudt:modalCue .

qudt:auralCueEnumeration
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "aural cue enumeration" ;
  rdfs:subPropertyOf qudt:modalCueEnumeration .

qudt:base
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "base" .

qudt:basis
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "basis" .

qudt:bitOrder
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "bit order" .

qudt:bits
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "bits" .

qudt:bounded
  a rdf:Property ;
  dcterms:description "A datatype is bounded if its value space has either a finite upper and lower bound. Either bound may be inclusive or exclusive. " ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "bounded" .

qudt:byRow
  a rdf:Property ;
  dcterms:description "A boolean to specify whether an array is presented row by row or column by column." ;
  qudt:deprecated true ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "by row" ;
  vaem:rationale "Replaced with an enumeration. See type:MatrixElementOrder" .

qudt:byteOrder
  a rdf:Property ;
  dcterms:description "Byte order is an enumeration of two values: 'Big Endian' and 'Little Endian' and is used to denote whether the most signiticant byte is either first or last, respectively." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "byte order" .

qudt:bytes
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "bytes" .

qudt:cName
  a rdf:Property ;
  rdfs:comment "Datatype name in the C programming language" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "C Language name" ;
  rdfs:label "C name" ;
  rdfs:subPropertyOf qudt:id .

qudt:cardinality
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "cardinality" .

qudt:columns
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "columns" .

qudt:coordinateCenter
  a rdf:Property ;
  rdfs:domain qudt:CoordinateSystem ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "coordinate center" ;
  skos:prefLabel "coordinate center" .

qudt:coordinateSystem
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "coordinate system" .

qudt:coordinateSystemFrame
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "coordinate system frame" .

qudt:dataEncoding
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "data encoding" .

qudt:dataOrder
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "data order" .

qudt:datatype
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "datatype" .

qudt:defaultValue
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Default Value" .

qudt:dimensionality
  a rdf:Property ;
  dcterms:description """
  The number of dimensions making up a matrix or an array. 
  For example a 4 by 4 array has a dimensionality of 2. 
  Whereas a vector or a string has a dimensionality of 1.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "dimensionality" .

qudt:dimensions
  a rdf:Property ;
  dcterms:description """
  The extent of each dimension making up a matrix or an array. 
  For example a 4 by 4 array has dimensions (4 4),
  whereas a vector or a string has dimensions (1).
  """ ;
  dcterms:description """
  The extent of each dimension making up an array or matrix.
  Dimensions are expressed as an integer list.
  For example a 4 by 4 array has dimensions (4 4), whereas a vector or a string has dimensions (1).
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "dimensions" .

qudt:elementDatatype
  a rdf:Property ;
  dcterms:description """
  This property is used to relate a structured data type with the data type the structured type's elements. 
  It is used for structured data types with elements that are all of the same type.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "element datatype" .

qudt:elementKind
  a rdf:Property ;
  dcterms:description "This property is used to describe the quantity kind for a dimensional data type." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "element kind" ;
  rdfs:subPropertyOf qudt:elementKind .

qudt:elementLabel
  a rdf:Property ;
  dcterms:description "This property is used to label the field of a composite data structure." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "element label" .

qudt:elementName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "element name" .

qudt:elementTypeCount
  a rdf:Property ;
  dcterms:description "This property determines the allowed number of element types that a structured data type may have." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "element type count" .

qudt:elementTypeList
  a rdf:Property ;
  dcterms:description """
  This property is used to define the data type of the elements of a structured data type. 
  It is used for structured data types with elements that are of different types.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "element type list" .

qudt:elementUnit
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "element unit" .

qudt:encoding
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "encoding" .

qudt:enumeration
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "enumeration" .

qudt:exponent
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "exponent" .

qudt:field
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "field" .

qudt:fieldLabels
  a rdf:Property ;
  dcterms:description "This property is used to list the field labels for a record type." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "field labels" .

qudt:fieldName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "field name" .

qudt:float_X
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "float X" .

qudt:float_Y
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "float Y" .

qudt:float_Z
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "float Z" .

qudt:frameType
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "frame type" .

qudt:functionArity
  a rdf:Property ;
  dcterms:description "This property is used to state the number of arguments for a function type." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "function arity" .

qudt:hasQuantityKindsList
  a rdf:Property ;
  dcterms:description "This property is used to specify a list of quantity kinds." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "quantity kinds" .

qudt:iconicCue
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "iconic cue" ;
  rdfs:subPropertyOf qudt:modalCue .

qudt:iconicCueEnumeration
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "iconic cue enumeration" ;
  rdfs:subPropertyOf qudt:modalCueEnumeration .

qudt:inverted
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "inverted" .

qudt:isByteString
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "is byte string" .

qudt:isHeterogeneous
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "is heterogeneous" .

qudt:javaName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "java name" ;
  rdfs:subPropertyOf qudt:id .

qudt:jsName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Javascript name" ;
  rdfs:subPropertyOf qudt:id .

qudt:kinestheticCue
  a rdf:Property ;
  rdfs:label "kinesthetic cue" ;
  rdfs:subPropertyOf qudt:modalCue .

qudt:kinestheticCueEnumeration
  a rdf:Property ;
  rdfs:label "kinesthetic cue enumeration" ;
  rdfs:subPropertyOf qudt:modalCueEnumeration .

qudt:length
  a rdf:Property ;
  dcterms:description "The length of a structure, for example the size of a vector" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "length" .

qudt:lowerBound
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "lower bound" .

qudt:mantissa
  a rdf:Property ;
  rdfs:comment "In scientific notation, the mantissa of a real number is the integer coefficient preceding the base raised to the exponent." ;
  rdfs:label "mantissa" .

qudt:matlabName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "matlab name" ;
  rdfs:subPropertyOf qudt:id .

qudt:maxBits
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "maximum bits" .

qudt:maxDepth
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "max depth" .

qudt:maxExclusive
  a rdf:Property ;
  dcterms:description "maxExclusive is the exclusive upper bound of the value space for a datatype with the ordered property. The value of maxExclusive must be in the value space of the base type or be equal to {value} in {base type definition}." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "max exclusive" ;
  rdfs:subPropertyOf qudt:upperBound .

qudt:maxExponent
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "max exponent" .

qudt:maxInclusive
  a rdf:Property ;
  dcterms:description "maxInclusive is the inclusive upper bound of the value space for a datatype with the ordered property. The value of maxInclusive must be in the value space of the base type." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "max inclusive" ;
  rdfs:subPropertyOf qudt:upperBound .

qudt:maxLength
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "max length" .

qudt:maxMantissa
  a rdf:Property ;
  dcterms:description """
  <p>The maximium mantissa is the largest integer that may appear as a coefficient in a finite precision representation of a real number.
  For a given numeric data type, the value of <em>maxMantissa}</em> (<em>M</em>) and the values of <em>base</em> (<em>b</em>) and  <em>precision</em> (<em>p</em>) are related by the formula:
  </p>
  <p><em>M = b<sup></sup> - 1</em> .</p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "max mantissa" .

qudt:member
  a rdf:Property ;
  dcterms:description """
  This property is used to define a collection's elements. 
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "member" .

qudt:memberDatatype
  a rdf:Property ;
  dcterms:description """
  This property is used to define the data type of a collection's elements. 
  It is used for collections with elements that are all of the same type.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "member datatype" .

qudt:microsoftSQLServerName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Microsoft SQL Server name" ;
  rdfs:subPropertyOf qudt:id .

qudt:minBits
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "minimum bits" .

qudt:minExclusive
  a rdf:Property ;
  dcterms:description "minExclusive is the exclusive lower bound of the value space for a datatype with the ordered property. The value of minExclusive must be in the value space of the base type or be equal to {value} in {base type definition}." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "min exclusive" ;
  rdfs:subPropertyOf qudt:lowerBound .

qudt:minInclusive
  a rdf:Property ;
  dcterms:description "minInclusive is the inclusive lower bound of the value space for a datatype with the ordered property. The value of minInclusive must be in the value space of the base type." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "min inclusive" ;
  rdfs:subPropertyOf qudt:lowerBound .

qudt:minLength
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "min length" .

qudt:minMantissa
  a rdf:Property ;
  dcterms:description """
  <p>The minimium mantissa is the negative integer with the greatest magnitude that may appear as a coefficient in a finite precision representation of a real number.  
  For a given numeric data type, the value of <em>minMantissa</em> (<em>M</em>) and the values of <em>base</em> (<em>b</em>) and <em>precision</em> (<em>p</em>) are related by the formula:
  </p>
  <p><em>M = -(b<sup>p</sup> - 1)</em>.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "min mantissa" .

qudt:minValue
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "minimum value" .

qudt:modalCue
  a rdf:Property ;
  rdfs:label "modal cue" .

qudt:modalCueEnumeration
  a rdf:Property ;
  rdfs:label "modal cue enumeration" ;
  rdfs:subPropertyOf qudt:enumeration .

qudt:modifiability
  a rdf:Property ;
  rdfs:comment "Reference to one in a list of enumerated elements that indicates whether data (e.g. variable or parameter) can be changed." ;
  rdfs:label "modifiability" .

qudt:mySQLName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "MySQL name" ;
  rdfs:subPropertyOf qudt:id .

qudt:negativeDeltaLimit
  a rdf:Property ;
  dcterms:description "A negative change limit between consecutive sample values for a parameter. The Negative Delta may be the encoded value or engineering units value depending on whether or not a Calibrator is defined."^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "negative delta limit" .

qudt:odbcName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "ODBC name" ;
  rdfs:subPropertyOf qudt:id .

qudt:oleDBName
  a rdf:Property ;
  dcterms:description """
  <p>OLE DB (Object Linking and Embedding, Database, sometimes written as OLEDB or OLE-DB), an API designed by Microsoft, allows accessing data from a variety of sources in a uniform manner. 
  The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE.
  </p>"""^^rdf:HTML ;
  dcterms:description "OLE DB (Object Linking and Embedding, Database, sometimes written as OLEDB or OLE-DB), an API designed by Microsoft, allows accessing data from a variety of sources in a uniform manner. The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE. " ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/OLE_DB> ;
  prov:wasInfluencedBy <http://msdn.microsoft.com/en-us/library/windows/desktop/ms714931(v=vs.85).aspx> ;
  qudt:informativeReference "http://en.wikipedia.org/wiki/OLE_DB"^^xsd:anyURI ;
  qudt:informativeReference "http://msdn.microsoft.com/en-us/library/windows/desktop/ms714931(v=vs.85).aspx"^^xsd:anyURI ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "OLE DB name" ;
  rdfs:subPropertyOf qudt:id .

qudt:optional
  a rdf:Property ;
  rdfs:label "optional" .

qudt:oracleSQLName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "ORACLE SQL name" ;
  rdfs:subPropertyOf qudt:id .

qudt:orderInStructure
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "order in structure" .

qudt:orderedType
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "ordered type" .

qudt:orderingRelation
  a rdf:Property ;
  dcterms:description "This property identifies the mathematical comparison operator (such as \"<\" or \">\") that is used to order the elements of a collection." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Ordering Relation" .

qudt:originDefinition
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "origin definition" .

qudt:padding
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "padding" .

qudt:pattern
  a rdf:Property ;
  dcterms:description "A pattern is a constraint on the value space of a datatype which is achieved by constraining the lexical space to literals which match a specific pattern. The value of pattern must be a regular expression." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "pattern" .

qudt:pitchRotationDefinition
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "pitch rotation definition" ;
  rdfs:subPropertyOf qudt:rotationDefinition .

qudt:positiveDeltaLimit
  a rdf:Property ;
  dcterms:description "A positive change limit between consecutive sample values for a parameter. The Positive Delta may be the encoded value or engineering units value depending on whether or not a Calibrator is defined."^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Positive delta limit" .

qudt:precision
  a rdf:Property ;
  dcterms:description """
  <p>Precision is the number of digits used to perform a given computation. 
  The concepts of accuracy and precision are both closely related and often confused. 
  While the accuracy of a number x is given by the number of significant decimal (or other) digits to the right of the decimal point in x,
   the precision of x is the total number of significant decimal (or other) digits.
  </p>
  <p>For a given numeric data type, the value of type:precision (?p) is related to the values of type:maxMantissa (?M) and type:base (?b) by the formula:
  </p>
  <p>?p := log(?b, ?M)
  </p>
  <p>where log(a,y) = x iff y=a^x.
  </p>
  """^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "precision" .

qudt:protocolBuffersName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "protocol buffers name" ;
  rdfs:subPropertyOf qudt:id .

qudt:pythonName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "python name" ;
  rdfs:subPropertyOf qudt:id .

qudt:rdfsDatatype
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "rdfs datatype" .

qudt:realization
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "realization" .

qudt:referenceFrame
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "reference frame" ;
  rdfs:subPropertyOf qudt:coordinateSystemFrame .

qudt:referenceFrameType
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "reference frame type" .

qudt:returnType
  a rdf:Property ;
  dcterms:description "This property is used to state the return type of a function type." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "return type" ;
  rdfs:subPropertyOf qudt:elementDatatype .

qudt:rgbCode
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "rgb code" .

qudt:rollRotationDefinition
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "roll rotation definition" ;
  rdfs:subPropertyOf qudt:rotationDefinition .

qudt:rotationDefinition
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "rotation definition" .

qudt:rows
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "rows" .

qudt:signedness
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "signedness" .

qudt:significantDigits
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "significant digits" .

qudt:sound
  a rdf:Property ;
  rdfs:comment "The intended use of the sound property is to be associated with modal enumerations" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "sound" .

qudt:stringValue
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "string value" ;
  rdfs:subPropertyOf qudt:scalarValue .

qudt:timeDatatype
  a rdf:Property ;
  rdfs:label "time datatype" ;
  rdfs:subPropertyOf qudt:type .

qudt:totalDigits
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "total digits" .

qudt:type
  a rdf:Property ;
  rdfs:comment "A reference to the specification of the data type of a variable or constant." ;
  rdfs:label "type" .

qudt:typeMatrix
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "type matrix" .

qudt:typeVector
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "type vector" .

qudt:upperBound
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "upper bound" .

qudt:valueRange
  a rdf:Property ;
  rdfs:label "value range" .

qudt:valueType
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "value type" .

qudt:valueVector
  a rdf:Property ;
  rdfs:comment "A list of the values of elements in a Partial Array." ;
  rdfs:label "value vector" .

qudt:vbName
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Visual Basic name" ;
  rdfs:subPropertyOf qudt:id .

qudt:vector
  a rdf:Property ;
  rdfs:label "vector" .

qudt:visualCue
  a rdf:Property ;
  rdfs:label "visual cue" ;
  rdfs:subPropertyOf qudt:modalCue .

qudt:visualCueEnumeration
  a rdf:Property ;
  rdfs:label "visual cue enumeration" ;
  rdfs:subPropertyOf qudt:modalCueEnumeration .

qudt:xAxisDefinition
  a rdf:Property ;
  dcterms:description """
  The definition of the X-Axis could be an intersection, cross-product or other function of a  meridian or orbit. 
  It could also mention any aspects of rotation, for example, the rotation equator of the Earth, Sun, Moon or other celestial body. 
  An epoch might also be given.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "X-Axis Definition" .

qudt:xCoordinateDefinition
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "X-Coordinate definition" .

qudt:yAxisDefinition
  a rdf:Property ;
  dcterms:description """
  The definition of the Y-Axis could be an intersection, cross-product or other function of a meridian or orbit. 
  It could also mention any aspects of rotation, for example, the rotation equator of the Earth, Sun, Moon or other celestial body. 
  An epoch might also be given.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Y-Axis definition" .

qudt:yCoordinateDefinition
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Y-Coordinate definition" .

qudt:yawRotationDefinition
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Yaw rotation definition" ;
  rdfs:subPropertyOf qudt:rotationDefinition .

qudt:zAxisDefinition
  a rdf:Property ;
  dcterms:description """
  The definition of the Y-Axis could be an intersection, croos-product or other function of a meridian or orbit. 
  It could also mention any aspects of rotation, for example, the rotation equator of the Earth, Sun, Moon or other celestial body. 
  An epoch might also be given.
  """ ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Z-Axis definition" .

qudt:zCoordinateDefinition
  a rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Z-Coordinate definition" .

<http://qudt.org/schema/shacl/datatype/GMD_datatype>
  a vaem:GraphMetaData ;
  dcterms:description """
  <p>The QUDT 'Datatype' ontology is a specification of scalar and structured data types. 
  Scalar data types are defined for all the commonly encountered forms of numbers, characters and booleans, with their representations in a number of vendor and industry specific technologies. 
  Structured data types cover arrays, lists, trees and many other forms of composite data elements. 
  Specification of coordinate systems is also covered.
  </p>
  """^^rdf:HTML ;
  dcterms:modified "2024-11-22T14:54:24-05:00"^^xsd:dateTime ;
  dcterms:rights """
  <p>The QUDT Ontologies are issued under a Creative Commons Attribution 4.0 International License (CC BY 4.0), available  <a href="https://creativecommons.org/licenses/by/4.0/">here</a>. 
  Attribution should be made to <a href="https://www.qudt.org">QUDT.org</a>.
  </p>"""^^rdf:HTML ;
  dcterms:subject "Datatypes" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "QUDT Schema for Datatypes - Version $$QUDT_VERSION$$" ;
  vaem:graphTitle "QUDT Schema for Datatypes - Version $$QUDT_VERSION$$" ;
  vaem:hasGraphRole vaem:SchemaGraph ;
  vaem:isMetadataFor <http://qudt.org/$$QUDT_VERSION$$/schema/datatype> ;
  vaem:latestPublishedVersion "https://qudt.org/doc/$$CURRENT_YEAR$$/$$CURRENT_MONTH$$/DOC_SCHEMA-DATATYPES.html"^^xsd:anyURI ;
  vaem:logo "https://qudt.org/linkedmodels.org/assets/lib/lm/images/logos/qudt_logo-300x110.png"^^xsd:anyURI ;
  vaem:name "QUDT" ;
  vaem:namespace "http://qudt.org/schema/qudt/"^^xsd:anyURI ;
  vaem:namespacePrefix "qudt" ;
  vaem:owner "QUDT.ORG" ;
  vaem:previousPublishedVersion "https://qudt.org/doc/$$QUDT_PREV_RELEASE_YEAR$$/$$QUDT_PREV_RELEASE_MONTH$$/DOC_SCHEMA-DATATYPES.html"^^xsd:anyURI ;
  vaem:publishedDate "2017-05-10"^^xsd:date ;
  vaem:releaseDate "2016-05-09"^^xsd:date ;
  vaem:title "QUDT Schema for Datatypes - Version $$QUDT_VERSION$$" ;
  vaem:turtleFileURL "http://qudt.org/$$QUDT_VERSION$$/schema/datatype.ttl"^^xsd:anyURI ;
  vaem:usesNonImportedResource dcterms:abstract ;
  vaem:usesNonImportedResource dcterms:created ;
  vaem:usesNonImportedResource dcterms:creator ;
  vaem:usesNonImportedResource dcterms:modified ;
  vaem:usesNonImportedResource dcterms:rights ;
  vaem:usesNonImportedResource dcterms:title ;
  vaem:usesNonImportedResource <http://voag.linkedmodel.org/voag#QUDT-Attribution> ;
  vaem:withAttributionTo <http://voag.linkedmodel.org/voag#QUDT-Attribution> .

qudt:AllValuesMustHaveSameDataTypeShape
  a sh:NodeShape ;
  rdfs:label "All Values must have same DataType Shape" ;
  sh:severity sh:Violation ;
  sh:sparql [
    sh:message "Data Item {$this} has type {?valueType}." ;
    sh:prefixes <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:select """
        SELECT $this ?valueType
        WHERE {
              $this qudt:datatype/qudt:rdfsDatatype ?datatype .
              $this qudt:value ?valueList.
              ?valueList rdf:rest*/rdf:first ?value .
              BIND(datatype(?value) as ?valueType) .
              FILTER(?valueType != ?datatype)
        }
        """ ;
  ] ;
  sh:targetClass qudt:HomogeneousArray .

qudt:Array-isHeterogeneous
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:isHeterogeneous .

qudt:Array-value
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:node qudt:NumericListShape ;
  sh:path qudt:value .

qudt:Array2DvalueList
  a rdfs:Resource ;
  dcterms:description """
  An rdf:List for a 2D array.
  For example "[[1,2], [3,4], [5,6]]"
  """ ;
  rdf:first [
    sh:datatype qudt:List ;
  ] ;
  rdf:rest ( [
    sh:datatype qudt:List ;
  ] ) ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "2D Array Value List" ;
  rdfs:subClassOf rdf:List .

qudt:AuralCue-sound
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:anyURI ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:sound .

qudt:AuralCueEnumeration-defaultValue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:AuralCue ;
  sh:path qudt:defaultValue .

qudt:BalancedTree-maxDepth
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:maxDepth .

qudt:BigEndian
  a qudt:EndianType ;
  dtype:literal "big" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Big Endian" .

qudt:BitAligned
  a qudt:AlignmentType ;
  dtype:literal "bit" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Bit Aligned" .

qudt:BitField
  a rdfs:Datatype ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "bitfield" ;
  rdfs:subClassOf xsd:string .

qudt:BooleanEncoding
  a qudt:BooleanEncodingType ;
  qudt:bits 1 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Boolean Encoding" .

qudt:BooleanType-encoding
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:BooleanEncodingType ;
  sh:path qudt:encoding .

qudt:ByteAligned
  a qudt:AlignmentType ;
  dtype:literal "byte" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Byte Aligned" .

qudt:CRC32
  a rdfs:Datatype ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "CRC-32" ;
  rdfs:subClassOf xsd:integer .

qudt:CT_COUNTABLY-INFINITE
  a qudt:CardinalityType ;
  dcterms:description """
  A set of numbers is called countably infinite if there is a way to enumerate them.
  Formally this is done with a bijection function that associates each number in the set with exactly one of the positive integers.
  The set of all fractions is also countably infinite.
  In other words, any set $X$ that has the same cardinality as the set of the natural numbers,
   or $| X | \\; =  \\; | \\mathbb N | \\; = \\; \\aleph0$, is said to be a countably infinite set.
  """^^qudt:LatexString ;
  dtype:literal "countable" ;
  qudt:informativeReference "http://www.math.vanderbilt.edu/~schectex/courses/infinity.pdf"^^xsd:anyURI ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Countably Infinite Cardinality Type" .

qudt:CT_FINITE
  a qudt:CardinalityType ;
  dcterms:description """
  Any set $X$ with cardinality less than that of the natural numbers, or $| X | \\\\; <  \\; | \\\\mathbb N | $, is said to be a finite set.
  """^^qudt:LatexString ;
  dtype:literal "finite" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Finite Cardinality Type" .

qudt:CT_UNCOUNTABLE
  a qudt:CardinalityType ;
  dcterms:description """
  Any set with cardinality greater than that of the natural numbers, or 
  $$| X | \\; >  \\; | \\mathbb N | $$
  
  For example $| R| \\; =  \\;  c  \\; > |\\mathbb N |$, is said to be uncountable.
  """^^qudt:LatexString ;
  dtype:literal "uncountable" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Uncountable Cardinality Type" .

qudt:CardinalityType-literal
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path dtype:literal .

qudt:CharEncoding
  a qudt:BooleanEncodingType, qudt:CharEncodingType ;
  dcterms:description "7 bits of 1 octet" ;
  qudt:bytes 1 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Char Encoding" .

qudt:Collection-memberQuantity
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Quantity ;
  sh:maxCount 1 ;
  sh:path qudt:quantify .

qudt:Collection-memberUnit
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Unit ;
  sh:maxCount 1 ;
  sh:path qudt:hasUnit .

qudt:ColorCue-rgbCode
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:rgbCode .

qudt:CompositeDataStructure-dataElement
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:DataSetElement ;
  sh:path qudt:field .

qudt:CompositeDatatype-alignment
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:AlignmentType ;
  sh:path qudt:alignment .

qudt:CompositeDatatype-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:QuantityKind ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:hasQuantityKind .

qudt:CompositeDatatype-padding
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:PaddingType ;
  sh:maxCount 1 ;
  sh:path qudt:padding .

qudt:CompositionTreeType-compositionFunction
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CompositionFunction ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:function .

qudt:Container-elementTypeCount
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:hasValue 1 ;
  sh:path qudt:elementTypeCount .

qudt:CoordinateSystem-abbreviation
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:abbreviation .

qudt:CoordinateSystem-acronym
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path vaem:acronym .

qudt:CoordinateSystem-coordinateCenter
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CoordinateCenterType ;
  sh:maxCount 1 ;
  sh:path qudt:coordinateCenter .

qudt:CoordinateSystem-referenceFrame
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:ReferenceFrame ;
  sh:maxCount 1 ;
  sh:path qudt:referenceFrame .

qudt:CoordinateSystemType-originDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:originDefinition .

qudt:Coordinates-2D-DoublePrecision-double_X
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:double_X .

qudt:Coordinates-2D-DoublePrecision-double_Y
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:double_Y .

qudt:Coordinates-2D-SinglePrecision-float_X
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_X .

qudt:Coordinates-2D-SinglePrecision-float_Y
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_Y .

qudt:Coordinates-3D-DoublePrecision-double_X
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:double_X .

qudt:Coordinates-3D-DoublePrecision-double_Y
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:double_Y .

qudt:Coordinates-3D-DoublePrecision-double_Z
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:double_Z .

qudt:Coordinates-3D-SinglePrecision-float_X
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_X .

qudt:Coordinates-3D-SinglePrecision-float_Y
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_Y .

qudt:Coordinates-3D-SinglePrecision-float_Z
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_Z .

qudt:Coordinates-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CoordinateMember ;
  sh:path qudt:elementDatatype .

qudt:DataEncoding-bitOrder
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:EndianType ;
  sh:maxCount 1 ;
  sh:path qudt:bitOrder .

qudt:DataEncoding-byteOrder
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:EndianType ;
  sh:maxCount 1 ;
  sh:path qudt:byteOrder .

qudt:DataEncoding-encoding
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Encoding ;
  sh:maxCount 1 ;
  sh:path qudt:encoding .

qudt:DataSetElement-elementLabel
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:elementLabel .

qudt:DataSetElement-optional
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:optional .

qudt:DataSetElement-quantityKind
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:QuantityKind ;
  sh:maxCount 1 ;
  sh:path qudt:hasQuantityKind .

qudt:Datatype-ansiSQLName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:ansiSQLName .

qudt:Datatype-basis
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:path qudt:basis .

qudt:Datatype-bounded
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:bounded .

qudt:Datatype-cName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:cName .

qudt:Datatype-cardinality
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CardinalityType ;
  sh:maxCount 1 ;
  sh:path qudt:cardinality .

qudt:Datatype-description
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:deactivated true ;
  sh:maxCount 1 ;
  sh:path vaem:description .

qudt:Datatype-id
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:deactivated true ;
  sh:maxCount 1 ;
  sh:path qudt:id .

qudt:Datatype-javaName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:javaName .

qudt:Datatype-jsName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:jsName .

qudt:Datatype-matlabName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:matlabName .

qudt:Datatype-microsoftSQLServerName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:microsoftSQLServerName .

qudt:Datatype-mySQLName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:mySQLName .

qudt:Datatype-odbcName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:odbcName .

qudt:Datatype-oleDBName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:oleDBName .

qudt:Datatype-oracleSQLName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:oracleSQLName .

qudt:Datatype-orderedType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:OrderedType ;
  sh:maxCount 1 ;
  sh:path qudt:orderedType .

qudt:Datatype-protocolBuffersName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:protocolBuffersName .

qudt:Datatype-pythonName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:pythonName .

qudt:Datatype-vbName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:vbName .

qudt:DatatypePropertyShape
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:datatype .

qudt:DateTimeStringEncodingType-allowedPattern
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:minCount 1 ;
  sh:path qudt:allowedPattern .

qudt:DateTimeStringType-encoding
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:DateTimeStringEncodingType ;
  sh:maxCount 1 ;
  sh:path qudt:encoding .

qudt:DateTypeUnion
  a rdf:List ;
  dcterms:description """
  An rdf:List that can be used in property constraints as the type in an sh:or to indicate
   that all values of a property must be an xsd date type.
  """ ;
  rdf:first [
    sh:datatype xsd:date ;
  ] ;
  rdf:rest ( [
    sh:datatype xsd:dateTime ;
  ] [
    sh:datatype xsd:gYear ;
  ] [
    sh:datatype xsd:gMonth ;
  ] ) ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Date Type Union" .

qudt:DimensionalityPropertyShape
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:dimensionality .

qudt:DimensionalityShape
  a sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Dimensions Shape" ;
  sh:severity sh:Warning ;
  sh:sparql [
    sh:message "\"{$this}\" has {$actualDimensions} dimensions extent and needs to have {$specifiedDimensions}" ;
    sh:prefixes <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:select """
        SELECT $this $actualDimensions $specifiedDimensions
        WHERE {
            $this qudt:dimensionality $dimensionality .
            $this qudt:dimensions ?dimensions .
            ?dimensions rdf:rest*/rdf:first $specifiedDimensions .
            { SELECT $this (COUNT(?listValue )AS $actualDimensions)
              WHERE {
              $this qudt:value/rdf:rest*/rdf:first ?listValue .
              } GROUP BY $this
            }
            FILTER ($actualDimensions != $specifiedDimensions)
          }
        """ ;
  ] ;
  sh:targetClass qudt:Array ;
  sh:targetClass qudt:List .

qudt:DimensionsPropertyShape
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:node qudt:IntegerListShape ;
  sh:path qudt:dimensions .

qudt:DiscreteState-inverted
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:inverted .

qudt:EarthCoordinateSystem-coordinateCenter
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CoordinateCenterType ;
  sh:hasValue qudt:CCT_EarthCentered ;
  sh:path qudt:coordinateCenter .

qudt:Encoding-bits
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:bits .

qudt:Encoding-bytes
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:bytes .

qudt:EngineeringValueTupleMember-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:RealSinglePrecisionType ;
  sh:path qudt:elementDatatype .

qudt:Enumeration-bits
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:bits .

qudt:Enumeration-defaultValue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:EnumeratedValue ;
  sh:path qudt:defaultValue .

qudt:Enumeration-encoding
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:encoding .

qudt:Enumeration-value
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:EnumeratedValue ;
  sh:path dtype:value .

qudt:FieldType-elementName
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:elementName .

qudt:FieldType-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:path qudt:elementDatatype .

qudt:FieldType-fieldLabel
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:fieldLabel .

qudt:FieldType-fieldType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:minCount 1 ;
  sh:path qudt:fieldType .

qudt:FieldType-optional
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:optional .

qudt:FunctionDatatype-argType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:path qudt:argType .

qudt:FunctionDatatype-functionArity
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:functionArity .

qudt:FunctionDatatype-returnType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:returnType .

qudt:HeterogenousArray-datatype
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:datatype .

qudt:HexBinaryType-length
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:length .

qudt:HexBinaryType-maxLength
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:maxLength .

qudt:HexBinaryType-minLength
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:minLength .

qudt:HexBinaryType-pattern
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:pattern .

qudt:IEEE754_1985RealEncoding
  a qudt:FloatingPointEncodingType ;
  qudt:bytes 32 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "IEEE 754 1985 Real Encoding" .

qudt:ISO8601-UTCDateTime-BasicFormat
  a qudt:DateTimeStringEncodingType ;
  qudt:allowedPattern "[0-9]{4}[0-9]{2}[0-9]{2}T[0-9]{2}[0-9]{2}[0-9]{2}.[0-9]+Z" ;
  qudt:allowedPattern "[0-9]{4}[0-9]{2}[0-9]{2}T[0-9]{2}[0-9]{2}[0-9]{2}Z" ;
  rdfs:isDefinedBy <file:///Users/ralphtq/git-qudt/qudt-public-repo/qudt> ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "ISO 8601 UTC Date Time - Basic Format" .

qudt:IconicCue-image
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:image .

qudt:IconicCueEnumeration-defaultValue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:IconicCue ;
  sh:path qudt:defaultValue .

qudt:InertialCoordinateFrame-frameType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:hasValue qudt:FT_NON-ROTATING ;
  sh:path qudt:frameType .

qudt:IntegerUnionList
  a rdf:List ;
  rdf:first [
    sh:datatype xsd:int ;
  ] ;
  rdf:rest ( [
    sh:datatype xsd:nonNegativeInteger ;
  ] [
    sh:datatype xsd:positiveInteger ;
  ] [
    sh:datatype xsd:integer ;
  ] ) ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Integer Union List" .

qudt:KinestheticCue-code
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path dtype:code .

qudt:KinestheticCueEnumeration-defaultValue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:KinestheticCue ;
  sh:path qudt:defaultValue .

qudt:LittleEndian
  a qudt:EndianType ;
  dtype:literal "little" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Little Endian" .

qudt:LongUnsignedIntegerEncoding
  a qudt:IntegerEncodingType ;
  qudt:bytes 8 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Long Unsigned Integer Encoding" .

qudt:LunarCoordinateSystem-coordinateCenter
  a sh:PropertyShape ;
  sh:class qudt:CoordinateCenterType ;
  sh:hasValue qudt:CCT_MoonCentered ;
  sh:path qudt:coordinateCenter .

qudt:LunarCoordinateSystem-realization
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:realization .

qudt:LunarCoordinateSystem-xAxisDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:xAxisDefinition .

qudt:LunarCoordinateSystem-yAxisDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:yAxisDefinition .

qudt:LunarCoordinateSystem-zAxisDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:zAxisDefinition .

qudt:Major
  a qudt:MajorMinorType ;
  dtype:code 2 ;
  dtype:literal "major" ;
  dtype:order "2"^^xsd:int ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/shacl/datatype> ;
  rdfs:label "Major" .

qudt:MarsCoordinateSystem-coordinateCenter
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CoordinateCenterType ;
  sh:hasValue qudt:CCT_MarsCentered ;
  sh:path qudt:coordinateCenter .

qudt:MatrixElementOrder-byRow
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:byRow .

qudt:MatrixElementOrder-dataOrder
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:MatrixElementOrder ;
  sh:maxCount 1 ;
  sh:path qudt:dataOrder .

qudt:MaybeQuantityPropertyShape
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Quantity ;
  sh:maxCount 1 ;
  sh:path qudt:quantity .

qudt:MaybeUnitPropertyShape
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Unit ;
  sh:maxCount 1 ;
  sh:path qudt:hasUnit .

qudt:Minor
  a qudt:MajorMinorType ;
  dtype:code 1 ;
  dtype:literal "minor" ;
  dtype:order "1"^^xsd:int ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/shacl/datatype> ;
  rdfs:label "Minor" .

qudt:ModalCue-duration
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:duration .

qudt:ModalEnumeration-defaultValue
  a sh:PropertyShape ;
  sh:class qudt:ModalCue ;
  sh:path qudt:defaultValue .

qudt:MultiDimensionalDataFormat-descriptor
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:descriptor .

qudt:MultiModalEnumeration-auralCueEnumeration
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:auralCueEnumeration .

qudt:MultiModalEnumeration-iconicCueEnumeration
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:iconicCueEnumeration .

qudt:MultiModalEnumeration-kinestheticCueEnumeration
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:kinestheticCueEnumeration .

qudt:MultiModalEnumeration-modalCueEnumeration
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:ModalEnumeration ;
  sh:path qudt:modalCueEnumeration .

qudt:MultiModalEnumeration-visualCueEnumeration
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:visualCueEnumeration .

qudt:MultiModalType-auralCue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:auralCue .

qudt:MultiModalType-iconicCue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:iconicCue .

qudt:MultiModalType-kinestheticCue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:kinestheticCue .

qudt:MultiModalType-modalCue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:ModalCue ;
  sh:path qudt:modalCue .

qudt:MultiModalType-visualCue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:visualCue .

qudt:N-Tuple-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:minCount 0 ;
  sh:path qudt:elementDatatype .

qudt:No
  a qudt:YesNoType ;
  dtype:literal "N" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "No" .

qudt:NonModifiableParameter
  a qudt:ParameterModifiabilityType ;
  dtype:code "0" ;
  dtype:literal "fixed" ;
  rdfs:comment "Parameter is fixed, not modifiable." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Non modifiable parameter" .

qudt:NonNegativeIntegerUnionList
  a rdf:List ;
  rdf:first [
    sh:datatype xsd:nonNegativeInteger ;
  ] ;
  rdf:rest ( [
    sh:datatype xsd:positiveInteger ;
  ] ) ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Non-negative union list" .

qudt:NonRotatingInertialFrame-frameType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:hasValue qudt:FT_NON-ROTATING ;
  sh:path qudt:frameType .

qudt:NumericType-accuracy
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:accuracy .

qudt:NumericType-signedness
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:SignednessType ;
  sh:maxCount 1 ;
  sh:path qudt:signedness .

qudt:OctetEncoding
  a qudt:BooleanEncodingType, qudt:ByteEncodingType ;
  qudt:bytes 1 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "OCTET Encoding" .

qudt:OnState
  a qudt:OnOffStateType ;
  dtype:code "1" ;
  dtype:literal "on" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "On" .

qudt:OneMeansOff
  a qudt:OnOffStateType ;
  dtype:literal "off" ;
  qudt:inverted true ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "One means off" .

qudt:Open
  a qudt:OpenCloseStateType ;
  dtype:code "1" ;
  dtype:literal "open" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Open" .

qudt:OrderedCollectionKind-orderingRelation
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class dtype:ComparisonOperator ;
  sh:maxCount 1 ;
  sh:path qudt:orderingRelation .

qudt:PartiallyOrdered
  a qudt:OrderedType ;
  dtype:literal "partial" ;
  qudt:plainTextDescription "Partial ordered structure." ;
  rdfs:isDefinedBy <file:///Users/ralphtq/git-qudt/qudt-public-repo/qudt> ;
  rdfs:label "Partially Ordered" .

qudt:Quantifiable-dataEncoding
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:DataEncoding ;
  sh:maxCount 1 ;
  sh:path qudt:dataEncoding .

qudt:QuantityKindsPropertyShape
  a sh:PropertyShape ;
  rdfs:comment "Invalid quantity kinds list - TODO: SPARQL Query" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:node qudt:QuantityKindsListShape ;
  sh:path qudt:hasQuantityKindsList .

qudt:QuantityValueType-basis
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:QuantityType ;
  sh:path qudt:basis .

qudt:QuantityValueType-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:NumericType ;
  sh:path qudt:elementDatatype .

qudt:QuantityValueType-elementUnit
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Unit ;
  sh:maxCount 1 ;
  sh:path qudt:elementUnit .

qudt:RawValueTupleMember-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:UnsignedIntegerType ;
  sh:path qudt:elementDatatype .

qudt:RealDatatype-base
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:base .

qudt:RealDatatype-maxExponent
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:maxExponent .

qudt:RealDatatype-maxMantissa
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:maxMantissa .

qudt:RealDatatype-minMantissa
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:minMantissa .

qudt:RealDatatype-precision
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:precision .

qudt:ReferenceFrame-comment
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path vaem:comment .

qudt:ReferenceFrame-description
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path dcterms:description .

qudt:ReferenceFrame-frameType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:FrameType ;
  sh:path qudt:frameType .

qudt:ReferenceFrame-informativeReference
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:path qudt:informativeReference .

qudt:ReferenceFrame-realization
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:realization .

qudt:ReferenceFrame-xAxisDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:xAxisDefinition .

qudt:ReferenceFrame-xCoordinateDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:xCoordinateDefinition .

qudt:ReferenceFrame-yAxisDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:yAxisDefinition .

qudt:ReferenceFrame-yCoordinateDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:yCoordinateDefinition .

qudt:ReferenceFrame-zAxisDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:zAxisDefinition .

qudt:ReferenceFrame-zCoordinateDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:zCoordinateDefinition .

qudt:SIGNED
  a qudt:SignednessType ;
  dtype:literal "signed" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed" .

qudt:ScalarDatatype-bitOrder
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:EndianType ;
  sh:maxCount 1 ;
  sh:path qudt:bitOrder .

qudt:ScalarDatatype-bits
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:or qudt:IntegerUnionList ;
  sh:path qudt:bits .

qudt:ScalarDatatype-byteOrder
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:EndianType ;
  sh:maxCount 1 ;
  sh:path qudt:byteOrder .

qudt:ScalarDatatype-bytes
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:or qudt:IntegerUnionList ;
  sh:path qudt:bytes .

qudt:ScalarDatatype-encoding
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Encoding ;
  sh:maxCount 1 ;
  sh:path qudt:encoding .

qudt:ScalarDatatype-length
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:length .

qudt:ScalarDatatype-maxExclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:maxExclusive .

qudt:ScalarDatatype-maxInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:maxInclusive .

qudt:ScalarDatatype-minExclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:minExclusive .

qudt:ScalarDatatype-minInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:minInclusive .

qudt:ScalarDatatype-rdfsDatatype
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class rdfs:Literal ;
  sh:maxCount 1 ;
  sh:path qudt:rdfsDatatype .

qudt:ShortSignedIntegerEncoding
  a qudt:IntegerEncodingType ;
  qudt:bytes 2 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Short Signed Integer Encoding" .

qudt:ShortUnsignedIntegerEncoding
  a qudt:BooleanEncodingType, qudt:IntegerEncodingType ;
  qudt:bytes 2 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Short Unsigned Integer Encoding" .

qudt:SignedBigIntegerType-literal
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:path dtype:literal .

qudt:SignedBigIntegerType-maxInclusive
  a sh:PropertyShape ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:maxInclusive .

qudt:SignedBigIntegerType-minInclusive
  a sh:PropertyShape ;
  sh:or ( [
    sh:datatype xsd:string ;
  ] [
    sh:datatype xsd:integer ;
  ] [
    sh:datatype xsd:float ;
  ] [
    sh:datatype xsd:decimal ;
  ] ) ;
  sh:path qudt:minInclusive .

qudt:SignedIntegerEncoding
  a qudt:IntegerEncodingType ;
  qudt:bytes 4 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Signed Integer Encoding" .

qudt:SignedLongIntegerType-abbreviation
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:hasValue "SI32" ;
  sh:path qudt:abbreviation .

qudt:SignedLongIntegerType-maxInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:maxInclusive .

qudt:SignedLongIntegerType-minInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:or ( [
    sh:datatype xsd:string ;
  ] [
    sh:datatype xsd:integer ;
  ] [
    sh:datatype xsd:float ;
  ] [
    sh:datatype xsd:decimal ;
  ] ) ;
  sh:path qudt:minInclusive .

qudt:SignedShortIntegerType-abbreviation
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:path qudt:abbreviation .

qudt:SignedType-signedness
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:path qudt:signedness .

qudt:SinglePrecisionRealEncoding
  a qudt:FloatingPointEncodingType ;
  qudt:bytes 32 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Single Precision Real Encoding" .

qudt:StateSpaceVector-coordinateSystem
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CoordinateSystem ;
  sh:maxCount 1 ;
  sh:path qudt:coordinateSystem .

qudt:StringType-dimensionality
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:path qudt:dimensionality .

qudt:StringType-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CharacterType ;
  sh:path qudt:elementDatatype .

qudt:StringType-isByteString
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:isByteString .

qudt:StringType-maxLength
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:maxLength .

qudt:StringType-memberDatatype
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CharacterType ;
  sh:path qudt:memberDatatype .

qudt:StringType-typeMatrix
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 0 ;
  sh:minCount 0 ;
  sh:path qudt:typeMatrix .

qudt:StringUTF16-memberDatatype
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CharacterType ;
  sh:hasValue qudt:UTF16-CHAR ;
  sh:path qudt:memberDatatype .

qudt:StringUTF8-memberDatatype
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:CharacterType ;
  sh:hasValue qudt:UTF8-CHAR ;
  sh:path qudt:memberDatatype .

qudt:StructuredData-dimensionality
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:dimensionality .

qudt:StructuredDatatype-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:path qudt:elementDatatype .

qudt:SystemModifiableParameter
  a qudt:ParameterModifiabilityType ;
  dtype:code "1" ;
  dtype:literal "system" ;
  rdfs:comment "Parameter is modifiable by a (computer) system." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "System modifiable parameter" .

qudt:Table-byRow
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:byRow .

qudt:Table-columns
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:columns .

qudt:Table-dimensionality
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:dimensionality .

qudt:Table-rows
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:rows .

qudt:TaggedEnumeration-code
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path dtype:code .

qudt:TextTypeUnion
  a rdf:List ;
  dcterms:description """
  An rdf:List that can be used in property constraints as value for sh:or to indicate that all values of a property
   must be a plain string, a string with HTML markup, or a string with LaTeX markup.
  """ ;
  rdf:first [
    sh:datatype xsd:string ;
  ] ;
  rdf:rest ( [
    sh:datatype rdf:HTML ;
  ] [
    sh:datatype qudt:LatexString ;
  ] ) ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Text Type Union" .

qudt:Three-Tuple-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:TupleMemberType ;
  sh:minCount 0 ;
  sh:path qudt:elementDatatype .

qudt:Three-Tuple-elementTypeCount
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:hasValue 3 ;
  sh:path qudt:elementTypeCount .

qudt:Time-type
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:TimeStringType ;
  sh:path qudt:type .

qudt:TimeInterval-type
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:TimeStringType ;
  sh:path qudt:type .

qudt:TimeSeriesArray-dimensions
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:int ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:dimensions .

qudt:TimeSeriesArray-incrementDatatype
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:TimeStringType ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:incrementDatatype .

qudt:TimeSeriesArray-vector
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:Vector ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:vector .

qudt:TotallyOrdered
  a qudt:OrderedType ;
  dtype:literal "total" ;
  qudt:plainTextDescription "Totally ordered structure." ;
  rdfs:isDefinedBy <file:///Users/ralphtq/git-qudt/qudt-public-repo/qudt> ;
  rdfs:label "Totally Ordered" .

qudt:True
  a qudt:BooleanStateType ;
  dtype:code "1" ;
  dtype:literal "true" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "true" .

qudt:Tuple-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:TupleMemberType ;
  sh:path qudt:elementDatatype .

qudt:Tuple-elementTypeCount
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:minCount 0 ;
  sh:path qudt:elementTypeCount .

qudt:Tuple-length
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:length .

qudt:TupleMember-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:ScalarDatatype ;
  sh:path qudt:elementDatatype .

qudt:TupleMember-orderInStructure
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:orderInStructure .

qudt:Two-Tuple-elementType
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:minCount 0 ;
  sh:path qudt:elementDatatype .

qudt:Two-Tuple-elementTypeCount
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:hasValue 2 ;
  sh:path qudt:elementTypeCount .

qudt:UNARY-FUNCTION
  a qudt:FunctionDatatype ;
  dcterms:description "This type identifies functions that have exactly one argument."^^rdf:HTML ;
  qudt:functionArity 1 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "UNARY-FUNCTION" .

qudt:UNSIGNED
  a qudt:SignednessType ;
  dtype:literal "unsigned" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned" .

qudt:Unordered
  a qudt:OrderedType ;
  dtype:literal "unordered" ;
  qudt:plainTextDescription "Unordered structure." ;
  rdfs:isDefinedBy <file:///Users/ralphtq/git-qudt/qudt-public-repo/qudt> ;
  rdfs:label "Unordered" .

qudt:UnsignedBigIntegerType-abbreviation
  a sh:PropertyShape ;
  rdfs:isDefinedBy <file:///Users/ralphtq/git-qudt/qudt-public-repo/qudt> ;
  sh:hasValue "UI64" ;
  sh:path qudt:abbreviation .

qudt:UnsignedBigIntegerType-maxInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:hasValue "2^{64}-1" ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:maxInclusive .

qudt:UnsignedBigIntegerType-minInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:hasValue "0" ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:minInclusive .

qudt:UnsignedIntegerEncoding
  a qudt:IntegerEncodingType ;
  qudt:bytes 4 ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Unsigned Integer Encoding" .

qudt:UnsignedLongIntegerType-literal
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:string ;
  sh:path dtype:literal .

qudt:UnsignedLongIntegerType-maxInclusive
  a sh:PropertyShape ;
  sh:hasValue "2^{32}-1" ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:maxInclusive .

qudt:UnsignedLongIntegerType-minInclusive
  a sh:PropertyShape ;
  sh:hasValue "0" ;
  sh:or qudt:NumericTypeUnion ;
  sh:path qudt:minInclusive .

qudt:UnsignedShortIntegerType-abbreviation
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:hasValue "UI16" ;
  sh:path qudt:abbreviation .

qudt:UnsignedShortIntegerType-maxInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:hasValue "2^{16}-1" ;
  sh:path qudt:maxInclusive .

qudt:UnsignedShortIntegerType-minInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:hasValue "0" ;
  sh:path qudt:minInclusive .

qudt:UnsignedType-signedness
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:SignednessType ;
  sh:hasValue qudt:UNSIGNED ;
  sh:path qudt:signedness .

qudt:UserModifiableParameter
  a qudt:ParameterModifiabilityType ;
  dtype:code "2" ;
  dtype:literal "user" ;
  rdfs:comment "Parameter is modifiable by a user." ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "User modifiable parameter" .

qudt:ValidateQuantityHasUnitShape
  a sh:NodeShape ;
  dcterms:description """
  <p>Specifies and checks an optional property for a quantified value.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/qudt> ;
  rdfs:label "Validate Quantity has Unit Shape" ;
  sh:property qudt:MaybeQuantityPropertyShape ;
  sh:property qudt:MaybeUnitPropertyShape ;
  sh:severity sh:Warning ;
  sh:sparql [
    sh:message "Quantity \"{$this}\" must have a unit." ;
    sh:prefixes <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
    sh:select """
        SELECT $this
        WHERE {
             $this qudt:quantity ?quantity .
             FILTER NOT EXISTS {?quantity qudt:hasUnit ?unit} 
             }
        """ ;
  ] ;
  sh:targetClass qudt:Array ;
  sh:targetClass qudt:List ;
  sh:targetClass qudt:Quantity ;
  sh:targetClass qudt:Vector .

qudt:VariableLengthIntegerType-maxBits
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:hasValue 64 ;
  sh:path qudt:maxBits .

qudt:VariableLengthIntegerType-minBits
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:datatype xsd:integer ;
  sh:hasValue 1 ;
  sh:path qudt:minBits .

qudt:VehicleCoordinateSystem-pitchRotationDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:AxialOrientationType ;
  sh:maxCount 1 ;
  sh:path qudt:pitchRotationDefinition .

qudt:VehicleCoordinateSystem-rollRotationDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:AxialOrientationType ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:rollRotationDefinition .

qudt:VehicleCoordinateSystem-yawRotationDefinition
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:AxialOrientationType ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:yawRotationDefinition .

qudt:VisualCueEnumeration-defaultValue
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  sh:class qudt:VisualCue ;
  sh:path qudt:defaultValue .

qudt:WDST_DRY
  a qudt:WetDryStateType ;
  dtype:code "2" ;
  dtype:literal "dry" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Dry" .

qudt:WDST_WET
  a qudt:WetDryStateType ;
  dtype:code "1" ;
  dtype:literal "wet" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Wet" .

qudt:WordAligned
  a qudt:AlignmentType ;
  dtype:literal "word" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Word Aligned" .

qudt:XSDatomicTypeUnion
  a rdf:List ;
  dcterms:description """
  <p>In XML Schema Definition (XSD) xsd:anySimpleType is the base type for all simple types.
  Simple types in XSD represent atomic values without any child elements or complex structures.
  All simple types are compliant with xsd:anySimpleType.
  </p>
  <p>In XSD, the atomic types are: xsd:string, xsd:boolean, xsd:decimal, xsd:float,
   xsd:double, xsd:duration, xsd:dateTime, xsd:time, xsd:date, xsd:gYearMonth, xsd:gYear, xsd:gMonthDay,
   xsd:gDay, xsd:gMonth, xsd:hexBinary, xsd:base64Binary, xsd:anyURI, xsd:QName, and xsd:NOTATION.
  </p>"""^^rdf:HTML ;
  rdf:first [
    sh:datatype xsd:anySimpleType ;
  ] ;
  rdf:rest ( [
    sh:datatype xsd:anySimpleType ;
  ] ) ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "XSD Atomic Type Union" .

qudt:Yes
  a qudt:YesNoType ;
  dtype:literal "Y" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "Yes" .

qudt:hexbinary
  a rdfs:Datatype, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "hexbinary" ;
  rdfs:subClassOf xsd:string ;
  sh:datatype xsd:string ;
  sh:pattern "[0-9A-F]*" .

qudt:negative
  a qudt:Polarity ;
  dtype:code "1" ;
  dtype:literal "negative" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "negative" .

qudt:positive
  a qudt:Polarity ;
  dtype:code "2" ;
  dtype:literal "positive" ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> ;
  rdfs:label "positive" .

xsd:dateTime
  dcterms:description """
  <p>YYYY-MM-DDThh:mm:ss[.dd] or YYYY-DDDThh:mm:ss[.dd], where 'YYYY' is the year, 'MM' is the two-digit month, 'DD' is the two-digit day, 'DDD' is the three digit day of year, 'T' is constant, 'hh:mm:ss[.dd]' is the UTC time in hours, minutes, seconds, and optional fractional seconds. 
  As many 'd' characters to the right of the period as required may be used to obtain the required precision. 
  All fields require leading zeros.
  </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/$$QUDT_VERSION$$/schema/shacl/datatype> .


