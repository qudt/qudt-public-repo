@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .

<http://qudt.org/2.1/schema/datatype>
  a owl:Ontology ;
  owl:imports <http://qudt.org/2.1/schema/facade/qudt> ;
  owl:imports <http://www.linkedmodel.org/schema/dtype> ;
  owl:imports <http://www.linkedmodel.org/schema/vaem> ;
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
  owl:imports sh: ;
  rdfs:label "QUDT SCHEMA - Datatypes" ;
  vaem:hasCatalogEntry voag:QUDT-SchemaCatalogEntry ;
  vaem:hasGraphMetadata <http://qudt.org/schema/datatype/GMD_datatype> ;
  vaem:hasGraphRole vaem:SchemaGraph ;
  vaem:intent "This ontology is to be used by other ontologies that need to reference type definitions." ;
  vaem:specificity 1 ;
  vaem:url "http://qudt.org/2.0/schema/dtype"^^xsd:anyURI .

qudt:AbstractDatatype
  a owl:Class ;
  dcterms:description "<p class=\"lm-para\">An \"Abstract Datatype\" (ADT) is a specification of a set of data and the set of operations that can be performed on the data. Such a data type is abstract in the sense that it is independent of various concrete implementations. The definition can be mathematical, or it can be programmed as an interface. A first class ADT supports the creation of multiple instances of the ADT, and the interface normally provides a constructor, which returns an abstract handle to new data, and several operations, which are functions accepting the abstract handle as an argument.</p>"^^rdf:HTML ;
  dcterms:description "An \"Abstract Datatype\" (ADT) is a specification of a set of data and the set of operations that can be performed on the data. Such a data type is abstract in the sense that it is independent of various concrete implementations. The definition can be mathematical, or it can be programmed as an interface. A first class ADT supports the creation of multiple instances of the ADT, and the interface normally provides a constructor, which returns an abstract handle to new data, and several operations, which are functions accepting the abstract handle as an argument." ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Abstract_data_type> ;
  prov:wasInfluencedBy <http://xlinux.nist.gov/dads/HTML/abstractDataType.html> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Abstract Datatype" ;
  rdfs:subClassOf qudt:StructuredDatatype .

qudt:AerospaceCoordinateSystem
  a owl:Class ;
  dcterms:description "A sub-type of 'Coordinate system'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Aerospace coordinate system" ;
  rdfs:subClassOf qudt:CoordinateSystem .

qudt:AlgebraicDatatype
  a owl:Class ;
  dcterms:description """<p class="lm-para">An "Algebraic Datatype" is a datatype each of whose values are data from other data types wrapped in one of the constructors of the data type. Any wrapped datum is an argument to the constructor. In contrast to other data types, the constructor is not executed and the only way to operate on the data is to unwrap the constructor using pattern matching.</p>
<p class="lm-para">The most common algebraic data type is a list with two constructors: Nil or [] for an empty list, and Cons (an abbreviation of constructor), ::, or : for the combination of a new element with a shorter list (for example (Cons 1 '(2 3 4)) or 1:[2,3,4]).</p>
<p class="lm-para">Special cases of algebraic types are product types i.e. records (only one constructor) and enumerated types (many constructors with no arguments). Algebraic types are one kind of composite type (i.e. a type formed by combining other types).</p>
<p class="lm-para">An algebraic data type may also be an abstract data type (ADT) if it is exported from a module without its constructors. Values of such a type can only be manipulated using functions defined in the same module as the type itself.</p>"""^^rdf:HTML ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Algebraic_data_type> ;
  rdfs:comment """<p>An "Algebraic Datatype" is a datatype each of whose values are data from other data types wrapped in one of the constructors of the data type. Any wrapped datum is an argument to the constructor. In contrast to other data types, the constructor is not executed and the only way to operate on the data is to unwrap the constructor using pattern matching.</p>

<p>The most common algebraic data type is a list with two constructors: Nil or [] for an empty list, and Cons (an abbreviation of constructor), ::, or : for the combination of a new element with a shorter list (for example (Cons 1 '(2 3 4)) or 1:[2,3,4]).</p>

<p>Special cases of algebraic types are product types i.e. records (only one constructor) and enumerated types (many constructors with no arguments). Algebraic types are one kind of composite type (i.e. a type formed by combining other types).</p>

<p>An algebraic data type may also be an abstract data type (ADT) if it is exported from a module without its constructors. Values of such a type can only be manipulated using functions defined in the same module as the type itself.</p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Algebraic Datatype" ;
  rdfs:seeAlso qudt:AbstractDatatype ;
  rdfs:subClassOf qudt:StructuredDatatype .

qudt:AlignmentType
  a owl:Class ;
  dcterms:description "Specifies how a physical data field is aligned. The alignment could be at a bit, byte or word boundary." ;
  owl:oneOf ( qudt.type:BitAligned qudt.type:ByteAligned qudt.type:WordAligned ) ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Alignment type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:Array
  a owl:Class ;
  dcterms:description "An array is represented as ordered entries of values arranged according to the dimensions given. The dimensions are given as a list of integers where each integer is the cardinality of each dimension. The number of dimensions is specified in the attribute 'dimensionality'. Optionally a reference can be made to a variable, whose values are the array entries. The data type of the array entries is an optional field, 'elementType', which points to a data type definition. If the data type is given, then it applies to all elements.  If it is not given then the elements can be of different types for each position in the array. The property 'type:typeMatrix' must refer to a matrix of types.  If a default value is given this can be used to place the appropriate value in a cell when an entry value is not known. If no dimensionality or dimension vector is specified the array is under-specified but still legitimate as a place-holder for a data type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Array Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:ArrayDataOrderType ;
    owl:onProperty qudt:dataOrder ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom <http://qudt.org/schema/type#TypeMatrix> ;
    owl:onProperty qudt:typeMatrix ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:byRow ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:dataOrder ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:dimensions ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:dimensionality ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:typeMatrix ;
  ] .

qudt:ArrayDataOrderType
  a owl:Class ;
  dcterms:description "A sub-type of 'Enumerated Value'. Detailed description to be provided in a future version." ;
  owl:oneOf ( qudt:ByColumn qudt:ByRow qudt:ByLeftMostIndex ) ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Array data order type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:ArrayIndex
  a owl:Class ;
  dcterms:description "An Array Index Type is a data type that specifies the properties of data structures that hold array indexes." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Array Index Type" ;
  rdfs:subClassOf qudt:Vector ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt.type:UNSIGNED-INTEGER ;
    owl:onProperty qudt:elementType ;
  ] .

qudt:ArrayIndexType
  a owl:Class, sh:NodeShape ;
  dcterms:description "An Array Index Type is a data type that specifies the properties of data structures that hold array indexes." ;
  rdfs:label "Array Index Type" ;
  rdfs:subClassOf qudt:VectorType ;
  sh:property qudt:ArrayIndex-elementType .

qudt:ArrayType
  a owl:Class, sh:NodeShape ;
  rdfs:comment """<p>An <em>array type</em> is a type specification for ordered entries of values arranged according to the dimensions given. The dimensions are given as a list of integers where each integer is the cardinality of each dimension. The number of dimensions is specified in the attribute 'dimensionality'.</p>

<p>Optionally a reference can be made to a variable, whose values are the array entries. The data type of the array entries is an optional field, 'elementType', which points to a data type definition. If the data type is given, then it applies to all elements.  If it is not given then the elements can be of different types for each position in the array.</p>

<p>The property <em>qudt:typeMatrix</em> must refer to a matrix of types.  If a default value is given this can be used to place the appropriate value in a cell when an entry value is not known. If no dimensionality or dimension vector is specified the array is under-specified but still legitimate as a place-holder for a data type.</p>"""^^rdf:HTML ;
  rdfs:label "Array Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:ArrayType-byRow ;
  sh:property qudt:ArrayType-dataOrder ;
  sh:property qudt:ArrayType-dimensionality ;
  sh:property qudt:ArrayType-dimensions ;
  sh:property qudt:ArrayType-typeMatrix .

qudt:AssociativeArray
  a owl:Class ;
  dcterms:description "An Associative Array (or Map) is an abstract data type composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding." ;
  owl:equivalentClass qudt:Map ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Associative Array" ;
  rdfs:subClassOf qudt:Collection .

qudt:AssociativeArrayType
  a owl:Class ;
  dcterms:description "An Associative Array (or Map) is an abstract data type composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding." ;
  owl:equivalentClass qudt:MapType ;
  rdfs:label "Associative Array Type" ;
  rdfs:subClassOf qudt:CollectionType .

qudt:AuralCue
  a owl:Class, sh:NodeShape ;
  rdfs:comment "An aural cue is a sound produced by a device or a system that is used to alert personnel of of an advisory, cautionary, warning, or emergency state." ;
  rdfs:label "Aural Cue" ;
  rdfs:subClassOf qudt:ModalCue ;
  sh:property qudt:AuralCue-sound .

qudt:AxialOrientationType
  a owl:Class ;
  dcterms:description "The axial orientation of a coordinate system frame axis." ;
  owl:oneOf ( qudt.type:PositiveZ qudt.type:PositiveY qudt.type:NegativeY qudt.type:NegativeZ
    qudt.type:PositiveX qudt.type:NegativeX ) ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Axial Orientation Type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:BalancedTree
  a owl:Class ;
  dcterms:description "A Balanced Tree Type is a data type that defines the properties of data structures that represent balanced trees. A balanced tree is a tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of \"much farther\" and different amounts of work to keep them balanced." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Balanced Tree Type" ;
  rdfs:subClassOf qudt:Tree ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:maxDepth ;
  ] .

qudt:BalancedTreeType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Balanced Tree Type is a data type that defines the properties of data structures that represent balanced trees. A balanced tree is a tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of \"much farther\" and different amounts of work to keep them balanced." ;
  rdfs:label "Balanced Tree Type" ;
  rdfs:subClassOf qudt:TreeType ;
  sh:property qudt:BalancedTree-maxDepth .

qudt:BigIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Big Integer is an integer that can be represented in eight octets (64 bits) of machine memory. Big integers may be signed or unsigned." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Big Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 64 ;
    owl:onProperty qudt:bits ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 8 ;
    owl:onProperty qudt:octets ;
  ] ;
  sh:property qudt:BigIntegerType-octets .

qudt:BinaryTree
  a owl:Class ;
  dcterms:description "A Binary Tree Type is a data type that defines the properties of data structures that represent binary trees. A binary tree is a tree in which each node has at most 2 children. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Binary Tree Type" ;
  rdfs:subClassOf qudt:Tree .

qudt:BinaryTreeType
  a owl:Class ;
  dcterms:description "A Binary Tree Type is a data type that defines the properties of data structures that represent binary trees. A binary tree is a tree in which each node has at most 2 children. " ;
  rdfs:label "Binary Tree Type" ;
  rdfs:subClassOf qudt:TreeType .

qudt:BitEncodingType
  a owl:Class ;
  dcterms:description "A bit encoding is a correspondence between the two possible values of a bit, 0 or 1, and some interpretation. For example, in a boolean encoding, a bit denotes a truth value, where 0 corresponds to False and 1 corresponds to True." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Bit Encoding" ;
  rdfs:subClassOf qudt:Encoding .

qudt:BitFieldType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A bit field is a common idiom used in computer programming to store a set of Boolean datatype flags compactly, as a series of bits. The bit field is stored in an integral type of known, fixed bit-width. Each Boolean flag is stored in a separate bit. Usually the source code will define a set of constants, each a power of two, that semantically associate each individual bit with its respective Boolean flag. The bitwise operators and, or, and not are used in combination to set, reset and test the flags." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Bit Field Type" ;
  rdfs:subClassOf qudt:ScalarDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:BitField ;
    owl:onProperty qudt:encodedValue ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:encodedValue ;
  ] ;
  sh:property qudt:BitFieldType-encodedValue .

qudt:BooleanEncodingType
  a owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Boolean encoding type" ;
  rdfs:subClassOf qudt:Encoding .

qudt:BooleanType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A boolean data type can take on only two values." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Boolean Type" ;
  rdfs:subClassOf qudt:OrdinalType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:BooleanEncodingType ;
    owl:onProperty qudt:encoding ;
  ] ;
  sh:property qudt:BooleanType-encoding .

qudt:BooleanTypeEnumeratedValue
  a owl:Class ;
  dcterms:description "Specifies how a boolean value is expressed" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "boolean value" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:ByteEncodingType
  a owl:Class ;
  dcterms:description "This class contains the various ways that information may be encoded into bytes." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Byte Encoding" ;
  rdfs:subClassOf qudt:Encoding .

qudt:CardinalityType
  a owl:Class ;
  dcterms:description "<p class=\"lm-para\">In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set $A = {2, 4, 6}$ contains 3 elements, and therefore $A$ has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers.</p>"^^rdf:HTML ;
  owl:oneOf ( qudt:CT_COUNTABLY-INFINITE qudt:CT_FINITE ) ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Cardinal_number> ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Cardinality> ;
  rdfs:label "Cardinality Type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:CartesianCoordinates
  a owl:Class ;
  dcterms:description "A set of  variables which fix a geometric object. If the coordinates are distances measured along perpendicular axes, they are known as Cartesian coordinates." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Cartesian Coordinate Type" ;
  rdfs:subClassOf qudt:Coordinates .

qudt:CartesianCoordinatesType
  a owl:Class ;
  dcterms:description "A set of  variables which fix a geometric object. If the coordinates are distances measured along perpendicular axes, they are known as Cartesian coordinates." ;
  rdfs:label "Cartesian Coordinate Type" ;
  rdfs:subClassOf qudt:CompositeDatatype .

qudt:CharEncodingType
  a owl:Class ;
  dcterms:description "The class of all character encoding schemes, each of which defines a rule or algorithm for encoding character data as a sequence of bits or bytes." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Char Encoding Type" ;
  rdfs:subClassOf qudt:Encoding .

qudt:CharacterType
  a owl:Class ;
  dcterms:description "A Character Type is a data type that defines the type and encoding of single characters." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Character Type" ;
  rdfs:subClassOf qudt:OrdinalType .

qudt:Collection
  a owl:Class ;
  dcterms:description "A collection is a grouping of some variable number of zero or more data items that need to be operated upon together in some controlled fashion. Generally, the data items will all share the same data type or are derived from some common ancestor data type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Collection Type" ;
  rdfs:subClassOf qudt:AbstractDatatype .

qudt:CollectionType
  a owl:Class ;
  dcterms:description "A collection is a grouping of some variable number of zero or more data items that need to be operated upon together in some controlled fashion. Generally, the data items will all share the same data type or are derived from some common ancestor data type." ;
  rdfs:label "Collection Type" ;
  rdfs:subClassOf qudt:AbstractDatatype .

qudt:ColorCue
  a owl:Class, sh:NodeShape ;
  rdfs:comment "A visual cue that uses color to distinguish it from other cues. Each color cue has exactly one corresponding coordinate point in the RGB space." ;
  rdfs:label "Color Cue" ;
  rdfs:subClassOf qudt:VisualCue ;
  sh:property qudt:ColorCue-rgbCode .

qudt:CompositeDataStructure
  a owl:Class, sh:NodeShape ;
  prov:wasInfluencedBy <https://en.wikipedia.org/wiki/List_of_data_structures> ;
  prov:wasInfluencedBy <https://en.wikipedia.org/wiki/Record_(computer_science)> ;
  rdfs:comment "'Composite Data Structure', also referred to as 'Data Record' is a datatype that aggregates element of possibly different types. The aggregated items are called fields or members and are usually identified or indexed by field labels."^^rdf:HTML ;
  rdfs:label "Composite Data Structure" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:CompositeDataStructure-dataElement .

qudt:CompositeDatatype
  a owl:Class, sh:NodeShape ;
  dcterms:description "Composite types are datatypes which can be constructed in a programming language out of that language's basic primitive types and other composite types. The act of constructing a composite type is known as composition." ;
  prov:wasInfluencedBy <https://en.wikipedia.org/wiki/List_of_data_structures> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Composite Data Type" ;
  rdfs:subClassOf qudt:StructuredDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:AlignmentType ;
    owl:onProperty qudt:alignment ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:PaddingType ;
    owl:onProperty qudt:padding ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:TypeList ;
    owl:onProperty qudt:elementTypeList ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:padding ;
  ] ;
  sh:property qudt:CompositeDatatype-alignment ;
  sh:property qudt:CompositeDatatype-elementType ;
  sh:property qudt:CompositeDatatype-padding .

qudt:CompositeTable
  a owl:Class ;
  dcterms:description "A sub-type of 'Table Type'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Composite Table Type" ;
  rdfs:subClassOf qudt:Table .

qudt:CompositionFunction
  a owl:Class, sh:NodeShape ;
  rdfs:label "Composition function" ;
  rdfs:subClassOf qudt:Function .

qudt:CompositionTreeType
  a owl:Class, sh:NodeShape ;
  rdfs:subClassOf qudt:TreeType ;
  sh:property qudt:CompositionTreeType-compositionFunction .

qudt:Concept
  a owl:Class, sh:NodeShape ;
  rdfs:label "QUDT Concept" ;
  rdfs:subClassOf owl:Thing .

qudt:Container
  a owl:Class, sh:NodeShape ;
  dcterms:description "A container is a class, a data structure, or an abstract data type (ADT) whose instances are collections of other objects. They are used to store objects in an organized way following specific access rules." ;
  owl:equivalentClass qudt:Collection ;
  owl:equivalentClass qudt:CollectionType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Container" ;
  rdfs:subClassOf qudt:AbstractDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 1 ;
    owl:onProperty qudt:elementTypeCount ;
  ] ;
  sh:property qudt:Container-elementTypeCount .

qudt:CoordinateCenterType
  a owl:Class ;
  dcterms:description "An enumeration of coordinate centers for coordinate systems, such as \"Earth centered\", \"Mars centered\", \"Moon centered\", \"Sun centered\",  and \"Vehicle centered\"." ;
  owl:oneOf ( qudt.type:CC_MarsCentered qudt.type:CC_EarthCentered qudt.type:CC_MoonCentered
    qudt.type:CC_VehicleCentered qudt.type:CC_SunCentered ) ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Coordinate Center Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  rdfs:subClassOf qudt:NominalScale ;
  skos:prefLabel "Coordinate center" ;
  skos:prefLabel "Coordinate center type" .

qudt:CoordinateMember
  a owl:Class ;
  dcterms:description "A Coordinate Member Type is a data type that defines the properties of a coordinate in a coordinate system." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Coordinate Member Type" ;
  rdfs:subClassOf qudt:TupleMember ;
  rdfs:subClassOf qudt:TupleMemberType .

qudt:CoordinateSystem
  a owl:Class, sh:NodeShape ;
  dcterms:description """In geometry, a coordinate system is a system which uses one or more numbers, or coordinates, to uniquely determine the position of a point or other geometric element on a manifold such as Euclidean space. The order of the coordinates is significant and they are sometimes identified by their position in an ordered tuple and sometimes by a letter, as in 'the x-coordinate'. 



In elementary mathematics the coordinates are taken to be real numbers, but may be complex numbers or elements of a more abstract system such as a commutative ring. The use of a coordinate system allows problems in geometry to be translated into problems about numbers and vice versa; this is the basis of analytic geometry. 



In astronomy, a celestial coordinate system is a system for specifying positions of celestial objects: satellites, planets, stars, galaxies, and so on. Coordinate systems can specify a position in 3-dimensional space, or merely the direction of the object on the celestial sphere, if its distance is not known or not important.



The coordinate systems are implemented in either spherical coordinates or rectangular coordinates. Spherical coordinates, projected on the celestial sphere, are analogous to the geographic coordinate system used on the surface of the Earth. These differ in their choice of fundamental plane, which divides the celestial sphere into two equal hemispheres along a great circle. Rectangular coordinates, in appropriate units, are simply the cartesian equivalent of the spherical coordinates, with the same fundamental (x,y) plane and primary (x-axis) direction. Each coordinate system is named for its choice of fundamental plane.""" ;
  qudt:dbpediaMatch <http://dbpedia.org/resource/Coordinate_system> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Coordinate system" ;
  rdfs:seeAlso <http://en.wikipedia.org/wiki/Astronomical_coordinate_systems> ;
  rdfs:seeAlso <http://en.wikipedia.org/wiki/Coordinate_system> ;
  rdfs:seeAlso <http://mathworld.wolfram.com/CoordinateSystem.html> ;
  rdfs:seeAlso <http://mathworld.wolfram.com/Coordinates.html> ;
  rdfs:subClassOf qudt:Concept ;
  rdfs:subClassOf skos:Concept ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:ReferenceFrame ;
    owl:onProperty qudt:referenceFrame ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:abbreviation ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:coordinateCenter ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:referenceFrame ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty vaem:acronym ;
  ] ;
  sh:property qudt:CoordinateSystem-abbreviation ;
  sh:property qudt:CoordinateSystem-acronym ;
  sh:property qudt:CoordinateSystem-coordinateCenter ;
  sh:property qudt:CoordinateSystem-referenceFrame .

qudt:CoordinateSystemFrame
  a owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Coordinate system frame" ;
  rdfs:subClassOf skos:Concept .

qudt:CoordinateSystemType
  a owl:Class, sh:NodeShape ;
  dcterms:description "The primary attributes of any coordinate system are the coordinate frame or orientation of the axes of the coordinate system and the coordinate center or origin of the coordinate system. The coordinate center is the easier of the two attributes to define and in trajectory-related coordinate systems is often taken to be the center of mass of natural solar system bodies such as the Earth, the Moon, or Mars. Precise definition of the coordinate frame, however, usually takes much more effort. As a result, the primary purpose of this section is to provide a detailed description of a number of different coordinate frames commonly used in lunar and Mars mission analysis. All of the coordinate frames described in this section are standard, right-handed coordinate frames with orthogonal axes at the origin. In general, the coordinate frame and the coordinate center are independent quantities. In other words, multiple coordinate systems can be defined using the same coordinate center (with different frames) or the same coordinate frame (with different centers). " ;
  rdfs:comment """<p>A coordinate system is a mathematical structure for assigning a unique n-tuple of numbers or scalars to each point in an n-dimensional space. A Coordinate System Type is a data type that defines the properties of data structures that represent coordinate systems.</p>

<p>The primary attributes of any coordinate system are the coordinate frame or orientation of the axes of the coordinate system and the coordinate center or origin of the coordinate system. The coordinate center is the easier of the two attributes to define and in trajectory-related coordinate systems is often taken to be the center of mass of natural solar system bodies such as the Earth, the Moon, or Mars. Precise definition of the coordinate frame, however, usually takes much more effort. As a result, the primary purpose of this section is to provide a detailed description of a number of different coordinate frames commonly used in lunar and Mars mission analysis. </p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Coordinate System Type" ;
  rdfs:label "Coordinate system type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  rdfs:subClassOf qudt:TupleType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:originDefinition ;
  ] ;
  sh:property qudt:CoordinateSystemType-originDefinition ;
  sh:property qudt:Coordinates-elementType .

qudt:Coordinates
  a owl:Class ;
  dcterms:description "A coordinate system is a mathematical structure for assigning a unique n-tuple of numbers or scalars to each point in an n-dimensional space. A Coordinate System Type is a data type that defines the properties of data structures that represent coordinate systems." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Coordinate System Type" ;
  rdfs:subClassOf qudt:Tuple ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:CoordinateMember ;
    owl:onProperty qudt:elementType ;
  ] .

qudt:Coordinates-2D
  a owl:Class ;
  dcterms:description "A 2D coordinate system is a system for assigning a two-tuple of numbers or scalars to each point in an 2-dimensional space. A 2D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 2D coordinate system." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "2D Coordinate Type" ;
  rdfs:subClassOf qudt:CartesianCoordinates ;
  rdfs:subClassOf qudt:Two-Tuple .

qudt:Coordinates-2D-DoublePrecision
  a owl:Class, qudt:Coordinates-2D-Type ;
  dcterms:description "2D coordinates in double floating point precision for locating a point in physical space" ;
  qudt:elementTypeCount 2 ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Coordinates-2D-Double precision" ;
  rdfs:subClassOf qudt:Coordinates-2D ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:double ;
    owl:onProperty <http://qudt.org/schema/type#Double_X> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:double ;
    owl:onProperty <http://qudt.org/schema/type#Double_Y> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#Double_X> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#Double_Y> ;
  ] .

qudt:Coordinates-2D-SinglePrecision
  a owl:Class, qudt:Coordinates-2D-Type ;
  dcterms:description "2D coordinates in single floating point precision for locating a point in physical space" ;
  qudt:elementTypeCount 2 ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Cartesian Coordinates 2D Single Precision" ;
  rdfs:subClassOf qudt:Coordinates-2D ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:float ;
    owl:onProperty qudt:float_X ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:float ;
    owl:onProperty qudt:float_Y ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:float_X ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:float_Y ;
  ] .

qudt:Coordinates-2D-Type
  a owl:Class ;
  dcterms:description "A 2D coordinate system is a system for assigning a two-tuple of numbers or scalars to each point in an 2-dimensional space. A 2D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 2D coordinate system." ;
  rdfs:label "2D Coordinate Type" ;
  rdfs:subClassOf qudt:CartesianCoordinatesType ;
  rdfs:subClassOf qudt:TwoTupleType .

qudt:Coordinates-3D
  a owl:Class ;
  dcterms:description "A 3D coordinate system is a system for assigning a three-tuple of numbers or scalars to each point in an 3-dimensional space. A 3D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 3D coordinate system." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "3D Coordinate Type" ;
  rdfs:subClassOf qudt:CartesianCoordinates ;
  rdfs:subClassOf qudt:Three-Tuple .

qudt:Coordinates-3D-DoublePrecision
  a owl:Class ;
  dcterms:description "3D coordinates in double floating point precision for locating a point in physical space" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "3D Coordinates (Double Precision)" ;
  rdfs:subClassOf qudt:Coordinates-3D ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:double ;
    owl:onProperty <http://qudt.org/schema/type#Double_X> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:double ;
    owl:onProperty <http://qudt.org/schema/type#Double_Y> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:double ;
    owl:onProperty <http://qudt.org/schema/type#Double_Z> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#Double_X> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#Double_Y> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#Double_Z> ;
  ] .

qudt:Coordinates-3D-SinglePrecision
  a owl:Class ;
  dcterms:description "3D coordinates in single floating point precision for locating a point in physical space" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "3D Coordinates (Single Precision)" ;
  rdfs:subClassOf qudt:Coordinates-3D ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:float ;
    owl:onProperty qudt:float_X ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:float ;
    owl:onProperty qudt:float_Y ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom xsd:float ;
    owl:onProperty qudt:float_Z ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:float_X ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:float_Y ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:float_Z ;
  ] .

qudt:Coordinates-3D-Type
  a owl:Class ;
  dcterms:description "A 3D coordinate system is a system for assigning a three-tuple of numbers or scalars to each point in an 3-dimensional space. A 3D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 3D coordinate system." ;
  rdfs:label "3D Coordinate Type" ;
  rdfs:subClassOf qudt:CartesianCoordinatesType ;
  rdfs:subClassOf qudt:ThreeTupleType .

qudt:DataSetElement
  a owl:Class, sh:NodeShape ;
  rdfs:comment "A field is a tuple that carries a name, a type and optionally other properties that characterize a member element of a composite data strucuture." ;
  rdfs:label "QUDT DataSet Element" ;
  rdfs:subClassOf qudt:DataElement ;
  rdfs:subClassOf qudt:Tuple ;
  sh:property qudt:DataSetElement-elementLabel ;
  sh:property qudt:DataSetElement-optional ;
  sh:property qudt:DataSetElement-quantityKind .

qudt:DateStringType
  a owl:Class ;
  dcterms:description "Date String Types are scalar data types that define the properties of strings that represent calendar dates." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Date String Type" ;
  rdfs:subClassOf qudt:DateTimeStringType .

qudt:DateTimeStringEncodingType
  a owl:Class, sh:NodeShape ;
  dcterms:description "Date Time encodings are logical encodings for expressing date/time quantities as strings by applying unambiguous formatting and parsing rules." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Date Time String Encoding Type" ;
  rdfs:subClassOf qudt:StringEncodingType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:minQualifiedCardinality 1 ;
    owl:onDataRange xsd:string ;
    owl:onProperty qudt:allowedPattern ;
  ] ;
  sh:property qudt:DateTimeStringEncodingType-allowedPattern ;
  sh:property [
    sh:path qudt:allowedPattern ;
    sh:qualifiedMinCount 1 ;
    sh:qualifiedValueShape [
      sh:datatype xsd:string ;
    ] ;
  ] .

qudt:DateTimeStringType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A class of data types for structures that represent temporal quantities. I.e. calendar dates, times, duration of time since a given epoch, etc." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Temporal Type" ;
  rdfs:subClassOf qudt:StringType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:DateTimeStringEncodingType ;
    owl:onProperty qudt:encoding ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:encoding ;
  ] ;
  sh:property qudt:DateTimeStringType-encoding .

qudt:Dictionary
  a owl:Class ;
  dcterms:description "A \"Map\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Dictionary Type" ;
  rdfs:subClassOf qudt:Map .

qudt:DictionaryType
  a owl:Class ;
  dcterms:description "A kind of \"Map\"." ;
  rdfs:label "Dictionary Type" ;
  rdfs:subClassOf qudt:MapType .

qudt:DimensionVector
  a owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Dimension Vector" ;
  rdfs:subClassOf skos:Concept .

qudt:DimensionalDatatype
  a owl:Class ;
  dcterms:description "A dimensional data type is a data type that specifies a physical quantity or unit of measure. Information about the physical dimensions of the quantities and units is embedded in their types." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Dimensional Data Type" ;
  rdfs:subClassOf qudt:StructuredDatatype .

qudt:DiscreteState
  a owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:DoublePrecisionType
  a owl:Class ;
  dcterms:description "A double precision data type specifies how a numeric value, such as an integer or real number, is stored in memory that occupies two words in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes, and so double precision data value on a 32-bit machine architecture occupies eight bytes of memory." ;
  owl:disjointWith qudt:SinglePrecisionType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Double Precision Type" ;
  rdfs:subClassOf qudt:NumericType .

qudt:EarthCoordinateSystem
  a owl:Class, sh:NodeShape ;
  dcterms:description "A\"Trajectory Coordinate System\" for all earth-centered coordinates, such as \"Earth mean equator and prime meridian coordinate system\", \"Earth true equator and prime meridian of epoch coordinate system\", \"International celestial reference system\", \"International terrestrial reference system\", \"Sun centered international celestial reference system\", \"Vehicle centered international celestial reference system\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Earth Coordinate System Type" ;
  rdfs:subClassOf qudt:TrajectoryCoordinateSystem ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt.type:CC_EarthCentered ;
    owl:onProperty qudt:coordinateCenter ;
  ] ;
  sh:property qudt:EarthCoordinateSystem-coordinateCenter .

qudt:Encoding
  a owl:Class, sh:NodeShape ;
  dcterms:description "An encoding is a rule or algorithm that is used to convert data from a native, or unspecified form into a specific form that satisfies the encoding rules. Examples of encodings include character encodings, such as UTF-8." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Encoding" ;
  rdfs:subClassOf skos:Concept ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:bits ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:bytes ;
  ] ;
  sh:property qudt:Encoding-bits ;
  sh:property qudt:Encoding-bytes .

qudt:EngineeringValueTupleMember
  a owl:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Tuple Member Type'. Detailed description to be provided in a future version." ;
  owl:disjointWith qudt:RawValueTupleMember ;
  owl:disjointWith qudt:RawValueTupleMemberType ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:TupleMemberType [
      a owl:Restriction ;
      owl:allValuesFrom qudt:RealSinglePrecisionType ;
      owl:onProperty qudt:elementType ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Engineering Value Tuple Member" ;
  rdfs:subClassOf qudt:TupleMember ;
  rdfs:subClassOf qudt:TupleMemberType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:RealSinglePrecisionType ;
    owl:onProperty qudt:elementType ;
  ] ;
  sh:property qudt:EngineeringValueTupleMember-elementType .

qudt:Enumeration
  a owl:Class, sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "QUDT Enumeration" ;
  rdfs:subClassOf dtype:Enumeration ;
  rdfs:subClassOf qudt:StructuredDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    dcterms:description "The number of bits allocated to the field for encoding any tags associated with elements." ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:bits ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:EnumeratedValue ;
    owl:onProperty qudt:defaultValue ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:EnumeratedValue ;
    owl:onProperty dtype:value ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:encoding ;
  ] ;
  sh:property qudt:Enumeration-bits ;
  sh:property qudt:Enumeration-defaultValue ;
  sh:property qudt:Enumeration-encoding ;
  sh:property qudt:Enumeration-value .

qudt:FieldType
  a owl:Class ;
  dcterms:description "A sub-type of 'Composite Data Type'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Field Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Datatype ;
    owl:onProperty qudt:elementType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:fieldName ;
  ] .

qudt:FileFormat
  a owl:Class ;
  dcterms:description "A sub-type of 'Enumerated Value'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "File format" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:FixedIntervalTimeSeriesArray
  a owl:Class ;
  dcterms:description "A Fixed Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Fixed Interval Time Series Array Type" ;
  rdfs:subClassOf qudt:TimeSeriesArray .

qudt:FixedIntervalTimeSeriesArrayType
  a owl:Class ;
  dcterms:description "A Fixed Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals." ;
  rdfs:label "Fixed Interval Time Series Array Type" ;
  rdfs:subClassOf qudt:TimeSeriesArrayType .

qudt:FloatingPointEncodingType
  a owl:Class ;
  dcterms:description "A \"Encoding\" with the following instance(s): \"Double Precision Encoding\", \"Single Precision Real Encoding\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Floating Point Encoding" ;
  rdfs:subClassOf qudt:Encoding .

qudt:FrameType
  a owl:Class ;
  dcterms:description "This class contains elements which specify the intertial type of a coordinate frame as either inertial, rotating, or non-rotating." ;
  owl:oneOf ( qudt:FT_ROTATING qudt:FT_NON-ROTATING qudt:FT_INERTIAL ) ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Frame Type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:Function
  a owl:Class, sh:NodeShape ;
  rdfs:label "Function" ;
  rdfs:subClassOf qudt:Concept .

qudt:FunctionDatatype
  a owl:Class, sh:NodeShape ;
  dcterms:description "A function data type defines the input and output data type for a function or method. It includes at least the function name and the number of its parameters. In some programming languages, it may also specify the function's return type or the types of its arguments." ;
  dcterms:description "A function data type defines the inputs and outputs for a function or method. It includes at least the function name and the number of its parameters. In some programming languages, it may also specify the function's return type or the types of its arguments. [Wikipedia]" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Function Data Type" ;
  rdfs:subClassOf qudt:StructuredDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Datatype ;
    owl:onProperty qudt:argType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Datatype ;
    owl:onProperty qudt:returnType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:functionArity ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:returnType ;
  ] ;
  sh:property qudt:FunctionDatatype-argType ;
  sh:property qudt:FunctionDatatype-functionArity ;
  sh:property qudt:FunctionDatatype-returnType .

qudt:Graph
  a owl:Class ;
  dcterms:description "A graph is a kind of abstract data type, that consists of a set of nodes (also called vertices) and a set of edges that establish relationships (connections) between the nodes. A Graph Type is a data type that defines the properties of data structures that represent graphs and their members (nodes and edges)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Graph Type" ;
  rdfs:subClassOf qudt:Collection .

qudt:GraphType
  a owl:Class ;
  dcterms:description "A graph is a kind of abstract data type, that consists of a set of nodes (also called vertices) and a set of edges that establish relationships (connections) between the nodes. A Graph Type is a data type that defines the properties of data structures that represent graphs and their members (nodes and edges)." ;
  rdfs:label "Graph Type" ;
  rdfs:subClassOf qudt:CollectionType .

qudt:GroundCoordinateSystem
  a owl:Class ;
  dcterms:description "A sub-type of 'Aerospace coordinate system'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Ground coordinate system" ;
  rdfs:subClassOf qudt:AerospaceCoordinateSystem .

qudt:HashTable
  a owl:Class ;
  dcterms:description "A hash table is a kind of map that utilizes a hash function to perform efficient lookup: given a key (e.g., a person's name), find the corresponding value (e.g., that person's telephone number). Hash tables support the efficient lookup, insertion and deletion of elements in constant time on average. A Hash Table Type is a data type that defines the types of a hash table's key-value pairs." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Hash Table Type" ;
  rdfs:subClassOf qudt:Map ;
  rdfs:subClassOf qudt:TableType .

qudt:HashTableType
  a owl:Class ;
  dcterms:description "A hash table is a kind of map that utilizes a hash function to perform efficient lookup: given a key (e.g., a person's name), find the corresponding value (e.g., that person's telephone number). Hash tables support the efficient lookup, insertion and deletion of elements in constant time on average. A Hash Table Type is a data type that defines the types of a hash table's key-value pairs." ;
  rdfs:label "Hash Table Type" ;
  rdfs:subClassOf qudt:MapType .

qudt:Heap
  a owl:Class ;
  dcterms:description "<p class=\"lm-para\">A heap is a specialized tree-based data structure that satisfies the condition: if B is a child node of A, then $key(A) \\ge key(B)$. This implies that an element with the greatest key is always in the root node, and so such a heap is sometimes called a max heap. Alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min heap. The function or method that implements the key() operator is specified by the heap type.</p>"^^rdf:HTML ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Heap_(data_structure)> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Heap Type" ;
  rdfs:subClassOf qudt:OrderedTree .

qudt:HeapType
  a owl:Class ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Heap_(data_structure)> ;
  rdfs:comment "A heap is a specialized tree-based data structure that satisfies the condition: if B is a child node of A, then <em>key(A) &gt; key(B)</em>. This implies that an element with the greatest key is always in the root node, and so such a heap is sometimes called a max heap. Alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min heap. The function or method that implements the key() operator is specified by the heap type."^^rdf:HTML ;
  rdfs:label "Heap Type" ;
  rdfs:subClassOf qudt:OrderedTreeType .

qudt:HexBinaryType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A string composed of hex characters." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Hexidecimal Binary Type" ;
  rdfs:subClassOf qudt:TextStringType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:length ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:maxLength ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:minLength ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:pattern ;
  ] ;
  sh:property qudt:HexBinaryType-length ;
  sh:property qudt:HexBinaryType-maxLength ;
  sh:property qudt:HexBinaryType-minLength ;
  sh:property qudt:HexBinaryType-pattern .

qudt:IconicCue
  a owl:Class, sh:NodeShape ;
  owl:disjointWith qudt:AuralCue ;
  owl:disjointWith qudt:KinestheticCue ;
  owl:disjointWith qudt:VisualCue ;
  rdfs:label "Iconic enumeration literal" ;
  rdfs:subClassOf qudt:ModalCue ;
  sh:property qudt:IconicCue-image .

qudt:InertialCoordinateFrame
  a owl:Class, sh:NodeShape ;
  dcterms:description "A \"Coordinate Frame\"." ;
  owl:equivalentClass qudt:NonRotatingInertialFrame ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Inertial Coordinate Frame" ;
  rdfs:subClassOf qudt:InertialReferenceFrame ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt.type:FT_NON-ROTATING ;
    owl:onProperty qudt:frameType ;
  ] ;
  sh:property qudt:InertialCoordinateFrame-frameType .

qudt:InertialReferenceFrame
  a owl:Class ;
  dcterms:description "A sub-type of 'Reference Frame'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Inertial reference frame" ;
  rdfs:subClassOf qudt:ReferenceFrame .

qudt:IntegerDatatype
  a owl:Class ;
  dcterms:description "An Integer Type is a data type that specifies how integer numbers are represented and stored in machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Integer Datatype" ;
  rdfs:subClassOf qudt:NumericType ;
  rdfs:subClassOf qudt:OrdinalType .

qudt:IntegerEncodingType
  a owl:Class ;
  dcterms:description "The encoding scheme for integer types" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Integer Encoding" ;
  rdfs:subClassOf qudt:Encoding .

qudt:IntegerList
  a owl:Class, sh:NodeShape ;
  rdfs:label "Integer list" ;
  rdfs:subClassOf qudt:List ;
  sh:property qudt:IntegerList-first ;
  sh:property qudt:IntegerList-rest .

qudt:IntegerVector
  a owl:Class, sh:NodeShape ;
  rdfs:label "Integer vector" ;
  rdfs:subClassOf qudt:Vector ;
  sh:property qudt:IntegerList-first ;
  sh:property qudt:IntegerList-rest .

qudt:InterpolatedTable
  a owl:Class ;
  dcterms:description "A sub-type of 'Table Type'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Interpolated Table Type" ;
  rdfs:subClassOf qudt:Table ;
  rdfs:subClassOf qudt:TableType .

qudt:KinestheticCue
  a owl:Class, sh:NodeShape ;
  rdfs:label "Kinesthetic Cue" ;
  rdfs:subClassOf qudt:ModalCue ;
  sh:property qudt:KinestheticCue-code .

qudt:LargeObject
  a owl:Class ;
  dcterms:description "A 'LargeObject' datatype is used to store blocks of unstructured data (such as text, graphic images, video clips, and sound waveforms). They often are used to allow efficient, random, piece-wise access to the data." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Large object" ;
  rdfs:subClassOf qudt:CompositeDatatype .

qudt:LargeObjectType
  a owl:Class ;
  dcterms:description "A 'LargeObject' datatype is used to store blocks of unstructured data (such as text, graphic images, video clips, and sound waveforms). They often are used to allow efficient, random, piece-wise access to the data." ;
  rdfs:label "Large object" ;
  rdfs:subClassOf qudt:CompositeDatatype .

qudt:LimitType
  a owl:Class ;
  rdfs:label "Limit type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:List
  a owl:Class ;
  dcterms:description "A sub-type of 'Collection Type'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "List" ;
  rdfs:subClassOf qudt:Collection ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Datatype ;
    owl:onProperty rdf:first ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:List ;
    owl:onProperty rdf:rest ;
  ] .

qudt:ListType
  a owl:Class, sh:NodeShape ;
  rdfs:label "List type" ;
  rdfs:subClassOf qudt:CollectionType ;
  sh:property qudt:List-first ;
  sh:property qudt:List-rest .

qudt:LocalCoordinateSystem
  a owl:Class ;
  dcterms:description "A \"Trajectory Coordinate System\" with the following instance(s): \"Local vertical curvilinear coordinate system\", \"Local vertical local horizontal coordinate system\", \"Vehicle centered local vertical curvilinear coordinate system\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Local Coordinate System Type" ;
  rdfs:subClassOf qudt:TrajectoryCoordinateSystem .

qudt:LongIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Long Integer is an integer that can be represented in four octets (32 bits) of machine memory. Long integers may be signed or unsigned." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Long Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 32 ;
    owl:onProperty qudt:bits ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 4 ;
    owl:onProperty qudt:octets ;
  ] ;
  sh:property qudt:LongIntegerType-octets .

qudt:LunarCoordinateSystem
  a owl:Class, sh:NodeShape ;
  dcterms:description "Two slightly different coordinate frames are commonly used to define the orientation of the axes of a lunar body-fixed coordinate system: a mean Earth/rotation frame and a principal axis coordinate frame. The mean Earth/rotation frame (sometimes called the \"Mean Earth/polar axis\" frame) is a lunar body-fixed coordinate frame with the X-axis aligned with the mean direction from the Moon to the Earth and the Z-axis aligned with the mean axis of rotation of the Moon. The principal axis frame is a lunar body-fixed coordinate frame aligned with the principal axes of the Moon. Due to the fact that the Moon is synchronously rotating but is not exactly symmetric, the principal axes and the mean Earth/rotation axes of the Moon do not coincide." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Lunar Coordinate System" ;
  rdfs:subClassOf qudt:TrajectoryCoordinateSystem ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:realization ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:xAxisDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:yAxisDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:zAxisDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt.type:CC_MoonCentered ;
    owl:onProperty qudt:coordinateCenter ;
  ] ;
  sh:property qudt:LunarCoordinateSystem-coordinateCenter ;
  sh:property qudt:LunarCoordinateSystem-realization ;
  sh:property qudt:LunarCoordinateSystem-xAxisDefinition ;
  sh:property qudt:LunarCoordinateSystem-yAxisDefinition ;
  sh:property qudt:LunarCoordinateSystem-zAxisDefinition .

qudt:MajorMinorType
  a owl:Class ;
  dcterms:description "A sub-type of 'Enumerated Value'. Detailed description to be provided in a future version." ;
  owl:oneOf ( qudt.type:Minor qudt.type:Major ) ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Major minor type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:Map
  a owl:Class ;
  dcterms:description "A Map Type is an abstract data type that defines the properties of map data structures. A Map (or Associative Array) is an abstract data structure composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding." ;
  owl:equivalentClass qudt:AssociativeArray ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Map Type" ;
  rdfs:subClassOf qudt:Collection .

qudt:MapType
  a owl:Class ;
  dcterms:description "A Map Type is an abstract data type that defines the properties of map data structures. A Map (or Associative Array) is an abstract data structure composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding." ;
  owl:equivalentClass qudt:AssociativeArrayType ;
  rdfs:label "Map Type" ;
  rdfs:subClassOf qudt:CollectionType .

qudt:MarsCoordinateSystem
  a owl:Class, sh:NodeShape ;
  dcterms:description "A \"Trajectory Coordinate System\" with the following instance(s): \"Mars mean equator and IAU-Node of epoch\", \"Mars mean equator and prime meridian body-fixed\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Mars Coordinate System Type" ;
  rdfs:subClassOf qudt:TrajectoryCoordinateSystem ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt.type:CC_MarsCentered ;
    owl:onProperty qudt:coordinateCenter ;
  ] ;
  sh:property qudt:MarsCoordinateSystem-coordinateCenter .

qudt:MassPropertiesArray
  a owl:Class ;
  dcterms:description "The Mass Properties of an object are its: Center of Gravity, Mass, Moment of Inertia, and Product of Inertia. A mass properties array is an array whose elements contain these measured quantities for some object. A mass properties array data type provides the type specification for a class of arrays in which the data types of the elements are constrained to be one of these four properties." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Mass Properties Array Type" ;
  rdfs:subClassOf qudt:Array .

qudt:MassPropertiesArrayType
  a owl:Class ;
  dcterms:description "The Mass Properties of an object are its: Center of Gravity, Mass, Moment of Inertia, and Product of Inertia. A mass properties array is an array whose elements contain these measured quantities for some object. A mass properties array data type provides the type specification for a class of arrays in which the data types of the elements are constrained to be one of these four properties." ;
  rdfs:label "Mass Properties Array Type" ;
  rdfs:subClassOf qudt:ArrayType .

qudt:MathsFunctionType
  a owl:Class ;
  dcterms:description "A sub-type of 'QUDT Concept'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Maths Function Type" ;
  rdfs:subClassOf qudt:Concept .

qudt:Matrix
  a owl:Class ;
  dcterms:description "A Matrix Type is a data type that specifies the properties of data structures that hold matricies." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Matrix Type" ;
  rdfs:subClassOf qudt:MultiDimensionalArray .

qudt:MatrixType
  a owl:Class ;
  rdfs:label "Matrix Type" ;
  rdfs:subClassOf qudt:MultiDimensionalArrayType .

qudt:MemoryOrderType
  a owl:Class ;
  dcterms:description "A sub-type of 'Enumerated Value'. Detailed description to be provided in a future version." ;
  owl:oneOf ( qudt.type:HighToLow qudt.type:LowToHigh ) ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Memory order type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:ModalCue
  a owl:Class, sh:NodeShape ;
  rdfs:label "Modal Cue" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:property qudt:ModalCue-duration .

qudt:ModalEnumeration
  a owl:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'QUDT Enumeration'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Modal Enumeration" ;
  rdfs:subClassOf qudt:Enumeration ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom <http://qudt.org/schema/type#ModalCue> ;
    owl:onProperty qudt:defaultValue ;
  ] ;
  sh:property qudt:ModalEnumeration-defaultValue .

qudt:MultiDimensionalArray
  a owl:Class ;
  dcterms:description "Ordinary or one-dimensional arrays are indexed by a single integer. For a multi-dimensional array, the index into the array uses an ordered list of integers, such as in a[3,1,5]. The length of the list of integers used to index into the multi-dimensional array is always the same and is referred to as the array's dimensionality. The bounds on each of these are called the array's dimensions." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Multi Dimensional Array Type" ;
  rdfs:subClassOf qudt:Array .

qudt:MultiDimensionalArrayType
  a owl:Class ;
  dcterms:description "Ordinary or one-dimensional arrays are indexed by a single integer. For a multi-dimensional array, the index into the array uses an ordered list of integers, such as in a[3,1,5]. The length of the list of integers used to index into the multi-dimensional array is always the same and is referred to as the array's dimensionality. The bounds on each of these are called the array's dimensions." ;
  rdfs:label "Multi Dimensional Array Type" ;
  rdfs:subClassOf qudt:ArrayType .

qudt:MultiDimensionalDataFormat
  a owl:Class ;
  dcterms:description "Data formats for storing and manipulating scalar and multidimensional data in a platform and discipline independent manner, for example HDF, CDF and netCDF." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Multi dimensional data format" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#descriptor> ;
  ] .

qudt:MultiDimensionalDataFormatType
  a owl:Class, sh:NodeShape ;
  dcterms:description "Data formats for storing and manipulating scalar and multidimensional data in a platform and discipline independent manner, for example HDF, CDF and netCDF." ;
  rdfs:label "Multi Dimensional Data Format Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:MultiDimensionalDataFormat-descriptor .

qudt:MultiModalEnumeration
  a owl:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'QUDT Enumeration'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Multi modal enumeration" ;
  rdfs:subClassOf qudt:Enumeration ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:ModalEnumeration ;
    owl:onProperty <http://qudt.org/schema/type#modalCueEnumeration> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#auralCueEnumeration> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#iconicCueEnumeration> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#kinestheticCueEnumeration> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#visualCueEnumeration> ;
  ] ;
  sh:property qudt:MultiModalEnumeration-auralCueEnumeration ;
  sh:property qudt:MultiModalEnumeration-iconicCueEnumeration ;
  sh:property qudt:MultiModalEnumeration-kinestheticCueEnumeration ;
  sh:property qudt:MultiModalEnumeration-modalCueEnumeration ;
  sh:property qudt:MultiModalEnumeration-visualCueEnumeration .

qudt:MultiModalType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Enumerated Value'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Multi Modal Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom <http://qudt.org/schema/type#ModalCue> ;
    owl:onProperty <http://qudt.org/schema/type#modalCue> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#auralCue> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#iconicCue> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#kinestheticCue> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#visualCue> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:onProperty <http://qudt.org/schema/type#modalCue> ;
    owl:someValuesFrom <http://qudt.org/schema/type#ModalCue> ;
  ] ;
  sh:property qudt:MultiModalType-auralCue ;
  sh:property qudt:MultiModalType-iconicCue ;
  sh:property qudt:MultiModalType-kinestheticCue ;
  sh:property qudt:MultiModalType-modalCue ;
  sh:property qudt:MultiModalType-visualCue .

qudt:MultiSet
  a owl:Class ;
  rdfs:comment "A bag is a set in which elements may be repeated." ;
  rdfs:label "Bag" ;
  rdfs:subClassOf qudt:Collection .

qudt:N-Tuple
  a owl:Class ;
  dcterms:description "A tuple containing n objects is known as an \"n-tuple\". For example the 4-tuple (or \"quadruple\"), with components of respective types PERSON, DAY, MONTH and YEAR, could be used to record that a certain person was born on a certain day of a certain month of a certain year." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "N-Tuple Type" ;
  rdfs:subClassOf qudt:Tuple ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:minCardinality 1 ;
    owl:onProperty qudt:elementType ;
  ] .

qudt:N-TupleType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A tuple containing n objects is known as an \"n-tuple\". For example the 4-tuple (or \"quadruple\"), with components of respective types PERSON, DAY, MONTH and YEAR, could be used to record that a certain person was born on a certain day of a certain month of a certain year." ;
  rdfs:label "N-Tuple Type" ;
  rdfs:subClassOf qudt:TupleType ;
  sh:property qudt:N-Tuple-elementType .

qudt:NonRotatingInertialFrame
  a owl:Class, sh:NodeShape ;
  dcterms:description "The non-rotating (or \"inertial\") coordinate frames are defined by taking a \"snapshot\" of the orientation of a particular set of right-handed, orthogonal axes at a specific epoch or time. In other words, the non-rotating coordinate frame, however it is defined, is frozen or fixed at a specific time - for all time. These non-rotating coordinate frames are referred to as \"of Epoch\" coordinate frames." ;
  owl:equivalentClass qudt:InertialCoordinateFrame ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Non Rotating Coordinate Frame" ;
  rdfs:subClassOf qudt:InertialReferenceFrame ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt.type:FT_NON-ROTATING ;
    owl:onProperty qudt:frameType ;
  ] ;
  sh:property qudt:NonRotatingInertialFrame-frameType .

qudt:NumericType
  a owl:Class, sh:NodeShape ;
  dcterms:description "Numeric data types are data types whose values denote quantities (in some mathematical number system)." ;
  dcterms:description "Numeric data types are data types whose values denote quantities as defined by a mathematical number system." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Numeric Type" ;
  rdfs:subClassOf qudt:ScalarDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:SignednessType ;
    owl:onProperty qudt:signedness ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:accuracy ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:signedness ;
  ] ;
  sh:property qudt:NumericType-accuracy ;
  sh:property qudt:NumericType-signedness .

qudt:OctetType
  a owl:Class ;
  dcterms:description "An 8 bit unsigned integer" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Octet Type" ;
  rdfs:subClassOf qudt:UnsignedIntegerType .

qudt:OnOffStateType
  a owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "On off state type" ;
  rdfs:subClassOf qudt:DiscreteState .

qudt:OpenCloseStateType
  a owl:Class ;
  rdfs:label "Open Close State Type" ;
  rdfs:subClassOf qudt:DiscreteState .

qudt:OrderedCollection
  a owl:Class ;
  dcterms:description "An Ordered Collection Type is an abstract data type that defines the properties of collection data structures whose members can be linearly ordered. An ordered collection is a collection together with an ordering relation (such as greater than) that linearly orders the collection elements." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Ordered Collection Type" ;
  rdfs:subClassOf qudt:Collection ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Datatype ;
    owl:onProperty rdf:first ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:OrderedCollection ;
    owl:onProperty rdf:rest ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom dtype:ComparisonOperator ;
    owl:onProperty qudt:orderingRelation ;
  ] .

qudt:OrderedCollectionType
  a owl:Class, sh:NodeShape ;
  dcterms:description "An Ordered Collection Type is an abstract data type that defines the properties of collection data structures whose members can be linearly ordered. An ordered collection is a collection together with an ordering relation (such as greater than) that linearly orders the collection elements." ;
  rdfs:label "Ordered Collection Type" ;
  rdfs:subClassOf qudt:CollectionType ;
  sh:property qudt:OrderedCollection-first ;
  sh:property qudt:OrderedCollection-orderingRelation ;
  sh:property qudt:OrderedCollection-rest .

qudt:OrderedTree
  a owl:Class ;
  dcterms:description "<p class=\"lm-para\">An \"Ordered Tree Type\" is a data type that defines the properties of data structures that represent ordered trees. An ordered tree is a tree where the children of every node are ordered, that is, there is a first child, second child, third child, etc. Typically a type specification for an ordered tree will include the comparison operator (such as $\\lt$ or $\\gt$) that is used to order the nodes.</p>"^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Ordered Tree Type" ;
  rdfs:subClassOf qudt:OrderedCollection ;
  rdfs:subClassOf qudt:Tree .

qudt:OrderedTreeType
  a owl:Class ;
  dcterms:description "An \"Ordered Tree Type\" is a data type that defines the properties of data structures that represent ordered trees. An ordered tree is a tree where the children of every node are ordered, that is, there is a first child, second child, third child, etc. Typically a type specification for an ordered tree will include the comparison operator (such as $\\lt$ or $\\gt$) that is used to order the nodes." ;
  rdfs:label "Ordered Tree Type" ;
  rdfs:subClassOf qudt:OrderedCollectionType ;
  rdfs:subClassOf qudt:TreeType .

qudt:OrdinalType
  a owl:Class ;
  dcterms:description "An ordinal data type is a data type that specifies the properties of values that can easily be put in a one to one correspondence with a subset of the natural numbers. Examples include boolean, character, and integer data types." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Ordinal Data Type" ;
  rdfs:subClassOf qudt:ScalarDatatype .

qudt:PaddingType
  a owl:Class ;
  dcterms:description "This describes how unused bits of a field are filled. Unused bits could be set to one or zero. A third option is \"don't care\"." ;
  owl:oneOf ( qudt.type:PadWithOnes qudt.type:PadWithZeros qudt.type:PadWithAny ) ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Padding type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:ParameterModifiabilityType
  a owl:Class ;
  rdfs:comment "An enumeration of literals that signify whether a parameter is modifiable and if so, by whom." ;
  rdfs:label "Parameter modifiability type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:Percentage
  a owl:Class ;
  dcterms:description "A Scalar Datatype for expressing a dimensionless ratio." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Percentage Type" ;
  rdfs:subClassOf qudt:NumericType .

qudt:PhysicalAddress
  a owl:Class ;
  dcterms:description "A \"Structured Datatype\"." ;
  dcterms:description "A physical address is a pointer to a memory location." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Physical Address Type" ;
  rdfs:subClassOf qudt:CompositeDatatype .

qudt:PolarCoordinates
  a owl:Class ;
  dcterms:description "A set of  variables which fix a geometric object. If the coordinates of a point P are determined by the distance from P to the origin and the angle subtended by the radial vector at P and a fixed axis, they are known as polar coordinates. Typically, the angle is measured with respect to the x-axis." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Polar Coordinate System Type" ;
  rdfs:subClassOf qudt:Coordinates .

qudt:PolarCoordinatesType
  a owl:Class ;
  dcterms:description "A set of  variables which fix a geometric object. If the coordinates of a point P are determined by the distance from P to the origin and the angle subtended by the radial vector at P and a fixed axis, they are known as polar coordinates. Typically, the angle is measured with respect to the x-axis." ;
  rdfs:label "Polar Coordinate System Type" ;
  rdfs:subClassOf qudt:CoordinateSystemType .

qudt:Polarity
  a owl:Class ;
  rdfs:comment "A \"Tagged Enumeration\" with the following instance(s): \"negative\", \"positive\"." ;
  rdfs:label "Polarity" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:PositiveIntegerType
  a owl:Class ;
  dcterms:description "Positive Integers are integers that are either non-zero and non-negative." ;
  owl:disjointWith qudt:SignedIntegerType ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:IntegerDatatype qudt:UnsignedType ) ;
  ] ;
  rdfs:label "Positive Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf qudt:UnsignedType .

qudt:PubEnumeratedType
  a owl:Class ;
  owl:oneOf ( qudt:Article qudt:Book qudt:InBook qudt:InProceedings qudt:Proceedings
    qudt:Unpublished qudt:TechReport qudt:Manual qudt:InCollection qudt:Conference qudt:Booklet
    qudt:Misc ) ;
  rdfs:label "Pub enumerated type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:QuantityValueType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Dimensional Data Type'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Quantity value type" ;
  rdfs:subClassOf qudt:DimensionalDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:NumericType ;
    owl:onProperty qudt:elementType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:QuantityType ;
    owl:onProperty qudt:basis ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Unit ;
    owl:onProperty qudt:elementUnit ;
  ] ;
  sh:property qudt:QuantityValueType-basis ;
  sh:property qudt:QuantityValueType-elementType ;
  sh:property qudt:QuantityValueType-elementUnit .

qudt:RawValueTupleMember
  a owl:Class ;
  dcterms:description "A sub-type of 'Tuple Member Type'. Detailed description to be provided in a future version." ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:TupleMember [
      a owl:Restriction ;
      owl:allValuesFrom qudt:UnsignedIntegerType ;
      owl:onProperty qudt:elementType ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Raw value tuple member" ;
  rdfs:subClassOf qudt:TupleMember ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:UnsignedIntegerType ;
    owl:onProperty qudt:elementType ;
  ] .

qudt:RawValueTupleMemberType
  a owl:Class, sh:NodeShape ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:TupleMemberType [
      a owl:Restriction ;
      owl:allValuesFrom qudt:UnsignedIntegerType ;
      owl:onProperty qudt:elementType ;
    ] ) ;
  ] ;
  rdfs:label "Raw value tuple member type" ;
  rdfs:subClassOf qudt:TupleMemberType ;
  sh:property qudt:RawValueTupleMember-elementType .

qudt:RealDatatype
  a owl:Class, sh:NodeShape ;
  dcterms:description "A real number is represented as a factor, called the mantissa, multiplied by a power (the exponent) of a base. Different bases yield different approximations to real numbers, and conversion between them is limited in accuracy.  Four floating-point types are defined in 'IEEE-754 Standard for Binary Floating-Point'. These types are 'single', 'extended single', 'double', and 'extended double'." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Real Datatype" ;
  rdfs:subClassOf qudt:NumericType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:base ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:maxExponent ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:precision ;
  ] ;
  sh:property qudt:RealDatatype-base ;
  sh:property qudt:RealDatatype-maxExponent ;
  sh:property qudt:RealDatatype-precision .

qudt:RealDoublePrecisionType
  a owl:Class ;
  dcterms:description """A real double precision data type specifies how a real number, or an approximation of a real number is stored in memory that occupies two words in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes.

An example of a real double precision data type specification is the IEEE 754 standard for encoding binary or decimal floating point numbers in 8 bytes for storage on 32-bit machine architectures.""" ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:RealDatatype qudt:DoublePrecisionType ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Real Double Precision Type" ;
  rdfs:subClassOf qudt:DoublePrecisionType ;
  rdfs:subClassOf qudt:RealDatatype .

qudt:RealNumberType
  a owl:Class, sh:NodeShape ;
  rdfs:comment "This is the class of data values that approximate real numbers in finite precision. Often, such values are expressed in \"mantissa, base, exponent\" form. Any rational number can be expressed in the form m*b^e, where m (the mantissa), b (the base), and e (the exponent) are integers. Typically, b is chosen to be either 2 or 10, and then the values of m and e are determined given the choice of base." ;
  rdfs:label "Real number type" ;
  rdfs:subClassOf qudt:RealDatatype .

qudt:RealSinglePrecisionType
  a owl:Class ;
  dcterms:description "A real single precision data type specifies how a real number, or an approximation of a real number is stored in memory that occupies one word in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes. An example of a real single precisoin data type specification is the IEEE 754 standard for encoding binary or decimal floating point numbers in 4 bytes for storage on 32-bit machine architectures." ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:RealDatatype qudt:SinglePrecisionType ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Real Single Precision Type" ;
  rdfs:subClassOf qudt:RealDatatype ;
  rdfs:subClassOf qudt:SinglePrecisionType .

qudt:Record
  a owl:Class ;
  dcterms:description "A Record Type is a type whose values are records, i.e. aggregates of several items of possibly different types. The aggregated items are called fields or members and are usually identified or indexed by field labels." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Record Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom <http://qudt.org/schema/type#FieldTypeList> ;
    owl:onProperty qudt:elementTypeList ;
  ] .

qudt:ReferenceDatatype
  a owl:Class ;
  dcterms:description "A reference is an object containing information which refers to data stored elsewhere, as opposed to containing the data itself. A reference data type is a data type that specifies how a reference is represented and stored in memory, as well as the operations that can be performed on reference values. The most common example of a reference data type is a pointer." ;
  dcterms:description "A reference is an object containing information which refers to data stored elsewhere, as opposed to containing the data itself. A reference data type is a data type that specifies how a reference is represented and stored in memory, as well as the operations that can be performed on reference values. The most common example of a reference data type is a pointer. [Wikipedia]" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Reference Data Type" ;
  rdfs:subClassOf qudt:StructuredDatatype .

qudt:ReferenceFrame
  a owl:Class, sh:NodeShape ;
  dcterms:description """A reference frame (or frame of reference) in physics, may refer to a coordinate system or set of axes.
The frame serves as the datum to measure the position, orientation, and other properties of objects in it.
Reference frame may refer to an observational reference frame tied to the state of motion of an observer. 
Reference frame may also refer to both an observational reference frame and an attached coordinate system as a unit.""" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Reference Frame" ;
  rdfs:subClassOf qudt:Concept ;
  rdfs:subClassOf skos:Concept ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:FrameType ;
    owl:onProperty qudt:frameType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:realization ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:xAxisDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:xCoordinateDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:yAxisDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:yCoordinateDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:zAxisDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:zCoordinateDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty vaem:comment ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty vaem:description ;
  ] ;
  sh:property qudt:ReferenceFrame-comment ;
  sh:property qudt:ReferenceFrame-description ;
  sh:property qudt:ReferenceFrame-frameType ;
  sh:property qudt:ReferenceFrame-realization ;
  sh:property qudt:ReferenceFrame-xAxisDefinition ;
  sh:property qudt:ReferenceFrame-xCoordinateDefinition ;
  sh:property qudt:ReferenceFrame-yAxisDefinition ;
  sh:property qudt:ReferenceFrame-yCoordinateDefinition ;
  sh:property qudt:ReferenceFrame-zAxisDefinition ;
  sh:property qudt:ReferenceFrame-zCoordinateDefinition .

qudt:RotatingReferenceFrame
  a owl:Class ;
  dcterms:description "A sub-type of 'Reference Frame'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Rotating reference frame" ;
  rdfs:subClassOf qudt:ReferenceFrame .

qudt:Sequence
  a owl:Class ;
  dcterms:description "A \"Structured Datatype\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Sequence" ;
  rdfs:subClassOf qudt:Collection ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Datatype ;
    owl:onProperty rdf:first ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Sequence ;
    owl:onProperty rdf:rest ;
  ] .

qudt:SequenceType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A sequence is an enumerated collection of objects in which repetitions are allowed. Like a set, it contains members (also called elements, or terms). The number of elements (possibly infinite) is called the length of the sequence. Unlike a set, order matters, and exactly the same elements can appear multiple times at different positions in the sequence. Formally, a sequence can be defined as a function whose domain is either the set of the natural numbers (for infinite sequences) or the set of the first n natural numbers (for a sequence of finite length n). The position of an element in a sequence is its rank or index; it is the integer from which the element is the image. It depends on the context or of a specific convention, if the first element has index 0 or 1. [Wikipedia]" ;
  rdfs:label "Sequence" ;
  rdfs:subClassOf qudt:CollectionType ;
  sh:property qudt:Sequence-first ;
  sh:property qudt:Sequence-rest .

qudt:Set
  a owl:Class ;
  dcterms:description "A Set Type is an abstract data type that defines the properties of sets. A set is a collection (container) of certain values, without any particular order, and no repeated values. It corresponds with a finite set in mathematics." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Set Type" ;
  rdfs:subClassOf qudt:Collection .

qudt:SetType
  a owl:Class ;
  dcterms:description "A Set Type is an abstract data type that defines the properties of sets. A set is a collection (container) of certain values, without any particular order, and no repeated values. It corresponds with a finite set in mathematics." ;
  rdfs:label "Set Type" ;
  rdfs:subClassOf qudt:CollectionType .

qudt:ShortIntegerType
  a owl:Class ;
  dcterms:description "A Short Integer is an integer that can be represented in two octets (16 bits) of machine memory. Short integers may be signed or unsigned." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Short Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype .

qudt:SignedBigIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Signed Big Integer is a signed integer that can be represented in eight octets (64 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Signed Big Integer Type" ;
  rdfs:subClassOf qudt:BigIntegerType ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "-2^{63}" ;
    owl:onProperty qudt:minInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "2^{63}-1" ;
    owl:onProperty qudt:maxInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "SI64" ;
    owl:onProperty dtype:literal ;
  ] ;
  sh:property qudt:SignedBigIntegerType-literal ;
  sh:property qudt:SignedBigIntegerType-maxInclusive ;
  sh:property qudt:SignedBigIntegerType-minInclusive .

qudt:SignedIntegerType
  a owl:Class ;
  dcterms:description "Signed Integers are integers can take on both positive and negative values." ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:IntegerDatatype qudt:SignedType ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Signed Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf qudt:SignedType .

qudt:SignedLongIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Signed Long Integer is a signed integer that can be represented in four octets (32 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Signed Long Integer Type" ;
  rdfs:subClassOf qudt:LongIntegerType ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "-2^{31}" ;
    owl:onProperty qudt:minInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "2^{31}-1" ;
    owl:onProperty qudt:maxInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "UI32" ;
    owl:onProperty dtype:literal ;
  ] ;
  sh:property qudt:SignedLongIntegerType-abbreviation ;
  sh:property qudt:SignedLongIntegerType-maxInclusive ;
  sh:property qudt:SignedLongIntegerType-minInclusive .

qudt:SignedMediumIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A \"Signed Medium Integers\" is an integer of 24 bits that can take on both positive and negative values." ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:IntegerDatatype qudt:SignedType [
      a owl:Restriction ;
      owl:hasValue 3 ;
      owl:onProperty qudt:bytes ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Signed Integer Type" ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 3 ;
    owl:onProperty qudt:bytes ;
  ] .

qudt:SignedShortIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Signed Short Integer is a signed integer that can be represented in four octets (32 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Signed Short Integer Type" ;
  rdfs:subClassOf qudt:ShortIntegerType ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "SI16" ;
    owl:onProperty dtype:literal ;
  ] ;
  sh:property qudt:SignedShortIntegerType-abbreviation .

qudt:SignedType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A signed type is a numeric type that distinguishes between positive and negative numbers using an encoding scheme, such as sign and magnitude, one's compliment, and two's compliment to represent negative numbers." ;
  owl:disjointWith qudt:UnsignedType ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:NumericType [
      a owl:Restriction ;
      owl:hasValue qudt.type:Signed ;
      owl:onProperty qudt:signedness ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Signed Type" ;
  rdfs:subClassOf qudt:NumericType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt.type:Signed ;
    owl:onProperty qudt:signedness ;
  ] ;
  sh:property qudt:SignedType-signedness .

qudt:SignedVariableLengthIntegerType
  a owl:Class ;
  dcterms:description "A Signed Variable Length Integer data type defines a data structure for representing signed integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Signed Variable Length Integer Type" ;
  rdfs:subClassOf qudt:SignedIntegerType ;
  rdfs:subClassOf qudt:VariableLengthIntegerType .

qudt:SinglePrecisionType
  a owl:Class ;
  dcterms:description "A single precision data type specifies how a numeric value, such as an integer or real number, is stored in memory that occupies one word in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes, and so a single precision data value on a 32-bit machine architecture occupies four bytes of memory." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Single Precision Type" ;
  rdfs:subClassOf qudt:NumericType .

qudt:SplineCalibrator
  a owl:Class ;
  dcterms:description "A sub-type of 'Map Type'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Spline calibrator" ;
  rdfs:subClassOf qudt:Map .

qudt:SplineCalibratorType
  a owl:Class ;
  rdfs:label "Spline calibrator type" ;
  rdfs:subClassOf qudt:MapType .

qudt:SplinePoint
  a owl:Class ;
  dcterms:description "A sub-type of 'Tuple Type'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Spline point" ;
  rdfs:subClassOf qudt:Tuple .

qudt:SplinePointType
  a owl:Class ;
  rdfs:label "Spline point type" ;
  rdfs:subClassOf qudt:TupleType .

qudt:StateSpaceMatrix
  a owl:Class ;
  dcterms:description "In control engineering, a state space representation is a mathematical model of a physical system as a set of input, output and state variables related by first-order differential equations. To abstract from the number of inputs, outputs and states, the variables are expressed as vectors and the differential and algebraic equations are written in matrix form (the last one can be done when the dynamical system is linear and time invariant). " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "State Space Matrix Type" ;
  rdfs:subClassOf qudt:Matrix .

qudt:StateSpaceMatrixType
  a owl:Class ;
  dcterms:description "In control engineering, a state space representation is a mathematical model of a physical system as a set of input, output and state variables related by first-order differential equations. To abstract from the number of inputs, outputs and states, the variables are expressed as vectors and the differential and algebraic equations are written in matrix form (the last one can be done when the dynamical system is linear and time invariant). " ;
  rdfs:label "State Space Matrix Type" ;
  rdfs:subClassOf qudt:MatrixType .

qudt:StateSpaceVector
  a owl:Class ;
  dcterms:description "A state vector in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "State Space Vector Type" ;
  rdfs:subClassOf qudt:Vector ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:CoordinateSystem ;
    owl:onProperty qudt:coordinateSystem ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:coordinateSystem ;
  ] .

qudt:StateSpaceVectorType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A state-space vector type in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded." ;
  rdfs:label "State Space Vector Type" ;
  rdfs:subClassOf qudt:VectorType ;
  sh:property qudt:StateSpaceVector-coordinateSystem .

qudt:StateVectorType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A state-space vector type in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded." ;
  rdfs:label "State Vector Type" ;
  rdfs:subClassOf qudt:VectorType .

qudt:StringEncodingType
  a owl:Class ;
  dcterms:description "A \"Encoding\" with the following instance(s): \"UTF-16 String\", \"UTF-8 Encoding\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "String Encoding Type" ;
  rdfs:subClassOf qudt:Encoding .

qudt:StringList
  a owl:Class, sh:NodeShape ;
  rdfs:label "String list" ;
  rdfs:subClassOf qudt:List ;
  sh:property qudt:StringList-first ;
  sh:property qudt:StringList-rest .

qudt:StringType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A String Type is a data type that specifies the properties of data structures that hold strings. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "String Type" ;
  rdfs:subClassOf qudt:Array ;
  rdfs:subClassOf qudt:ArrayType ;
  rdfs:subClassOf qudt:ScalarDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:CharacterType ;
    owl:onProperty qudt:elementType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 0 ;
    owl:onProperty qudt:typeMatrix ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 1 ;
    owl:onProperty qudt:dimensionality ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:maxLength ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality "1"^^xsd:nonNegativeInteger ;
    owl:onProperty qudt:isByteString ;
  ] ;
  sh:property qudt:StringType-dimensionality ;
  sh:property qudt:StringType-elementType ;
  sh:property qudt:StringType-isByteString ;
  sh:property qudt:StringType-maxLength ;
  sh:property qudt:StringType-typeMatrix .

qudt:StringUTF16
  a owl:Class, sh:NodeShape ;
  dcterms:description "String UTF-16 Type is a string data type that specifies the properties of string data structures which encode strings using the UTF-16 encoding. UTF-16 is the native internal representation of text in the Microsoft Windows NT/Windows 2000/Windows XP/Windows CE, Qualcomm BREW, and Symbian operating systems; the Java and .NET byte code environments; Mac OS X's Cocoa and Core Foundation frameworks; and the Qt cross-platform graphical widget toolkit." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "String UTF16 Type" ;
  rdfs:subClassOf qudt:StringType ;
  rdfs:subClassOf qudt:TextStringType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt:UTF16-CHAR ;
    owl:onProperty qudt:elementType ;
  ] ;
  sh:property qudt:StringUTF16-elementType .

qudt:StringUTF8
  a owl:Class, sh:NodeShape ;
  dcterms:description "String UTF-8 Type is a string data type that specifies the properties of string data structures which encode strings using the UTF-8 encoding. UTF-8 includes ASCII, otherwise referred to as IA-5 (International Alphabet 5, as standardized by International Organization for Standardization [ISO]) as the first 128 values. The Internet Engineering Task Force (IETF) requires all Internet protocols to identify the encoding used for character data with UTF-8 as at least one supported encoding. The Internet Mail Consortium (IMC) recommends that all e-mail programs must be able to display and create mail using UTF-8." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "String UTF8 Type" ;
  rdfs:subClassOf qudt:StringType ;
  rdfs:subClassOf qudt:TextStringType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt:UTF8-CHAR ;
    owl:onProperty qudt:elementType ;
  ] ;
  sh:property qudt:StringUTF8-elementType .

qudt:StructuredDatatype
  a owl:Class, sh:NodeShape ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Datatype ;
    owl:onProperty qudt:elementType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:elementType ;
  ] ;
  sh:property qudt:StructuredDatatype-elementType .

qudt:SubjectArea
  a owl:Class ;
  rdfs:comment "A \"Enumeration Literal\"." ;
  rdfs:label "Subject Area" ;
  rdfs:subClassOf owl:Thing .

qudt:Table
  a owl:Class ;
  dcterms:description "A Table Type is a data type that specifies the properties of table data structures. A table is both a mode of visual communication and a means of arranging data. The use of tables is pervasive throughout NASA The precise conventions and terminology for describing tables varies depending on the context. Moreover, tables differ significantly in variety, structure, flexibility, notation, representation and use." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Table Type" ;
  rdfs:subClassOf qudt:Array ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:columns ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:rows ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 2 ;
    owl:onProperty qudt:dimensionality ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:byRow ;
  ] .

qudt:TableType
  a owl:Class, sh:NodeShape ;
  rdfs:comment "A Table Type is a data type that specifies the properties of table data structures. A table is both a mode of visual communication and a means of arranging data. The use of tables is pervasive throughout NASA The precise conventions and terminology for describing tables varies depending on the context. Moreover, tables differ significantly in variety, structure, flexibility, notation, representation and use." ;
  rdfs:label "Table Type" ;
  rdfs:subClassOf qudt:ArrayType ;
  sh:property qudt:Table-byRow ;
  sh:property qudt:Table-columns ;
  sh:property qudt:Table-dimensionality ;
  sh:property qudt:Table-rows .

qudt:TaggedEnumeration
  a owl:Class, sh:NodeShape ;
  dcterms:description "An enumeration where each literal  has a tag that is a non-negative integer. These enumerations are likely to have their literals encoded - hence the need for the tag." ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:Enumeration [
      a owl:Restriction ;
      owl:cardinality 1 ;
      owl:onProperty dtype:code ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Tagged Enumeration" ;
  rdfs:subClassOf qudt:Enumeration ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty dtype:code ;
  ] ;
  sh:property qudt:TaggedEnumeration-code .

qudt:TextStringType
  a owl:Class ;
  dcterms:description "A text string. Encodings can be specified as subclass or in connection to character arrays in Structured Datatypes." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Text String Type" ;
  rdfs:subClassOf qudt:StringType .

qudt:Three-Tuple
  a owl:Class ;
  dcterms:description "A three-tuple is a tuple with exactly three members. A Three-Tuple Type is a data type that defines the type properties of a class of three-tuples and their members." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Three-Tuple Type" ;
  rdfs:subClassOf qudt:N-Tuple ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 3 ;
    owl:onProperty qudt:elementType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 3 ;
    owl:onProperty qudt:elementTypeCount ;
  ] .

qudt:ThreeBodyRotatingCoordinateSystem
  a owl:Class ;
  dcterms:description "The lunar coordinate systems are primarily used when operating in close proximity to the Moon. There are, however, a few additional coordinate systems that are also useful when analyzing (and depicting) trajectories in the vicinity of the Earth-Moon system. They are rotating coordinate systems associated with two different three-body systems: the Sun-Earth-spacecraft system and the Earth-Moon-spacecraft system. The Sun-Earth and Earth-Moon rotating coordinate frames are defined as follows. The pole vector or Z-axis of the coordinate frame is set equal to the instantaneous orbit normal of the secondary (smaller) body about the primary (larger) body and the X-axis is set equal to the vector from the primary body center of mass (CM) to the secondary body CM. The X-axis rotates at a rate equal to the instantaneous rotation rate of the secondary body about the primary body." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Three Body Rotating Coordinate System Type" ;
  rdfs:subClassOf qudt:AerospaceCoordinateSystem .

qudt:ThreeTupleType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A three-tuple is a tuple with exactly three members. A Three-Tuple Type is a data type that defines the type properties of a class of three-tuples and their members." ;
  rdfs:label "Three-Tuple Type" ;
  rdfs:subClassOf qudt:N-TupleType ;
  sh:property qudt:Three-Tuple-elementType ;
  sh:property qudt:Three-Tuple-elementTypeCount .

qudt:Time
  a owl:Class, sh:NodeShape ;
  rdfs:comment "The class of data values that denote a point in time. Time values may be encoded in a 12-hour clock or a 24-hour clock, such as 1:35 AM, or 13:35." ;
  rdfs:label "Time" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:Time-type .

qudt:TimeDataType
  a owl:Class ;
  dcterms:description "A sub-type of 'QUDT Enumeration'. Detailed description to be provided in a future version." ;
  dtype:value qudt:TIME ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Time data type" ;
  rdfs:subClassOf qudt:Enumeration ;
  rdfs:subClassOf qudt:ScalarDatatype .

qudt:TimeInterval
  a owl:Class, sh:NodeShape ;
  rdfs:comment "A relative interval that is an increment in time. For example, this is used in time series arrays to express the time point of a vector of values." ;
  rdfs:label "Time interval" ;
  rdfs:subClassOf qudt:Parameter ;
  sh:property qudt:TimeInterval-type .

qudt:TimeSeriesArray
  a owl:Class ;
  dcterms:description "A Time Series Array Type is a data type that specifies the properties of arrays that hold time series data. A time series is a sequence of data points, measured at successive time intervals. The time intervals may be uniformly or non-uniformly spaced." ;
  dcterms:description "A Time Series Array Type is a data type that specifies the properties of arrays that hold time series data. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Time Series Array Type" ;
  rdfs:subClassOf qudt:Array ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:StateSpaceVector ;
    owl:onProperty <http://qudt.org/schema/type#vector> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:TimeStringType ;
    owl:onProperty <http://qudt.org/schema/type#incrementDatatype> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:dimensions ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#incrementDatatype> ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty <http://qudt.org/schema/type#vector> ;
  ] .

qudt:TimeSeriesArrayType
  a owl:Class, sh:NodeShape ;
  rdfs:comment "A Time Series Array Type is a data type that specifies the properties of arrays that hold time series data. A time series is a sequence of data points, measured at successive time intervals. The time intervals may be uniformly or non-uniformly spaced." ;
  rdfs:label "Time Series Array Type" ;
  rdfs:subClassOf qudt:ArrayType ;
  sh:property qudt:TimeSeriesArray-dimensions ;
  sh:property qudt:TimeSeriesArray-incrementDatatype ;
  sh:property qudt:TimeSeriesArray-vector .

qudt:TimeStringType
  a owl:Class ;
  dcterms:description "Time takes a number of forms, depending on the units used (e.g., year, day, minute, millisecond, or combinations thereof) and the origin (i.e., time zero) to which the time value is related." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Time Type" ;
  rdfs:subClassOf qudt:DateTimeStringType ;
  rdfs:subClassOf qudt:TextStringType .

qudt:TrajectoryCoordinateSystem
  a owl:Class ;
  dcterms:description "A \"Coordinate System\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Trajectory Coordinate System" ;
  rdfs:subClassOf qudt:AerospaceCoordinateSystem .

qudt:Tree
  a owl:Class ;
  dcterms:description "A \"Tree\" is a data type that defines the properties of data structures that represent trees. A tree is a graph data structure accessed beginning at the root node. Each node is either a leaf or an internal node. An internal node has one or more child nodes and is called the parent of its child nodes. Leaf nodes have no chidren. Nodes that share the same parent are siblings. In graph theoretic terminology, a tree is a connected, undirected, acyclic graph." ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Tree_(data_structure)> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Tree Type" ;
  rdfs:subClassOf qudt:Graph .

qudt:TreeType
  a owl:Class ;
  dcterms:description "A \"Tree\" is a data type that defines the properties of data structures that represent trees. A tree is a graph data structure accessed beginning at the root node. Each node is either a leaf or an internal node. An internal node has one or more child nodes and is called the parent of its child nodes. Leaf nodes have no chidren. Nodes that share the same parent are siblings. In graph theoretic terminology, a tree is a connected, undirected, acyclic graph." ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/Tree_(data_structure)> ;
  rdfs:label "Tree Type" ;
  rdfs:subClassOf qudt:GraphType .

qudt:Triplet
  a owl:Class ;
  dcterms:description "A \"Tuple\"." ;
  owl:equivalentClass qudt:Three-Tuple ;
  owl:equivalentClass qudt:ThreeTupleType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Triplet" ;
  rdfs:subClassOf qudt:Three-Tuple ;
  rdfs:subClassOf qudt:ThreeTupleType .

qudt:Tuple
  a owl:Class ;
  dcterms:description "<p>The term <em>Tuple</em> originated as an abstraction of the sequence: single, double, triple, quadruple, quintuple, n-tuple.  In mathematics, a tuple is a finite sequence (also known as an <em>Ordered List</em> of objects, each of a specified type. The <em>n</em> can be any non-negative integer.</p>"^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Tuple Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:TupleMember ;
    owl:onProperty qudt:elementType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:elementTypeCount ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:length ;
  ] .

qudt:TupleMember
  a owl:Class ;
  dcterms:description "A Tuple Member Type is a data type that defines the properties of a member of a tuple. It is used to provide fine grained type specification to the elements of tuples." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Tuple Member Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:ScalarDatatype ;
    owl:onProperty qudt:elementType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:orderInStructure ;
  ] .

qudt:TupleMemberType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Tuple Member Type is a data type that defines the properties of a member of a tuple. It is used to provide fine grained type specification to the elements of tuples." ;
  rdfs:label "Tuple Member Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:TupleMember-elementType ;
  sh:property qudt:TupleMember-orderInStructure .

qudt:TupleType
  a owl:Class, sh:NodeShape ;
  dcterms:description "<p>The term <em>Tuple</em> originated as an abstraction of the sequence: single, double, triple, quadruple, quintuple, n-tuple.  In mathematics, a tuple is a finite sequence (also known as an <em>Ordered List</em> of objects, each of a specified type. The <em>n</em> can be any non-negative integer.</p>"^^rdf:HTML ;
  rdfs:label "Tuple Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:Tuple-elementType ;
  sh:property qudt:Tuple-elementTypeCount ;
  sh:property qudt:Tuple-length .

qudt:Two-Tuple
  a owl:Class ;
  dcterms:description "A 2-tuple is called a pair. For example, a complex number can be represented as a 2-tuple, and 2D coordinates are sometimes represented as 2-tuples." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Two-Tuple Type" ;
  rdfs:subClassOf qudt:N-Tuple ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 2 ;
    owl:onProperty qudt:elementType ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 2 ;
    owl:onProperty qudt:elementTypeCount ;
  ] .

qudt:TwoTupleType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A 2-tuple is called a pair. For example, a complex number can be represented as a 2-tuple, and 2D coordinates are sometimes represented as 2-tuples." ;
  rdfs:label "Two-Tuple Type" ;
  rdfs:subClassOf qudt:N-TupleType ;
  sh:property qudt:Two-Tuple-elementType ;
  sh:property qudt:Two-Tuple-elementTypeCount .

qudt:TypeList
  a owl:Class ;
  dcterms:description "A sub-type of 'QUDT Datatype'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Type list" ;
  rdfs:subClassOf qudt:Datatype .

qudt:TypeMatrix
  a owl:Class, sh:NodeShape ;
  rdfs:comment "Members of this class are matrix data structures that describe the datatypes of a class of matrices. That is, the members of this class are matrices with cells that contain datatypes (c.f. type:Datatype) and are used to describe the datatype structure of other matrices." ;
  rdfs:label "Type matrix" ;
  rdfs:subClassOf qudt:MatrixType .

qudt:TypeVector
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Type Vector is a vector whose elements are data types. They are used, for instance, to specify the type of each component of a vector or class of vectors. A Type Vector Type is a further abstraction that specifies the structure of Type Vectors." ;
  rdfs:comment "A Type Vector is a vector whose elements are data types. They are used, for instance, to specify the type of each component of a vector or class of vectors. A <em>Type Vector Type</em> is a further abstraction that specifies the structure of Type Vectors."^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Type Vector Type" ;
  rdfs:label "Type vector" ;
  rdfs:subClassOf qudt:DatatypeStructuredData ;
  rdfs:subClassOf qudt:Vector ;
  rdfs:subClassOf qudt:VectorType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onClass qudt:TypeVector ;
    owl:onProperty qudt:typeVector ;
  ] ;
  sh:property qudt:TypeVector-objectValue ;
  sh:property qudt:TypeVector-type ;
  sh:property qudt:TypeVector-typeVector .

qudt:UnsignedBigIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "An Unsgned Big Integer is an unsigned integer that can be represented in eight octets (64 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Unsigned Big Integer Type" ;
  rdfs:subClassOf qudt:BigIntegerType ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "0" ;
    owl:onProperty qudt:minInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "2^{64}-1" ;
    owl:onProperty qudt:maxInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "UI64" ;
    owl:onProperty dtype:literal ;
  ] ;
  sh:property qudt:UnsignedBigIntegerType-abbreviation ;
  sh:property qudt:UnsignedBigIntegerType-maxInclusive ;
  sh:property qudt:UnsignedBigIntegerType-minInclusive .

qudt:UnsignedIntegerType
  a owl:Class ;
  dcterms:description "Unsgned Integers are integers that are either strictly non-negative or non-positive." ;
  owl:disjointWith qudt:SignedIntegerType ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:IntegerDatatype qudt:UnsignedType ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Unsigned Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf qudt:UnsignedType .

qudt:UnsignedLongIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "An Unsigned Long Integer is an unsigned integer that can be represented in four octets (32 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Unsigned Long Integer Type" ;
  rdfs:subClassOf qudt:LongIntegerType ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "0" ;
    owl:onProperty qudt:minInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "2^{32}-1" ;
    owl:onProperty qudt:maxInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "UI32" ;
    owl:onProperty dtype:literal ;
  ] ;
  sh:property qudt:UnsignedLongIntegerType-literal ;
  sh:property qudt:UnsignedLongIntegerType-maxInclusive ;
  sh:property qudt:UnsignedLongIntegerType-minInclusive .

qudt:UnsignedMediumIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "An \"Unsigned Medium Integers\" is an integer of 24 bits that only takes on both positive values." ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:IntegerDatatype qudt:SignedType ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Signed Integer Type" ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 3 ;
    owl:onProperty qudt:bytes ;
  ] .

qudt:UnsignedShortIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "An Unsigned Short Integer is an unsigned integer that can be represented in four octets (32 bits) of machine memory." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Unsigned Short Integer Type" ;
  rdfs:subClassOf qudt:ShortIntegerType ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "0" ;
    owl:onProperty qudt:minInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "2^{16}-1" ;
    owl:onProperty qudt:maxInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue "UI16" ;
    owl:onProperty dtype:literal ;
  ] ;
  sh:property qudt:UnsignedShortIntegerType-abbreviation ;
  sh:property qudt:UnsignedShortIntegerType-maxInclusive ;
  sh:property qudt:UnsignedShortIntegerType-minInclusive .

qudt:UnsignedType
  a owl:Class, sh:NodeShape ;
  dcterms:description "An unsigned data type is a numeric type that does not distinguish between positive and negative values." ;
  owl:disjointWith qudt:SignedType ;
  owl:equivalentClass [
    a owl:Class ;
    owl:intersectionOf ( qudt:NumericType [
      a owl:Restriction ;
      owl:hasValue qudt.type:Unsigned ;
      owl:onProperty qudt:signedness ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Unsigned Type" ;
  rdfs:subClassOf qudt:NumericType ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue qudt.type:Unsigned ;
    owl:onProperty qudt:signedness ;
  ] ;
  sh:property qudt:UnsignedType-signedness .

qudt:UnsignedVariableLengthIntegerType
  a owl:Class ;
  dcterms:description "An Unsigned Variable Length Integer data type defines a data structure for representing unsigned integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Unsigned Variable Length Integer Type" ;
  rdfs:subClassOf qudt:UnsignedIntegerType ;
  rdfs:subClassOf qudt:VariableLengthIntegerType .

qudt:VariableIntervalTimeSeriesArray
  a owl:Class ;
  dcterms:description "A Variable Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over non-uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals. For variable interval time series, the successive time intervals may follow a repeating pattern, or may be completely random." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Variable Interval Time Series Array Type" ;
  rdfs:subClassOf qudt:TimeSeriesArray .

qudt:VariableIntervalTimeSeriesArrayType
  a owl:Class ;
  rdfs:comment "A Variable Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over non-uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals. For variable interval time series, the successive time intervals may follow a repeating pattern, or may be completely random." ;
  rdfs:label "Variable Interval Time Series Array Type" ;
  rdfs:subClassOf qudt:TimeSeriesArrayType .

qudt:VariableLengthIntegerType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Variable Length Integer data type defines a data structure for representing integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Variable Length Integer Type" ;
  rdfs:subClassOf qudt:IntegerDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 1 ;
    owl:onProperty qudt:minBits ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 64 ;
    owl:onProperty qudt:maxBits ;
  ] ;
  sh:property qudt:VariableLengthIntegerType-maxBits ;
  sh:property qudt:VariableLengthIntegerType-minBits .

qudt:Vector
  a owl:Class ;
  dcterms:description "A Vector Type is a data type that specifies the properties of data structures that hold vectors." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Vector Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:ReferenceFrame ;
    owl:onProperty qudt:referenceFrame ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:dimension ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:hasValue 1 ;
    owl:onProperty qudt:dimensionality ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:dimensionality ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:referenceFrame ;
  ] .

qudt:VectorArray
  a owl:Class ;
  dcterms:description "A vector array is an array whose elements are all state vectors. As a data type, a vector array type is used to describe the structure of vector array valued quantities by specifying the types of the array's elements." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Vector Array Type" ;
  rdfs:subClassOf qudt:Array ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:StateSpaceVector ;
    owl:onProperty <http://qudt.org/schema/type#vector> ;
  ] .

qudt:VectorArrayType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A vector array is an array whose elements are all state vectors. As a data type, a vector array type is used to describe the structure of vector array valued quantities by specifying the types of the array's elements." ;
  rdfs:label "Vector Array Type" ;
  rdfs:subClassOf qudt:ArrayType ;
  sh:property qudt:VectorArray-vector .

qudt:VectorType
  a owl:Class, sh:NodeShape ;
  dcterms:description "A Vector Type is a data type that specifies the properties of data structures that hold vectors." ;
  rdfs:label "Vector Type" ;
  rdfs:subClassOf qudt:CompositeDatatype ;
  sh:property qudt:Vector-dimension ;
  sh:property qudt:Vector-dimensionality ;
  sh:property qudt:Vector-referenceFrame .

qudt:VehicleCoordinateSystem
  a owl:Class, sh:NodeShape ;
  dcterms:description "A sub-type of 'Aerospace coordinate system'. Detailed description to be provided in a future version." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Vehicle coordinate system" ;
  rdfs:subClassOf qudt:AerospaceCoordinateSystem ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:AxialOrientationType ;
    owl:onProperty qudt:pitchRotationDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:AxialOrientationType ;
    owl:onProperty qudt:rollRotationDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:AxialOrientationType ;
    owl:onProperty qudt:yawRotationDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:pitchRotationDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:rollRotationDefinition ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:cardinality 1 ;
    owl:onProperty qudt:yawRotationDefinition ;
  ] ;
  sh:property qudt:VehicleCoordinateSystem-pitchRotationDefinition ;
  sh:property qudt:VehicleCoordinateSystem-rollRotationDefinition ;
  sh:property qudt:VehicleCoordinateSystem-yawRotationDefinition .

qudt:VisualCue
  a owl:Class ;
  rdfs:label "Visual Cue" ;
  rdfs:subClassOf qudt:ModalCue .

qudt:WetDryStateType
  a owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Wet dry state type" ;
  rdfs:subClassOf qudt:DiscreteState ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:YesNoType
  a owl:Class ;
  rdfs:label "Yes no type" ;
  rdfs:subClassOf qudt:EnumeratedValue .

qudt:elementLabel
  a rdf:Property ;
  dcterms:description "This property is used to label the field of a composite data structure." ;
  rdfs:label "element label" .

qudt:elementType
  a owl:ObjectProperty, rdf:Property ;
  dcterms:description "This property is used to relate a structured data type with the data type the structured type's elements. It is used for structured data types with elements that are all of the same type." ;
  rdfs:comment "This property is used to relate a structured data type with the data type of the structured type's elements. It is used for homogeneous structured data types, that is, those whose elements that are all of the same type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "element type" ;
  vaem:todo "Change name to type:elementDataType" .

qudt:field
  a rdf:Property .

qudt:isComprisedOf
  a rdf:Property .

qudt:optional
  a rdf:Property ;
  rdfs:label "optional" .

qudt:value
  a rdf:Property ;
  rdfs:comment "This property identifies the value associated with a data structure. The value may be a scalar or a reference to another object. The disjoint sub-properties of this data:value distinguish between scalar values and object references." ;
  rdfs:label "value" ;
  rdfs:subPropertyOf rdf:value .

qudt:alignment
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "alignment" .

qudt:arg1Type
  a owl:ObjectProperty ;
  dcterms:description "This property relates a funciton data type with the type of its arg1." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "arg1Type" ;
  rdfs:subPropertyOf qudt:argType .

qudt:arg2Type
  a owl:ObjectProperty ;
  dcterms:description "This property relates a funciton data type with the type of its arg2." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "arg2Type" ;
  rdfs:subPropertyOf qudt:argType .

qudt:arg3Type
  a owl:ObjectProperty ;
  dcterms:description "This property relates a funciton data type with the type of its arg3." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "arg3Type" ;
  rdfs:subPropertyOf qudt:argType .

qudt:argType
  a owl:ObjectProperty ;
  dcterms:description "This property relates a function data type with the type of one of its arguments." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "argType" ;
  rdfs:subPropertyOf qudt:elementType .

qudt:auralCue
  a owl:ObjectProperty ;
  rdfs:label "aural cue" ;
  rdfs:subPropertyOf qudt:modalCue .

qudt:auralCueEnumeration
  a owl:ObjectProperty ;
  rdfs:label "aural cue enumeration" ;
  rdfs:subPropertyOf qudt:modalCueEnumeration .

qudt:basis
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "basis" .

qudt:bitOrder
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "bit order" ;
  rdfs:range qudt:EndianType .

qudt:byteOrder
  a owl:ObjectProperty ;
  dcterms:description "Byte order is an enumeration of two values: 'Big Endian' and 'Little Endian' and is used to denote whether the most signiticant byte is either first or last, respectively." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "byte order" ;
  rdfs:range qudt:EndianType .

qudt:cardinality
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "cardinality" .

qudt:coordinateCenter
  a owl:ObjectProperty ;
  rdfs:domain qudt:CoordinateSystem ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "coordinate center" ;
  rdfs:range qudt:CoordinateCenterType ;
  skos:prefLabel "coordinate center" .

qudt:coordinateSystem
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "coordinate system" .

qudt:coordinateSystemFrame
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "coordinate system frame" .

qudt:dataOrder
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "data order" .

qudt:dataType
  a owl:ObjectProperty .

qudt:dimensions
  a owl:ObjectProperty ;
  dcterms:description """The extent of each dimension making up a matrix or an array. 
  For example a 4 by 4 array has dimensions (4 4),
  whereas a vector or a string has dimensions (1).
  """ ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "dimensions" ;
  rdfs:range qudt:IntegerList .

qudt:elementKind
  a owl:ObjectProperty ;
  dcterms:description "This property is used to describe the quantity kind for a dimensional data type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "element kind" ;
  rdfs:subPropertyOf qudt:elementKind .

qudt:elementTypeList
  a owl:ObjectProperty ;
  dcterms:description "This property is used to relate a structured data type with a list of data types. The list members determine the types of structured type's elements. It is used for structured data types with elements that are of different types." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "element type list" .

qudt:elementUnit
  a owl:ObjectProperty, owl:FunctionalProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "element unit" .

qudt:encoding
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "encoding" .

qudt:enumeration
  a owl:ObjectProperty ;
  rdfs:label "enumeration" .

qudt:fieldLabels
  a owl:ObjectProperty ;
  dcterms:description "This property is used to list the field labels for a record type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "field labels" .

qudt:frameType
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "frame type" .

qudt:iconicCue
  a owl:ObjectProperty ;
  rdfs:label "iconic cue" ;
  rdfs:subPropertyOf qudt:modalCue .

qudt:iconicCueEnumeration
  a owl:ObjectProperty ;
  rdfs:label "iconic cue enumeration" ;
  rdfs:subPropertyOf qudt:modalCueEnumeration .

qudt:kinestheticCue
  a owl:ObjectProperty ;
  rdfs:label "kinesthetic cue" ;
  rdfs:subPropertyOf qudt:modalCue .

qudt:kinestheticCueEnumeration
  a owl:ObjectProperty ;
  rdfs:label "kinesthetic cue enumeration" ;
  rdfs:subPropertyOf qudt:modalCueEnumeration .

qudt:modalCue
  a owl:ObjectProperty ;
  rdfs:label "modal cue" .

qudt:modalCueEnumeration
  a owl:ObjectProperty ;
  rdfs:label "modal cue enumeration" ;
  rdfs:subPropertyOf qudt:enumeration .

qudt:modifiability
  a owl:ObjectProperty ;
  rdfs:comment "Reference to one in a list of enumerated elements that indicates whether data (e.g. variable or parameter) can be changed." ;
  rdfs:label "modifiability" .

qudt:orderedType
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "ordered type" .

qudt:orderingRelation
  a owl:ObjectProperty, owl:FunctionalProperty ;
  dcterms:description "This property identifies the mathematical comparison operator (such as \"<\" or \">\") that is used to order the elements of a collection." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Ordering Relation" .

qudt:padding
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "padding" .

qudt:pitchRotationDefinition
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "pitch rotation definition" ;
  rdfs:subPropertyOf qudt:rotationDefinition .

qudt:referenceFrame
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "reference frame" ;
  rdfs:subPropertyOf qudt:coordinateSystemFrame .

qudt:referenceFrameType
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "reference frame type" .

qudt:returnType
  a owl:ObjectProperty ;
  dcterms:description "This property is used to state the return type of a function type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "return type" ;
  rdfs:subPropertyOf qudt:elementType .

qudt:rollRotationDefinition
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "roll rotation definition" ;
  rdfs:subPropertyOf qudt:rotationDefinition .

qudt:rotationDefinition
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "rotation definition" .

qudt:signedness
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "signedness" .

qudt:timeDatatype
  a owl:ObjectProperty ;
  rdfs:label "time datatype" ;
  rdfs:subPropertyOf qudt:type .

qudt:type
  a owl:ObjectProperty ;
  rdfs:comment "A reference to the specification of the data type of a variable or constant." ;
  rdfs:label "type" .

qudt:typeMatrix
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "type matrix" .

qudt:typeVector
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "type vector" .

qudt:valueRange
  a owl:ObjectProperty ;
  rdfs:label "value range" .

qudt:valueType
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "value type" .

qudt:valueVector
  a owl:ObjectProperty ;
  rdfs:comment "A list of the values of elements in a Partial Array." ;
  rdfs:label "value vector" .

qudt:vector
  a owl:ObjectProperty ;
  rdfs:label "vector" .

qudt:visualCue
  a owl:ObjectProperty ;
  rdfs:label "visual cue" ;
  rdfs:subPropertyOf qudt:modalCue .

qudt:visualCueEnumeration
  a owl:ObjectProperty ;
  rdfs:label "visual cue enumeration" ;
  rdfs:subPropertyOf qudt:modalCueEnumeration .

qudt:yawRotationDefinition
  a owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Yaw rotation definition" ;
  rdfs:subPropertyOf qudt:rotationDefinition .

dcterms:description
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "description" .

qudt:abbreviation
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "abbreviation" .

qudt:accuracy
  a owl:DatatypeProperty, owl:FunctionalProperty ;
  dcterms:description """Accuracy is the degree to which a given quantity is correct and free from error. For example, a quantity specified as 100+/-1 has an (absolute) accuracy of +/-1 (meaning its true value can fall in the range 99-101), while a quantity specified as 100+/-2% has a (relative) accuracy of +/-2% (meaning its true value can fall in the range 98-102).

The concepts of accuracy and precision are both closely related and often confused. While the accuracy of a number x is given by the number of significant decimal (or other) digits to the right of the decimal point in x, the precision of x is the total number of significant decimal (or other) digits. """ ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "accuracy" ;
  rdfs:range xsd:integer .

qudt:allowedPattern
  a owl:DatatypeProperty ;
  dcterms:description "This property relates a date string encoding (c.f. type:DateStringEncodingType) to one or more XML Schema compliant regular expressions that together determine the allowed lexical expressions that can be unambiguously parsed to determine a temporal quantity." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "allowed pattern" ;
  rdfs:range xsd:string .

qudt:ansiSQLName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "ANSI SQL name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:base
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "base" ;
  rdfs:range xsd:integer .

qudt:bits
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "bits" ;
  rdfs:range xsd:integer .

qudt:bounded
  a owl:DatatypeProperty ;
  dcterms:description "A datatype is bounded if its value space has either a finite upper and lower bound. Either bound may be inclusive or exclusive. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "bounded" ;
  rdfs:range xsd:boolean .

qudt:byRow
  a owl:DatatypeProperty ;
  dcterms:description "A boolean to specify whether an array is presented row by row or column by column." ;
  qudt:deprecated true ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "by row" ;
  rdfs:range xsd:boolean ;
  vaem:rationale "Replaced with an enumeration. See type:ArrayDataOrderType" .

qudt:bytes
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "bytes" ;
  rdfs:range xsd:integer .

qudt:columns
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "columns" ;
  rdfs:range xsd:integer .

qudt:dimension
  a owl:DatatypeProperty ;
  dcterms:description "The number of elements in a vector." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "dimension" ;
  rdfs:range xsd:integer .

qudt:dimensionality
  a owl:DatatypeProperty ;
  dcterms:description "The number of dimensions making up a matrix or an array. For example a 4 by 4 array has a dimensionality of 2. Whereas a vector or a string has a dimensionality of 1." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "dimensionality" ;
  rdfs:range xsd:integer .

qudt:elementName
  a owl:DatatypeProperty ;
  rdfs:label "element name" .

qudt:elementTypeCount
  a owl:DatatypeProperty ;
  dcterms:description "This property determines the allowed number of element types that a structured data type may have." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "element type count" ;
  rdfs:range xsd:integer .

qudt:encodedValue
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "encoded value" .

qudt:encodingDescription
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "encoding description" ;
  rdfs:range xsd:string .

qudt:exponent
  a owl:DatatypeProperty, owl:FunctionalProperty ;
  rdfs:label "exponent" .

qudt:fieldName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "field name" ;
  rdfs:range xsd:string .

qudt:float_X
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "float X" ;
  rdfs:range xsd:anySimpleType .

qudt:float_Y
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "float Y" ;
  rdfs:range xsd:anySimpleType .

qudt:float_Z
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "float Z" ;
  rdfs:range xsd:anySimpleType .

qudt:functionArity
  a owl:DatatypeProperty ;
  dcterms:description "This property is used to state the number of arguments for a function type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "function arity" ;
  rdfs:range xsd:integer .

qudt:id
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "id" .

qudt:inverted
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "inverted" ;
  rdfs:range xsd:boolean .

qudt:isByteString
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "is byte string" ;
  rdfs:range xsd:boolean .

qudt:javaName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "java name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:jsName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Javascript name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:length
  a owl:DatatypeProperty ;
  dcterms:description "The length of a structure, for example the size of a vector" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "length" ;
  rdfs:range xsd:integer ;
  rdfs:subPropertyOf qudt:maxLength ;
  rdfs:subPropertyOf qudt:minLength .

qudt:lowerBound
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "lower bound" .

qudt:mantissa
  a owl:DatatypeProperty, owl:FunctionalProperty ;
  rdfs:comment "In scientific notation, the mantissa of a real number is the integer coefficient preceding the base raised to the exponent." ;
  rdfs:label "mantissa" .

qudt:matlabName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "matlab name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:maxBits
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "maximum bits" ;
  rdfs:range xsd:integer .

qudt:maxDepth
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "max depth" ;
  rdfs:range xsd:integer .

qudt:maxExclusive
  a owl:DatatypeProperty ;
  dcterms:description "maxExclusive is the exclusive upper bound of the value space for a datatype with the ordered property. The value of maxExclusive must be in the value space of the base type or be equal to {value} in {base type definition}." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "max exclusive" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:upperBound .

qudt:maxExponent
  a owl:DatatypeProperty, owl:FunctionalProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "max exponent" ;
  rdfs:range xsd:integer .

qudt:maxInclusive
  a owl:DatatypeProperty ;
  dcterms:description "maxInclusive is the inclusive upper bound of the value space for a datatype with the ordered property. The value of maxInclusive must be in the value space of the base type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "max inclusive" ;
  rdfs:subPropertyOf qudt:upperBound .

qudt:maxLength
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "max length" ;
  rdfs:range xsd:integer .

qudt:maxMantissa
  a owl:DatatypeProperty ;
  dcterms:description "<p>The maximium mantissa is the largest integer that may appear as a coefficient in a finite precision representation of a real number.  For a given numeric data type, the value of <em>maxMantissa}</em> (<em>M</em>) and the values of <em>base</em> (<em>b</em>) and  <em>precision</em> (<em>p</em>) are related by the formula: <em>M = b<sup></sup> - 1</em> .</p>"^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "max mantissa" ;
  rdfs:range xsd:integer .

qudt:microsoftSQLServerName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Microsoft SQL Server name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:minBits
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "minimum bits" ;
  rdfs:range xsd:integer .

qudt:minExclusive
  a owl:DatatypeProperty ;
  dcterms:description "minExclusive is the exclusive lower bound of the value space for a datatype with the ordered property. The value of minExclusive must be in the value space of the base type or be equal to {value} in {base type definition}." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "min exclusive" ;
  rdfs:subPropertyOf qudt:lowerBound .

qudt:minInclusive
  a owl:DatatypeProperty ;
  dcterms:description "minInclusive is the inclusive lower bound of the value space for a datatype with the ordered property. The value of minInclusive must be in the value space of the base type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "min inclusive" ;
  rdfs:subPropertyOf qudt:lowerBound .

qudt:minLength
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "min length" ;
  rdfs:range xsd:integer .

qudt:minMantissa
  a owl:DatatypeProperty ;
  dcterms:description "<p>The minimium mantissa is the negative integer with the greatest magnitude that may appear as a coefficient in a finite precision representation of a real number.  For a given numeric data type, the value of <em>minMantissa</em> (<em>M</em>) and the values of <em>base</em> (<em>b</em>) and <em>precision</em> (<em>p</em>) are related by the formula: <em>M = -(b<sup>p</sup> - 1)</em>.</p>"^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "min mantissa" ;
  rdfs:range xsd:integer .

qudt:minValue
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "minimum value" .

qudt:mySQLName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "MySQL name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:octets
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "octets" ;
  rdfs:range xsd:integer .

qudt:odbcName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "ODBC name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:oleDBName
  a owl:DatatypeProperty ;
  dcterms:description "OLE DB (Object Linking and Embedding, Database, sometimes written as OLEDB or OLE-DB), an API designed by Microsoft, allows accessing data from a variety of sources in a uniform manner. The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE. " ;
  prov:wasInfluencedBy <http://en.wikipedia.org/wiki/OLE_DB> ;
  prov:wasInfluencedBy <http://msdn.microsoft.com/en-us/library/windows/desktop/ms714931(v=vs.85).aspx> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "OLE DB name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:oracleSQLName
  a owl:DatatypeProperty ;
  rdfs:domain qudt:Datatype ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "ORACLE SQL name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:orderInStructure
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "order in structure" .

qudt:originDefinition
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "origin definition" ;
  rdfs:range xsd:string .

qudt:pattern
  a owl:DatatypeProperty ;
  dcterms:description "A pattern is a constraint on the value space of a datatype which is achieved by constraining the lexical space to literals which match a specific pattern. The value of pattern must be a regular expression." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "pattern" ;
  rdfs:range xsd:string .

qudt:precision
  a owl:DatatypeProperty, owl:FunctionalProperty ;
  dcterms:description """Precision is the number of digits used to perform a given computation. The concepts of accuracy and precision are both closely related and often confused. While the accuracy of a number x is given by the number of significant decimal (or other) digits to the right of the decimal point in x, the precision of x is the total number of significant decimal (or other) digits.

For a given numeric data type, the value of type:precision (?p) is related to the values of type:maxMantissa (?M) and type:base (?b) by the formula 

?p := log(?b, ?M) 

where log(a,y) = x iff y=a^x.""" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "precision" ;
  rdfs:range xsd:integer .

qudt:protocolBuffersName
  a owl:DatatypeProperty ;
  rdfs:label "protocol buffers name" ;
  rdfs:subPropertyOf qudt:id .

qudt:pythonName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "python name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:rdfsDatatype
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "rdfs datatype" .

qudt:realization
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "realization" ;
  rdfs:range xsd:string .

qudt:rgbCode
  a owl:DatatypeProperty ;
  rdfs:label "rgb code" .

qudt:rows
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "rows" ;
  rdfs:range xsd:integer .

qudt:significantDigits
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "significant digits" ;
  rdfs:range xsd:integer .

qudt:sound
  a owl:DatatypeProperty ;
  rdfs:comment "The intended use of the sound property is to be associated with modal enumerations" ;
  rdfs:label "sound" .

qudt:stringValue
  a owl:DatatypeProperty ;
  rdfs:label "string value" ;
  rdfs:subPropertyOf qudt:scalarValue .

qudt:totalDigits
  a owl:DatatypeProperty ;
  rdfs:label "total digits" .

qudt:upperBound
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "upper bound" ;
  rdfs:range xsd:anySimpleType .

qudt:vbName
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Visual Basic name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf qudt:id .

qudt:xAxisDefinition
  a owl:DatatypeProperty ;
  dcterms:description "The definition of the X-Axis could be an intersection, cross-product or other function of a  meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "X-Axis Definition" ;
  rdfs:range xsd:string .

qudt:xCoordinateDefinition
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "X-Coordinate definition" ;
  rdfs:range xsd:string .

qudt:yAxisDefinition
  a owl:DatatypeProperty ;
  dcterms:description "The definition of the Y-Axis could be an intersection, cross-product or other function of a meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Y-Axis definition" ;
  rdfs:range xsd:string .

qudt:yCoordinateDefinition
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Y-Coordinate definition" ;
  rdfs:range xsd:string .

qudt:zAxisDefinition
  a owl:DatatypeProperty ;
  dcterms:description "The definition of the Y-Axis could be an intersection, croos-product or other function of a meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Z-Axis definition" ;
  rdfs:range xsd:string .

qudt:zCoordinateDefinition
  a owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Z-Coordinate definition" ;
  rdfs:range xsd:string .

dcterms:contributor
  a owl:AnnotationProperty ;
  rdfs:label "contributor" ;
  rdfs:range xsd:string .

dcterms:creator
  a owl:AnnotationProperty ;
  rdfs:label "creator" ;
  rdfs:range xsd:string .

dcterms:rights
  a owl:AnnotationProperty ;
  rdfs:label "rights" ;
  rdfs:range xsd:string .

dcterms:subject
  a owl:AnnotationProperty ;
  rdfs:label "subject" ;
  rdfs:range xsd:string .

dcterms:title
  a owl:AnnotationProperty ;
  rdfs:label "title" ;
  rdfs:range xsd:string .

qudt:defaultValue
  a owl:AnnotationProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Default Value" .

dtype:GMD_DTYPE
  dcterms:description "The ontology \"dtype\" provides a specification of simple data types such as enumerations and codelists. These are needed in support of the conversion of XML Schemas and UML Models to OWL. The purpose of \"dtype\" is to provide a foundation for expressing rich data types. These data types are typically needed when dealing with OWL representations of data structures derived from XML Schema." .

<http://qudt.org/schema/datatype/GMD_datatype>
  a vaem:GraphMetaData ;
  dcterms:description "The QUDT 'Datatype' ontology is a specification of scalar and structured data types. Scalar data types are defined for all the commonly encountered forms of numbers, characters and booleans, with their representations in a number of vendor and industry specific technologies. Structured data types cover arrays, lists, trees and many other forms of composite data elements. Specification of coordinate systems is also covered." ;
  dcterms:modified "1234-12-12T12:34:56Z"^^xsd:dateTime ;
  dcterms:rights "The QUDT Ontologies are issued under a Creative Commons Attribution 4.0 International License (CC BY 4.0), available at https://creativecommons.org/licenses/by/4.0/. Attribution should be made to QUDT.org" ;
  dcterms:subject "Datatypes" ;
  rdfs:label "QUDT Schema for Datatypes - Version $$QUDT_VERSION$$" ;
  vaem:graphTitle "QUDT Schema for Datatypes - Version $$QUDT_VERSION$$" ;
  vaem:hasGraphRole vaem:SchemaGraph ;
  vaem:isMetadataFor <http://qudt.org/2.1/schema/datatype> ;
  vaem:latestPublishedVersion "https://qudt.org/doc/$$CURRENT_YEAR$$/$$CURRENT_MONTH$$/DOC_SCHEMA-DATATYPES.html"^^xsd:anyURI ;
  vaem:logo "https://qudt.org/linkedmodels.org/assets/lib/lm/images/logos/qudt_logo-300x110.png"^^xsd:anyURI ;
  vaem:name "QUDT" ;
  vaem:namespace "http://qudt.org/schema/qudt/"^^xsd:anyURI ;
  vaem:namespacePrefix "qudt" ;
  vaem:owner "QUDT.ORG" ;
  vaem:previousPublishedVersion "https://qudt.org/doc/$$QUDT_PREV_RELEASE_YEAR$$/$$QUDT_PREV_RELEASE_MONTH$$/DOC_SCHEMA-DATATYPES.html"^^xsd:anyURI ;
  vaem:publishedDate "2017-05-10"^^xsd:date ;
  vaem:releaseDate "2016-05-09"^^xsd:date ;
  vaem:title "QUDT Schema for Datatypes - Version $$QUDT_VERSION$$" ;
  vaem:turtleFileURL "http://qudt.org/2.1/schema/datatype.ttl"^^xsd:anyURI ;
  vaem:usesNonImportedResource dcterms:abstract ;
  vaem:usesNonImportedResource dcterms:created ;
  vaem:usesNonImportedResource dcterms:creator ;
  vaem:usesNonImportedResource dcterms:modified ;
  vaem:usesNonImportedResource dcterms:rights ;
  vaem:usesNonImportedResource dcterms:title ;
  vaem:usesNonImportedResource <http://voag.linkedmodel.org/voag#QUDT-Attribution> ;
  vaem:withAttributionTo <http://voag.linkedmodel.org/voag#QUDT-Attribution> .

qudt:ArrayIndex-elementType
  a sh:PropertyShape ;
  sh:datatype xsd:nonNegativeInteger ;
  sh:hasValue qudt:UNSIGNED-INTEGER ;
  sh:path qudt:elementType .

qudt:ArrayType-byRow
  a sh:PropertyShape ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:byRow .

qudt:ArrayType-dataOrder
  a sh:PropertyShape ;
  sh:class qudt:ArrayDataOrderType ;
  sh:maxCount 1 ;
  sh:path qudt:dataOrder .

qudt:ArrayType-dimensionality
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:dimensionality .

qudt:ArrayType-dimensions
  a sh:PropertyShape ;
  sh:class qudt:DimensionVector ;
  sh:maxCount 1 ;
  sh:path qudt:dimensions .

qudt:ArrayType-typeMatrix
  a sh:PropertyShape ;
  sh:class qudt:TypeMatrix ;
  sh:maxCount 1 ;
  sh:path qudt:typeMatrix .

qudt:Article
  a qudt:PubEnumeratedType ;
  dtype:literal "article" ;
  rdfs:label "Pub article type" .

qudt:AuralCue-sound
  a sh:PropertyShape ;
  sh:datatype xsd:anyURI ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:sound .

qudt:AuralCueEnumeration-defaultValue
  a sh:PropertyShape ;
  sh:class qudt:AuralCue ;
  sh:path qudt:defaultValue .

qudt:BOOLEAN
  a qudt:BooleanType ;
  dcterms:description "In computer science, the Boolean or logical data type is a data type, having two values (usually denoted true and false), intended to represent the truth values of logic and Boolean algebra. The Boolean data type is the primary result of conditional statements, which allow different actions and change control flow depending on whether a programmer-specified boolean condition evaluates to true or false."^^rdf:HTML ;
  dtype:literal "boolean" ;
  prov:wasInfluencedBy "http://en.wikipedia.org/wiki/Boolean%5Fdata%5Ftype"^^xsd:anyURI ;
  prov:wasInfluencedBy "http://msdn.microsoft.com/en-us/library/aa275635(v=sql.80).aspx"^^xsd:anyURI ;
  qudt:ansiSQLName "BOOLEAN" ;
  qudt:encoding qudt:BooleanEncoding ;
  qudt:javaName "boolean" ;
  qudt:jsName "Boolean()" ;
  qudt:microsoftSQLServerName "bit" ;
  qudt:mySQLName "BOOL" ;
  qudt:mySQLName "BOOLEAN" ;
  qudt:mySQLName "TINYINT(1)" ;
  qudt:odbcName "SQL_BIT" ;
  qudt:oleDBName "DBTYPE_BOOL" ;
  qudt:oracleSQLName "RAW(1)" ;
  qudt:protocolBuffersName "bool" ;
  qudt:pythonName "bool" ;
  qudt:rdfsDatatype xsd:boolean ;
  rdfs:label "BOOLEAN" .

qudt:BYTE
  a qudt:SignedShortIntegerType ;
  dcterms:description "The byte data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive). The byte data type can be useful for saving memory in large arrays, where the memory savings actually matters. They can also be used in place of int where their limits help to clarify your code; the fact that a variable's range is limited can serve as a form of documentation."^^rdf:HTML ;
  dtype:literal "byte" ;
  prov:wasInfluencedBy "http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"^^xsd:anyURI ;
  qudt:abbreviation "SI8" ;
  qudt:cName "Byte" ;
  qudt:encoding qudt:OctetEncoding ;
  qudt:maxInclusive 127 ;
  qudt:minInclusive -128 ;
  qudt:octets 1 ;
  qudt:rdfsDatatype xsd:byte ;
  qudt:signedness qudt:SIGNED ;
  rdfs:label "Byte" .

qudt:BalancedTree-maxDepth
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:maxDepth .

qudt:BigEndian
  a qudt:EndianType ;
  dtype:literal "big" ;
  rdfs:label "Big Endian" .

qudt:BigIntegerType-octets
  a sh:PropertyShape ;
  sh:hasValue 8 ;
  sh:or qudt:IntegerUnionList ;
  sh:path qudt:octets .

qudt:BitAligned
  a qudt:AlignmentType ;
  dtype:literal "bit" ;
  rdfs:label "Bit Aligned" .

qudt:BitField
  a owl:DataRange, rdfs:Datatype ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "bitfield" ;
  rdfs:subClassOf xsd:string .

qudt:BitField01
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B1" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 1 ;
    ] [
      xsd:pattern "[0-1]" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf1" ;
  qudt:bits 1 ;
  qudt:mySQLName "BIT(1)" ;
  rdfs:label "Bit Field of 1 bit" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField02
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B2" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 2 ;
    ] [
      xsd:pattern "[0-1]{2}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf2" ;
  qudt:bits 2 ;
  qudt:mySQLName "BIT(2)" ;
  rdfs:label "Bit Field of 2 bits" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField03
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B3" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 3 ;
    ] [
      xsd:pattern "[0-1]{3}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf3" ;
  qudt:bits 3 ;
  qudt:mySQLName "BIT(3)" ;
  rdfs:label "Bit Field of 3 bits" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField04
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B4" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 4 ;
    ] [
      xsd:pattern "[0-1]{4}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf4" ;
  qudt:bits 4 ;
  qudt:mySQLName "BIT(4)" ;
  rdfs:label "Bit Field of 4 bits" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField05
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B5" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 5 ;
    ] [
      xsd:pattern "[0-1]{5}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf5" ;
  qudt:bits 5 ;
  qudt:mySQLName "BIT(5)" ;
  rdfs:label "Bit Field of 5 bits" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField06
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B6" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 6 ;
    ] [
      xsd:pattern "[0-1]{6}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf6" ;
  qudt:bits 6 ;
  qudt:mySQLName "BIT(6)" ;
  qudt:rdfsDatatype qudt:BitField06 ;
  rdfs:label "Bit Field of 6 bits" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField07
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B7" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 7 ;
    ] [
      xsd:pattern "[0-1]{7}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf7" ;
  qudt:bits 7 ;
  qudt:mySQLName "BIT(7)" ;
  qudt:rdfsDatatype qudt:BitField07 ;
  rdfs:label "Bit Field of 7 bits" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField08
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B8" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 8 ;
    ] [
      xsd:pattern "[0-1]{8}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf8" ;
  qudt:bits 8 ;
  qudt:mySQLName "BIT(8)" ;
  qudt:rdfsDatatype qudt:BitField08 ;
  rdfs:label "Bit Field of 8 bits" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField09
  a qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B9" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 9 ;
    ] [
      xsd:pattern "[0-1]{9}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf9" ;
  qudt:bits 9 ;
  qudt:mySQLName "BIT(9)" ;
  qudt:rdfsDatatype qudt:BitField09 ;
  rdfs:label "Bit Field of 9 bits" ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField10
  a owl:DataRange, qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B10" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 10 ;
    ] [
      xsd:pattern "[0-1]{10}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf10" ;
  qudt:bitOrder qudt:BigEndian ;
  qudt:bits 10 ;
  qudt:byteOrder qudt:BigEndian ;
  qudt:mySQLName "BIT(10)" ;
  qudt:rdfsDatatype qudt:BitField10 ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Bit Field Of 10 Bits" ;
  rdfs:subClassOf qudt:BitField ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField11
  a owl:DataRange, qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B11" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 11 ;
    ] [
      xsd:pattern "[0-1]{11}" ;
    ] ) ;
  ] ;
  prov:wasInfluencedBy "http://dev.mysql.com/doc/refman/5.0/en/bit-type.html"^^xsd:anyURI ;
  qudt:abbreviation "bf11" ;
  qudt:bits 11 ;
  qudt:mySQLName "BIT(11)" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Bit Field Of 11 Bits" ;
  rdfs:subClassOf qudt:BitField ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitField12
  a owl:DataRange, qudt:BitFieldType, rdfs:Datatype ;
  dtype:literal "B12" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 12 ;
    ] [
      xsd:pattern "[0-1]{12}" ;
    ] ) ;
  ] ;
  qudt:abbreviation "bf12" ;
  qudt:bits 12 ;
  qudt:mySQLName "BIT(12)" ;
  qudt:rdfsDatatype qudt:BitField12 ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Bit Field of 12 bits" ;
  rdfs:subClassOf qudt:BitField ;
  rdfs:subClassOf rdfs:Literal .

qudt:BitFieldType-encodedValue
  a sh:PropertyShape ;
  sh:class qudt:BitField ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:encodedValue .

qudt:Book
  a qudt:PubEnumeratedType ;
  dtype:literal "book" ;
  rdfs:label "Pub book type" .

qudt:Booklet
  a qudt:PubEnumeratedType ;
  dtype:literal "booklet" ;
  rdfs:label "Pub booklet type" .

qudt:BooleanEncoding
  a qudt:BooleanEncodingType ;
  rdfs:label "Boolean Encoding" .

qudt:BooleanType-encoding
  a sh:PropertyShape ;
  sh:class qudt:BooleanEncodingType ;
  sh:path qudt:encoding .

qudt:ByColumn
  a qudt:ArrayDataOrderType ;
  dtype:literal "byColumn" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "By Column" .

qudt:ByLeftMostIndex
  a qudt:ArrayDataOrderType ;
  dtype:literal "byLeftMostIndex" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "By Left Most Index" .

qudt:ByRow
  a qudt:ArrayDataOrderType ;
  dtype:literal "byRow" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "By Row" .

qudt:ByteAligned
  a qudt:AlignmentType ;
  dtype:literal "byte" ;
  rdfs:label "Byte Aligned" .

qudt:CCT_EarthCentered
  a qudt:CoordinateCenterType ;
  rdfs:label "Earth-centered Coordinate System Type" .

qudt:CCT_MarsCentered
  a qudt:CoordinateCenterType ;
  rdfs:label "Mars-centered Coordinate System Type" .

qudt:CCT_MoonCentered
  a qudt:CoordinateCenterType ;
  rdfs:label "Moon-centered Coordinate System Type" .

qudt:CCT_SunCentered
  a qudt:CoordinateCenterType ;
  rdfs:label "Sun-centered Coordinate System Type" .

qudt:CCT_VehicleCentered
  a qudt:CoordinateCenterType ;
  rdfs:label "Vehicle-centered Coordinate System Type" .

qudt:CFN_ConcatenateMatrixRows
  a qudt:CompositionFunction ;
  rdfs:label "Concatenate matrix rows" .

qudt:COLOR_AMBER
  a qudt:ColorCue ;
  qudt:literal "amber" ;
  qudt:rgbCode "#FFBF00" ;
  rdfs:label "Amber Color" .

qudt:COLOR_GREEN
  a qudt:ColorCue ;
  qudt:literal "green" ;
  qudt:rgbCode "#008000" ;
  rdfs:label "Green color" .

qudt:COLOR_ORANGE
  a qudt:ColorCue ;
  qudt:literal "orange" ;
  qudt:rgbCode "#FFA500" ;
  rdfs:label "Orange color" .

qudt:COLOR_RED
  a qudt:ColorCue ;
  qudt:literal "red" ;
  qudt:rgbCode "#FF0000" ;
  rdfs:label "Red color" .

qudt:COLOR_YELLOW
  a qudt:ColorCue ;
  qudt:literal "yellow" ;
  qudt:rgbCode "#FFFF00" ;
  rdfs:label "Yellow color" .

qudt:CRC32
  a owl:DataRange, rdfs:Datatype ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:integer ;
    owl:withRestrictions ( [
      xsd:minInclusive 0 ;
    ] [
      xsd:maxInclusive "4294967295"^^xsd:unsignedInt ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "CRC-32" ;
  rdfs:subClassOf xsd:integer .

qudt:CharEncoding
  a qudt:BooleanEncodingType, qudt:CharEncodingType ;
  dc:description "7 bits of 1 octet" ;
  qudt:bytes 1 ;
  rdfs:label "Char Encoding" .

qudt:ColorCue-rgbCode
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:rgbCode .

qudt:CompositeDataStructure-dataElement
  a sh:PropertyShape ;
  sh:class qudt:DataSetElement ;
  sh:path qudt:field .

qudt:CompositeDatatype-alignment
  a sh:PropertyShape ;
  sh:class qudt:AlignmentType ;
  sh:path qudt:alignment .

qudt:CompositeDatatype-elementType
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:path qudt:elementType .

qudt:CompositeDatatype-padding
  a sh:PropertyShape ;
  sh:class qudt:PaddingType ;
  sh:maxCount 1 ;
  sh:path qudt:padding .

qudt:CompositionTreeType-compositionFunction
  a sh:PropertyShape ;
  sh:class qudt:CompositionFunction ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:function .

qudt:Conference
  a qudt:PubEnumeratedType ;
  dtype:literal "conference" ;
  rdfs:label "Pub techreport type" .

qudt:Container-elementTypeCount
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:hasValue 1 ;
  sh:path qudt:elementTypeCount .

qudt:CoordinateSystem-abbreviation
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:abbreviation .

qudt:CoordinateSystem-acronym
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path vaem:acronym .

qudt:CoordinateSystem-coordinateCenter
  a sh:PropertyShape ;
  sh:class qudt:CoordinateCenterType ;
  sh:maxCount 1 ;
  sh:path qudt:coordinateCenter .

qudt:CoordinateSystem-referenceFrame
  a sh:PropertyShape ;
  sh:class qudt:ReferenceFrame ;
  sh:maxCount 1 ;
  sh:path qudt:referenceFrame .

qudt:CoordinateSystemType-originDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:originDefinition .

qudt:Coordinates-2D-DoublePrecision-Double_X
  a sh:PropertyShape ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:Double_X .

qudt:Coordinates-2D-DoublePrecision-Double_Y
  a sh:PropertyShape ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:Double_Y .

qudt:Coordinates-2D-SinglePrecision-float_X
  a sh:PropertyShape ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_X .

qudt:Coordinates-2D-SinglePrecision-float_Y
  a sh:PropertyShape ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_Y .

qudt:Coordinates-3D-DoublePrecision-Double_X
  a sh:PropertyShape ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:Double_X .

qudt:Coordinates-3D-DoublePrecision-Double_Y
  a sh:PropertyShape ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:Double_Y .

qudt:Coordinates-3D-DoublePrecision-Double_Z
  a sh:PropertyShape ;
  sh:datatype xsd:double ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:Double_Z .

qudt:Coordinates-3D-DoublePrecision-Type
  a qudt:Coordinates-3D-Type ;
  dcterms:description "3D coordinates in double floating point precision for locating a point in physical space" ;
  qudt:elementTypeCount 3 ;
  rdfs:label "3D Coordinates (Double Precision) type" .

qudt:Coordinates-3D-SinglePrecision-Type
  a qudt:Coordinates-3D-Type ;
  dcterms:description "3D coordinates in single floating point precision for locating a point in physical space" ;
  qudt:elementTypeCount 3 ;
  rdfs:label "3D Coordinates (Single Precision)" .

qudt:Coordinates-3D-SinglePrecision-float_X
  a sh:PropertyShape ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_X .

qudt:Coordinates-3D-SinglePrecision-float_Y
  a sh:PropertyShape ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_Y .

qudt:Coordinates-3D-SinglePrecision-float_Z
  a sh:PropertyShape ;
  sh:datatype xsd:float ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:float_Z .

qudt:Coordinates-elementType
  a sh:PropertyShape ;
  sh:class qudt:CoordinateMember ;
  sh:path qudt:elementType .

qudt:DATE
  a qudt:DateStringType ;
  dcterms:description "Provides the date expressed in year, month and day."^^rdf:HTML ;
  dtype:literal "date" ;
  qudt:dimensionality 1 ;
  qudt:encodingDescription "YYYY:MM:DD, where YYYY is a 4 digit year, MM is a 2 digit month and DD is a 2 digit day." ;
  qudt:rdfsDatatype xsd:date ;
  rdfs:label "Date" .

qudt:DATETIME
  a qudt:DateStringType ;
  dcterms:description "A time stamp encoded as a string 'YYYY-MM-DDThh:mm:ss[.dd]' or 'YYYY-DDDThh:mm:ss[.dd]', where 'YYYY' is the year, 'MM' is the two-digit month, 'DD' is the two-digit day, 'DDD' is the three digit day of year, 'T' is constant, 'hh:mm:ss[.dd]' is the UTC time in hours, minutes, seconds, and optional fractional seconds. As many 'd' characters to the right of the period as required may be used to obtain the required precision. All fields require leading zeros."^^rdf:HTML ;
  dtype:literal "datetime" ;
  qudt:dimensionality 1 ;
  qudt:exactMatch qudt:UTC-DATETIME ;
  qudt:rdfsDatatype xsd:dateTime ;
  rdfs:label "Date Time" .

qudt:DECIMAL
  a qudt:NumericType ;
  dtype:literal "numeric" ;
  qudt:ansiSQLName "DECIMAL(p,s)" ;
  qudt:odbcName "SQL_DECIMAL(p,s)" ;
  qudt:oracleSQLName "NUMBER(p,s)" ;
  qudt:rdfsDatatype xsd:decimal ;
  rdfs:label "Decimal" .

qudt:DataElement-type
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:dataType .

qudt:DataSetElement-elementLabel
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:elementLabel .

qudt:DataSetElement-optional
  a sh:PropertyShape ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:optional .

qudt:DataSetElement-quantityKind
  a sh:PropertyShape ;
  sh:class qudt:QuantityKind ;
  sh:maxCount 1 ;
  sh:path qudt:hasQuantityKind .

qudt:Datatype-ansiSQLName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:ansiSQLName .

qudt:Datatype-basis
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:path qudt:basis .

qudt:Datatype-bounded
  a sh:PropertyShape ;
  sh:class xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:bounded .

qudt:Datatype-cName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:cName .

qudt:Datatype-cardinality
  a sh:PropertyShape ;
  sh:class qudt:CardinalityType ;
  sh:maxCount 1 ;
  sh:path qudt:cardinality .

qudt:Datatype-description
  a sh:PropertyShape ;
  sh:deactivated true ;
  sh:maxCount 1 ;
  sh:path vaem:description .

qudt:Datatype-id
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:deactivated true ;
  sh:path qudt:id .

qudt:Datatype-javaName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:javaName .

qudt:Datatype-jsName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:jsName .

qudt:Datatype-matlabName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:matlabName .

qudt:Datatype-microsoftSQLServerName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:microsoftSQLServerName .

qudt:Datatype-mySQLName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:mySQLName .

qudt:Datatype-odbcName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:odbcName .

qudt:Datatype-oleDBName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:oleDBName .

qudt:Datatype-oracleSQLName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:oracleSQLName .

qudt:Datatype-protocolBuffersName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:protocolBuffersName .

qudt:Datatype-pythonName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:pythonName .

qudt:Datatype-vbName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:minCount 0 ;
  sh:path qudt:vbName .

qudt:DateTimeStringEncodingType-allowedPattern
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:path qudt:allowedPattern .

qudt:DateTimeStringType-encoding
  a sh:PropertyShape ;
  sh:class qudt:DateTimeStringEncodingType ;
  sh:maxCount 1 ;
  sh:path qudt:encoding .

qudt:DecimalScaledUnit
  dcterms:description "A sub-type of 'Scaled unit'. Detailed description to be provided in a future version." .

qudt:DerivedCoherentUnit
  dcterms:description "A sub-type of 'Derived Unit'. Detailed description to be provided in a future version." .

qudt:DerivedNonCoherentUnit
  dcterms:description "A sub-type of 'Derived Unit'. Detailed description to be provided in a future version." .

qudt:DoublePrecisionEncoding
  a qudt:FloatingPointEncodingType ;
  qudt:bytes 64 ;
  rdfs:label "Single Precision Real Encoding" .

qudt:EarthCoordinateSystem-coordinateCenter
  a sh:PropertyShape ;
  sh:class qudt:CoordinateCenterType ;
  sh:hasValue qudt.type:CC_EarthCentered ;
  sh:path qudt:coordinateCenter .

qudt:Encoding-bits
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:bits .

qudt:Encoding-bytes
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:bytes .

qudt:EngineeringValueTupleMember-elementType
  a sh:PropertyShape ;
  sh:class qudt:RealSinglePrecisionType ;
  sh:path qudt:elementType .

qudt:Enumeration-bits
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:bits .

qudt:Enumeration-defaultValue
  a sh:PropertyShape ;
  sh:class qudt:EnumeratedValue ;
  sh:path qudt:defaultValue .

qudt:Enumeration-encoding
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:encoding .

qudt:Enumeration-value
  a sh:PropertyShape ;
  sh:class qudt:EnumeratedValue ;
  sh:path dtype:value .

qudt:EnumerationScale
  dcterms:description "A sub-type of 'DTYPE Enumeration'. Detailed description to be provided in a future version." ;
  dcterms:description "A sub-type of 'Scale'. Detailed description to be provided in a future version." .

qudt:FALSE
  a qudt:BooleanTypeEnumeratedValue ;
  dtype:literal "false" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "False" .

qudt:FLAG
  a qudt:BooleanType ;
  dtype:literal "flag" ;
  qudt:rdfsDatatype xsd:boolean ;
  rdfs:label "FLAG" .

qudt:FT_INERTIAL
  a qudt:FrameType ;
  rdfs:label "Inertial Frame Type" .

qudt:FT_NON-ROTATING
  a qudt:FrameType ;
  rdfs:label "Non-rotating Frame Type" .

qudt:FT_ROTATING
  a qudt:FrameType ;
  rdfs:label "Rotating Frame Type" .

qudt:FieldType-elementName
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:elementName .

qudt:FieldType-elementType
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:path qudt:elementType .

qudt:FieldType-fieldLabel
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:fieldLabel .

qudt:FieldType-fieldType
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:minCount 1 ;
  sh:path qudt:fieldType .

qudt:FieldType-optional
  a sh:PropertyShape ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:optional .

qudt:Figure
  dcterms:description "A sub-type of 'QUDT Concept'. Detailed description to be provided in a future version." .

qudt:FunctionDatatype-argType
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:path qudt:argType .

qudt:FunctionDatatype-functionArity
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:functionArity .

qudt:FunctionDatatype-returnType
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:returnType .

qudt:GreekCharacter
  dcterms:description "A sub-type of 'Symbol'. Detailed description to be provided in a future version." .

qudt:HEAP
  a qudt:HeapType ;
  rdfs:label "HEAP" .

qudt:HEXBINARY
  a qudt:HexBinaryType ;
  dtype:literal "hexbinary" ;
  qudt:dimensionality 1 ;
  qudt:rdfsDatatype qudt:hexbinary ;
  rdfs:label "HEXBINARY" .

qudt:HexBinaryType-length
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:length .

qudt:HexBinaryType-maxLength
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:maxLength .

qudt:HexBinaryType-minLength
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:minLength .

qudt:HexBinaryType-pattern
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:pattern .

qudt:HighToLow
  a qudt:MemoryOrderType ;
  dtype:literal "high" ;
  rdfs:label "High To Low" .

qudt:IEEE754_1985RealEncoding
  a qudt:FloatingPointEncodingType ;
  qudt:bytes 32 ;
  rdfs:label "IEEE 754 1985 Real Encoding" .

qudt:IERS-TN-32-2004
  a qudt:Citation ;
  dcterms:description "IERS Conventions (2003), D. D. McCarthy and Gérard Petit (eds.), IERS Technical Note No. 32, 2004; http://www.iers.org/iers/publications/tn/tn32."^^rdf:HTML ;
  qudt:url "http://www.iers.org/iers/publications/tn/tn32."^^xsd:anyURI ;
  rdfs:label "IERS-TN-32-2004" ;
  skos:prefLabel "IERS-TN-32-2004" .

qudt:IMPERIAL-DimensionVector
  dcterms:description "A sub-type of 'Quantity Dimension Vector'. Detailed description to be provided in a future version." .

qudt:ISO-DimensionVector
  dcterms:description "A sub-type of 'Quantity Dimension Vector'. Detailed description to be provided in a future version." .

qudt:ISO8601-UTCDateTime-BasicFormat
  a qudt:DateTimeStringEncodingType ;
  qudt:allowedPattern "[0-9]{4}[0-9]{2}[0-9]{2}T[0-9]{2}[0-9]{2}[0-9]{2}.[0-9]+Z" ;
  qudt:allowedPattern "[0-9]{4}[0-9]{2}[0-9]{2}T[0-9]{2}[0-9]{2}[0-9]{2}Z" ;
  rdfs:label "ISO 8601 UTC Date Time - Basic Format" .

qudt:IconicCue-image
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:image .

qudt:IconicCueEnumeration-defaultValue
  a sh:PropertyShape ;
  sh:class qudt:IconicCue ;
  sh:path qudt:defaultValue .

qudt:ImperialUnit
  dcterms:description "A sub-type of 'Standards unit'. Detailed description to be provided in a future version." .

qudt:InBook
  a qudt:PubEnumeratedType ;
  dtype:literal "inbook" ;
  rdfs:label "Pub inbook type" .

qudt:InCollection
  a qudt:PubEnumeratedType ;
  dtype:literal "incollection" ;
  rdfs:label "Pub incollection type" .

qudt:InProceedings
  a qudt:PubEnumeratedType ;
  dtype:literal "inproceedings" ;
  rdfs:label "Pub inproceedings type" .

qudt:InertialCoordinateFrame-frameType
  a sh:PropertyShape ;
  sh:hasValue qudt.type:FT_NON-ROTATING ;
  sh:path qudt:frameType .

qudt:IntegerList-first
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:path rdf:first .

qudt:IntegerList-rest
  a sh:PropertyShape ;
  sh:path rdf:rest .

qudt:IntegerUnionList
  a rdf:List ;
  rdf:first [
    sh:datatype xsd:nonNegativeInteger ;
  ] ;
  rdf:rest ( [
    sh:datatype xsd:positiveInteger ;
  ] [
    sh:datatype xsd:integer ;
  ] ) ;
  rdfs:label "Integer union list" .

qudt:KinestheticCue-code
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:code .

qudt:KinestheticCueEnumeration-defaultValue
  a sh:PropertyShape ;
  sh:class qudt:KinestheticCue ;
  sh:path qudt:defaultValue .

qudt:LIST
  a qudt:List ;
  rdfs:label "LIST" .

qudt:List-first
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:path rdf:first .

qudt:List-rest
  a sh:PropertyShape ;
  sh:class qudt:List ;
  sh:path rdf:rest .

qudt:LittleEndian
  a qudt:EndianType ;
  dtype:literal "little" ;
  rdfs:label "Little Endian" .

qudt:LongIntegerType-octets
  a sh:PropertyShape ;
  sh:hasValue 4 ;
  sh:or qudt:IntegerUnionList ;
  sh:path qudt:octets .

qudt:LongUnsignedIntegerEncoding
  a qudt:IntegerEncodingType ;
  qudt:bytes 8 ;
  rdfs:label "Long Unsigned Integer Encoding" .

qudt:LowToHigh
  a qudt:MemoryOrderType ;
  dtype:literal "low" ;
  rdfs:label "Low To High" .

qudt:LunarCoordinateSystem-coordinateCenter
  a sh:PropertyShape ;
  sh:class qudt:CoordinateCenterType ;
  sh:hasValue qudt.type:CC_MoonCentered ;
  sh:path qudt:coordinateCenter .

qudt:LunarCoordinateSystem-realization
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:realization .

qudt:LunarCoordinateSystem-xAxisDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:xAxisDefinition .

qudt:LunarCoordinateSystem-yAxisDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:yAxisDefinition .

qudt:LunarCoordinateSystem-zAxisDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:zAxisDefinition .

qudt:MASS-PROPERTIES-ARRAY
  a qudt:MassPropertiesArrayType ;
  rdfs:label "MASS PROPERTIES ARRAY" .

qudt:MATRIX
  a qudt:MatrixType ;
  rdfs:label "MATRIX" .

qudt:MATRIX-TYPE_2x4
  a qudt:MatrixType ;
  qudt:byRow true ;
  qudt:columns 4 ;
  qudt:dimensionality 2 ;
  qudt:dimensions ( 2 4 ) ;
  qudt:rows 2 ;
  qudt:rows 4 ;
  rdfs:label "Matrix type  2x4" .

qudt:MKS-Unit
  dcterms:description "A sub-type of 'Standards unit'. Detailed description to be provided in a future version." .

qudt:MULTi-DIMENSIONAL-ARRAY
  a qudt:MultiDimensionalArrayType ;
  rdfs:label "MULTI-DIMENSIONAL ARRAY" .

qudt:Manual
  a qudt:PubEnumeratedType ;
  dtype:literal "manual" ;
  rdfs:label "Pub manual type" .

qudt:MarsCoordinateSystem-coordinateCenter
  a sh:PropertyShape ;
  sh:class qudt:CoordinateCenterType ;
  sh:hasValue qudt.type:CC_MarsCentered ;
  sh:path qudt:coordinateCenter .

qudt:Misc
  a qudt:PubEnumeratedType ;
  dtype:literal "misc" ;
  rdfs:label "Pub misc type" .

qudt:ModalCue-duration
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:duration .

qudt:ModalEnumeration-defaultValue
  a sh:PropertyShape ;
  sh:class qudt:ModalCue ;
  sh:path qudt:defaultValue .

qudt:MultiDimensionalDataFormat-descriptor
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:descriptor .

qudt:MultiModalEnumeration-auralCueEnumeration
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:auralCueEnumeration .

qudt:MultiModalEnumeration-iconicCueEnumeration
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:iconicCueEnumeration .

qudt:MultiModalEnumeration-kinestheticCueEnumeration
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:kinestheticCueEnumeration .

qudt:MultiModalEnumeration-modalCueEnumeration
  a sh:PropertyShape ;
  sh:class qudt:ModalEnumeration ;
  sh:path qudt:modalCueEnumeration .

qudt:MultiModalEnumeration-visualCueEnumeration
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:visualCueEnumeration .

qudt:MultiModalType-auralCue
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:auralCue .

qudt:MultiModalType-iconicCue
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:iconicCue .

qudt:MultiModalType-kinestheticCue
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:kinestheticCue .

qudt:MultiModalType-modalCue
  a sh:PropertyShape ;
  sh:class qudt:ModalCue ;
  sh:path qudt:modalCue .

qudt:MultiModalType-visualCue
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:visualCue .

qudt:N-Tuple-elementType
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:minCount 0 ;
  sh:path qudt:elementType .

qudt:NUMERIC
  a qudt:NumericType ;
  dtype:literal "numeric" ;
  qudt:ansiSQLName "DECIMAL(p,s)" ;
  qudt:odbcName "SQL_DECIMAL(p,s)" ;
  qudt:oracleSQLName "NUMBER(p,s)" ;
  rdfs:label "Numeric" .

qudt:No
  a qudt:YesNoType ;
  qudt:literal "N" ;
  rdfs:label "No" .

qudt:NonModifiableParameter
  a qudt:ParameterModifiabilityType ;
  qudt:code "0" ;
  qudt:literal "fixed" ;
  rdfs:comment "Parameter is fixed, not modifiable." ;
  rdfs:label "Non modifiable parameter" .

qudt:NonNegativeIntegerUnionList
  a rdf:List ;
  rdf:first [
    sh:datatype xsd:nonNegativeInteger ;
  ] ;
  rdf:rest ( [
    sh:datatype xsd:positiveInteger ;
  ] ) ;
  rdfs:label "Non-negative union list" .

qudt:NonRotatingInertialFrame-frameType
  a sh:PropertyShape ;
  sh:hasValue qudt.type:FT_NON-ROTATING ;
  sh:path qudt:frameType .

qudt:NumericType-accuracy
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:accuracy .

qudt:NumericType-signedness
  a sh:PropertyShape ;
  sh:class qudt:SignednessType ;
  sh:maxCount 1 ;
  sh:path qudt:signedness .

qudt:OOST_OFF
  a qudt:OnOffStateType ;
  qudt:code "0" ;
  qudt:literal "off" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Off" .

qudt:OOST_ON
  a qudt:OnOffStateType ;
  qudt:code "0" ;
  qudt:literal "on" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "On" .

qudt:OOST_ZERO-MEANS-OFF
  a qudt:OnOffStateType ;
  dtype:literal "zero-means-off" ;
  qudt:inverted true ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Zero means off" .

qudt:OOST_ZERO-MEANS-ON
  a qudt:OnOffStateType ;
  dtype:literal "zero-means-on" ;
  qudt:inverted true ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Zero means on" .

qudt:OctetEncoding
  a qudt:BooleanEncodingType, qudt:ByteEncodingType ;
  qudt:bytes 1 ;
  rdfs:label "OCTET Encoding" .

qudt:OffOnStateTypeEnumeration
  rdfs:comment "A discrete state enumeration whose values are 'off' and 'on'. The 'off' value is encoded as a zero (0) and the 'on' value as a one (1)." .

qudt:On
  a qudt:OnOffStateType ;
  qudt:code "1" ;
  qudt:literal "on" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "On" .

qudt:OnOffStateTypeEnumeration
  qudt:inverted true ;
  rdfs:comment "A discrete state enumeration whose values are 'off' and 'on'. The 'on' value is encoded as a zero (0) and the 'off' value as a one (1)." .

qudt:OneMeansOff
  a qudt:OnOffStateType ;
  qudt:inverted true ;
  qudt:literal "off" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "One means off" .

qudt:Open
  a qudt:OpenCloseStateType ;
  qudt:code "1" ;
  qudt:literal "open" ;
  rdfs:label "Open" .

qudt:OrderedCollection-first
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:path rdf:first .

qudt:OrderedCollection-orderingRelation
  a sh:PropertyShape ;
  sh:class dtype:ComparisonOperator ;
  sh:maxCount 1 ;
  sh:path qudt:orderingRelation .

qudt:OrderedCollection-rest
  a sh:PropertyShape ;
  sh:class qudt:OrderedCollectionType ;
  sh:path rdf:rest .

qudt:Organization
  dcterms:description "A sub-type of 'QUDT Concept'. Detailed description to be provided in a future version." .

qudt:PARTIAL-ARRAY
  a qudt:ArrayType ;
  rdfs:label "PARTIAL ARRAY" .

qudt:PrefixUnit
  dcterms:description "A sub-type of 'Unit'. Detailed description to be provided in a future version." .

qudt:Proceedings
  a qudt:PubEnumeratedType ;
  dtype:literal "proceedings" ;
  rdfs:label "Pub proceedings type" .

qudt:QuantityKindDimensionVector_SI
  dcterms:description "A sub-type of 'Quantity Dimension Vector'. Detailed description to be provided in a future version." .

qudt:QuantityValueType-basis
  a sh:PropertyShape ;
  sh:class qudt:QuantityType ;
  sh:path qudt:basis .

qudt:QuantityValueType-elementType
  a sh:PropertyShape ;
  sh:class qudt:NumericType ;
  sh:path qudt:elementType .

qudt:QuantityValueType-elementUnit
  a sh:PropertyShape ;
  sh:class qudt:Unit ;
  sh:maxCount 1 ;
  sh:path qudt:elementUnit .

qudt:RELATIVE-DATETIME
  a qudt:DateStringType ;
  dcterms:description "Days and time relative to some Epoch"^^rdf:HTML ;
  dtype:literal "reldate" ;
  qudt:dimensionality 1 ;
  qudt:encodingDescription "TBD" ;
  rdfs:label "Relative Date And Time" .

qudt:RN_BINARY-BASE
  a qudt:RealNumberType ;
  rdfs:comment "A rational number can be expressed in the form m*b^e, where m (the mantissa), b (the base), and e (the exponent) are integers. In this case b is chosen to be 2, and then the values of m and e are determined given this choice of base." ;
  rdfs:label "Real number binary base" .

qudt:RN_DECIMAL-BASE
  a qudt:RealNumberType ;
  rdfs:comment "A rational number can be expressed in the form m*b^e, where m (the mantissa), b (the base), and e (the exponent) are integers. In this case b is chosen to be 10, and then the values of m and e are determined given this choice of base." ;
  rdfs:label "Real number decminal base" .

qudt:RawValueTupleMember-elementType
  a sh:PropertyShape ;
  sh:class qudt:UnsignedIntegerType ;
  sh:path qudt:elementType .

qudt:RealDatatype-base
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:base .

qudt:RealDatatype-maxExponent
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:maxExponent .

qudt:RealDatatype-precision
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:precision .

qudt:ReferenceFrame-comment
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path vaem:comment .

qudt:ReferenceFrame-description
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path vaem:description .

qudt:ReferenceFrame-frameType
  a sh:PropertyShape ;
  sh:class qudt:FrameType ;
  sh:path qudt:frameType .

qudt:ReferenceFrame-realization
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:realization .

qudt:ReferenceFrame-xAxisDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:xAxisDefinition .

qudt:ReferenceFrame-xCoordinateDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:xCoordinateDefinition .

qudt:ReferenceFrame-yAxisDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:yAxisDefinition .

qudt:ReferenceFrame-yCoordinateDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:yCoordinateDefinition .

qudt:ReferenceFrame-zAxisDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:zAxisDefinition .

qudt:ReferenceFrame-zCoordinateDefinition
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
  sh:path qudt:zCoordinateDefinition .

qudt:STATE-SPACE-MATRIX
  a qudt:StateSpaceMatrixType ;
  rdfs:label "STATE SPACE MATRIX" .

qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1
  a qudt:IndexedCollectionMember ;
  qudt:index 1 ;
  qudt:next qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2 ;
  qudt:order 1 ;
  qudt:previous ( ) ;
  qudt:type qudt:FLOAT-DP ;
  rdfs:label "STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES" .

qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2
  a qudt:IndexedCollectionMember ;
  qudt:next qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3 ;
  qudt:order "2"^^xsd:int ;
  qudt:type qudt:FLOAT-DP ;
  rdfs:label "STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES" .

qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3
  a qudt:IndexedCollectionMember ;
  qudt:next qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4 ;
  qudt:order "3"^^xsd:int ;
  qudt:type qudt:FLOAT-DP ;
  rdfs:label "STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES" .

qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4
  a qudt:IndexedCollectionMember ;
  qudt:next ( ) ;
  qudt:order "4"^^xsd:int ;
  qudt:type qudt:FLOAT-DP ;
  rdfs:label "STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES" .

qudt:STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES
  a qudt:IndexedList ;
  qudt:element qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1 ;
  qudt:element qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2 ;
  qudt:element qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3 ;
  qudt:element qudt:STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4 ;
  rdfs:label "STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES" .

qudt:STATE-VECTOR_MASS-PROPERTIES
  a qudt:StateSpaceVectorType ;
  qudt:objectValue qudt:STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES ;
  qudt:type qudt:StateSpaceVectorType ;
  rdfs:label "STATE-VECTOR-MASS-PROPERTIES" .

qudt:ScalarDatatype
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom qudt:Encoding ;
    owl:onProperty qudt:encoding ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:allValuesFrom rdfs:Datatype ;
    owl:onProperty qudt:rdfsDatatype ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:bitOrder ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:bits ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:byteOrder ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:bytes ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:encoding ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:length ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:maxExclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:maxInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:minExclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:minInclusive ;
  ] ;
  rdfs:subClassOf [
    a owl:Restriction ;
    owl:maxCardinality 1 ;
    owl:onProperty qudt:rdfsDatatype ;
  ] ;
  sh:property qudt:ScalarDatatype-bitOrder ;
  sh:property qudt:ScalarDatatype-bits ;
  sh:property qudt:ScalarDatatype-byteOrder ;
  sh:property qudt:ScalarDatatype-bytes ;
  sh:property qudt:ScalarDatatype-encoding ;
  sh:property qudt:ScalarDatatype-length ;
  sh:property qudt:ScalarDatatype-maxExclusive ;
  sh:property qudt:ScalarDatatype-maxInclusive ;
  sh:property qudt:ScalarDatatype-minExclusive ;
  sh:property qudt:ScalarDatatype-minInclusive ;
  sh:property qudt:ScalarDatatype-rdfsDatatype .

qudt:ScalarDatatype-bitOrder
  a sh:PropertyShape ;
  sh:class qudt:EndianType ;
  sh:maxCount 1 ;
  sh:path qudt:bitOrder .

qudt:ScalarDatatype-bits
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:or qudt:IntegerUnionList ;
  sh:path qudt:bits .

qudt:ScalarDatatype-byteOrder
  a sh:PropertyShape ;
  sh:class qudt:EndianType ;
  sh:maxCount 1 ;
  sh:path qudt:byteOrder .

qudt:ScalarDatatype-bytes
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:or qudt:IntegerUnionList ;
  sh:path qudt:bytes .

qudt:ScalarDatatype-encoding
  a sh:PropertyShape ;
  sh:class qudt:Encoding ;
  sh:maxCount 1 ;
  sh:path qudt:encoding .

qudt:ScalarDatatype-length
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:length .

qudt:ScalarDatatype-maxExclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/schema/qudt> ;
  sh:maxCount 1 ;
  sh:or qudt:NumericUnionList ;
  sh:path qudt:maxExclusive .

qudt:ScalarDatatype-maxInclusive
  a sh:PropertyShape ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/schema/qudt> ;
  sh:maxCount 1 ;
  sh:or qudt:NumericUnionList ;
  sh:path qudt:maxInclusive .

qudt:ScalarDatatype-minExclusive
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:or qudt:NumericUnionList ;
  sh:path qudt:minExclusive .

qudt:ScalarDatatype-minInclusive
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:or qudt:NumericUnionList ;
  sh:path qudt:minInclusive .

qudt:ScalarDatatype-rdfsDatatype
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:path qudt:rdfsDatatype .

qudt:ScaledUnit
  dcterms:description "A sub-type of 'Unit'. Detailed description to be provided in a future version." .

qudt:Sequence-first
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:path rdf:first .

qudt:Sequence-rest
  a sh:PropertyShape ;
  sh:class qudt:SequenceType ;
  sh:path rdf:rest .

qudt:ShortSignedIntegerEncoding
  a qudt:IntegerEncodingType ;
  qudt:bytes 2 ;
  rdfs:label "Short Signed Integer Encoding" .

qudt:ShortUnsignedIntegerEncoding
  a qudt:BooleanEncodingType, qudt:IntegerEncodingType ;
  qudt:bytes 2 ;
  rdfs:label "Short Unsigned Integer Encoding" .

qudt:SignedBigIntegerType-literal
  a sh:PropertyShape ;
  sh:path dtype:literal .

qudt:SignedBigIntegerType-maxInclusive
  a sh:PropertyShape ;
  sh:or qudt:NumericUnionList ;
  sh:path qudt:maxInclusive .

qudt:SignedBigIntegerType-minInclusive
  a sh:PropertyShape ;
  sh:or ( [
    sh:datatype xsd:string ;
  ] [
    sh:datatype xsd:integer ;
  ] [
    sh:datatype xsd:float ;
  ] [
    sh:datatype xsd:decimal ;
  ] ) ;
  sh:path qudt:minInclusive .

qudt:SignedIntegerEncoding
  a qudt:IntegerEncodingType ;
  qudt:bytes 4 ;
  rdfs:label "Signed Integer Encoding" .

qudt:SignedLongIntegerType-abbreviation
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:hasValue "SI32" ;
  sh:path qudt:abbreviation .

qudt:SignedLongIntegerType-maxInclusive
  a sh:PropertyShape ;
  sh:or qudt:NumericUnionList ;
  sh:path qudt:maxInclusive .

qudt:SignedLongIntegerType-minInclusive
  a sh:PropertyShape ;
  sh:or ( [
    sh:datatype xsd:string ;
  ] [
    sh:datatype xsd:integer ;
  ] [
    sh:datatype xsd:float ;
  ] [
    sh:datatype xsd:decimal ;
  ] ) ;
  sh:path qudt:minInclusive .

qudt:SignedShortIntegerType-abbreviation
  a sh:PropertyShape ;
  sh:path qudt:abbreviation .

qudt:SignedType-signedness
  a sh:PropertyShape ;
  sh:path qudt:signedness .

qudt:SinglePrecisionRealEncoding
  a qudt:FloatingPointEncodingType ;
  qudt:bytes 32 ;
  rdfs:label "Single Precision Real Encoding" .

qudt:StandardsUnit
  dcterms:description "A sub-type of 'Unit'. Detailed description to be provided in a future version." .

qudt:StateSpaceVector-coordinateSystem
  a sh:PropertyShape ;
  sh:class qudt:CoordinateSystem ;
  sh:maxCount 1 ;
  sh:path qudt:coordinateSystem .

qudt:StringList-first
  a sh:PropertyShape ;
  sh:datatype xsd:string ;
  sh:path rdf:first .

qudt:StringList-rest
  a sh:PropertyShape ;
  sh:class qudt:StringList ;
  sh:path rdf:rest .

qudt:StringType-dimensionality
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:path qudt:dimensionality .

qudt:StringType-elementType
  a sh:PropertyShape ;
  sh:class qudt:CharacterType ;
  sh:path qudt:elementType .

qudt:StringType-isByteString
  a sh:PropertyShape ;
  sh:class xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:isByteString .

qudt:StringType-maxLength
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:maxLength .

qudt:StringType-typeMatrix
  a sh:PropertyShape ;
  sh:maxCount 0 ;
  sh:minCount 0 ;
  sh:path qudt:typeMatrix .

qudt:StringUTF16-elementType
  a sh:PropertyShape ;
  sh:class qudt:CharacterType ;
  sh:path qudt:elementType .

qudt:StringUTF8-elementType
  a sh:PropertyShape ;
  sh:class qudt:CharacterType ;
  sh:path qudt:elementType .

qudt:StructuredDatatype-elementType
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:path qudt:elementType .

qudt:Symbol
  dcterms:description "A sub-type of 'QUDT Concept'. Detailed description to be provided in a future version." .

qudt:SystemModifiableParameter
  a qudt:ParameterModifiabilityType ;
  qudt:code "1" ;
  qudt:literal "system" ;
  rdfs:comment "Parameter is modifiable by a (computer) system." ;
  rdfs:label "System modifiable parameter" .

qudt:TABLE-COMPOSITION-EXAMPLE-SUBTREE_1
  a qudt:Tree ;
  qudt:node qudt:TIME-SERIES-TABLE-A-2x4 ;
  rdfs:label "TABLE-COMPOSITION-EXAMPLE-SUBTREE_1" .

qudt:TABLE-COMPOSITION-EXAMPLE-SUBTREE_2
  a qudt:Tree ;
  qudt:node qudt:TIME-SERIES-TABLE-B-2x4 ;
  rdfs:label "TABLE-COMPOSITION-EXAMPLE-SUBTREE_2" .

qudt:TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_1
  a qudt:TreeListMember ;
  qudt:order "1"^^xsd:int ;
  qudt:value qudt:TABLE-COMPOSITION-EXAMPLE-SUBTREE_1 ;
  rdfs:label "TABLE-COMPOSITION-SUBTREE-1" .

qudt:TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_2
  a qudt:IndexedCollectionMember ;
  qudt:order "2"^^xsd:int ;
  qudt:value qudt:TABLE-COMPOSITION-EXAMPLE-SUBTREE_2 ;
  rdfs:label "TABLE-COMPOSITION-SUBTREE_2" .

qudt:TABLE-COMPOSTION-SUBTREE-LIST-EXAMPLE_1
  a qudt:TreeListMember ;
  qudt:element qudt:TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_1 ;
  qudt:element qudt:TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_2 ;
  rdfs:label "TABLE-COMPOSTION-SUBTREES-EXAMPLE_1" .

qudt:TABLE-TYPE_2x4
  a qudt:TableType ;
  qudt:byRow true ;
  qudt:columns 4 ;
  qudt:dimensionality 2 ;
  qudt:dimensions ( 2 4 ) ;
  qudt:rows 2 ;
  rdfs:label "Table type  2x4" .

qudt:TIME
  a qudt:TimeStringType ;
  dc:description "Time in hh:mm:ss[Z|(+|-)hh:mm]format." ;
  dtype:literal "time" ;
  qudt:dimensionality 1 ;
  qudt:rdfsDatatype xsd:time ;
  rdfs:label "TIME" .

qudt:TRUE
  a qudt:BooleanTypeEnumeratedValue ;
  dtype:literal "true" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "True" .

qudt:Table-byRow
  a sh:PropertyShape ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
  sh:path qudt:byRow .

qudt:Table-columns
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:columns .

qudt:Table-dimensionality
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:dimensionality .

qudt:Table-rows
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:rows .

qudt:TaggedEnumeration-code
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path dtype:code .

qudt:TechReport
  a qudt:PubEnumeratedType ;
  dtype:literal "techreport" ;
  rdfs:label "Pub techreport type" .

qudt:Term
  rdfs:subClassOf owl:Thing .

qudt:Three-Tuple-elementType
  a sh:PropertyShape ;
  sh:class qudt:TupleMemberType ;
  sh:minCount 0 ;
  sh:path qudt:elementType .

qudt:Three-Tuple-elementTypeCount
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:hasValue 3 ;
  sh:path qudt:elementTypeCount .

qudt:Time-type
  a sh:PropertyShape ;
  sh:class qudt:TimeStringType ;
  sh:path qudt:type .

qudt:TimeInterval-type
  a sh:PropertyShape ;
  sh:class qudt:TimeStringType ;
  sh:path qudt:type .

qudt:TimeSeriesArray-dimensions
  a sh:PropertyShape ;
  sh:class qudt:IntegerList ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:dimensions .

qudt:TimeSeriesArray-incrementDatatype
  a sh:PropertyShape ;
  sh:class qudt:TimeStringType ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:incrementDatatype .

qudt:TimeSeriesArray-vector
  a sh:PropertyShape ;
  sh:class qudt:StateSpaceVectorType ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:vector .

qudt:True
  a qudt:BooleanStateType ;
  qudt:code "1" ;
  qudt:literal "true" ;
  rdfs:label "true" .

qudt:Tuple-elementType
  a sh:PropertyShape ;
  sh:class qudt:TupleMemberType ;
  sh:path qudt:elementType .

qudt:Tuple-elementTypeCount
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:minCount 0 ;
  sh:path qudt:elementTypeCount .

qudt:Tuple-length
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:length .

qudt:TupleMember-elementType
  a sh:PropertyShape ;
  sh:class qudt:ScalarDatatype ;
  sh:path qudt:elementType .

qudt:TupleMember-orderInStructure
  a sh:PropertyShape ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:path qudt:orderInStructure .

qudt:Two-Tuple-elementType
  a sh:PropertyShape ;
  sh:minCount 0 ;
  sh:path qudt:elementType .

qudt:Two-Tuple-elementTypeCount
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:hasValue 2 ;
  sh:path qudt:elementTypeCount .

qudt:TypeVector-objectValue
  a sh:PropertyShape ;
  sh:class qudt:IndexedList ;
  sh:path qudt:objectValue .

qudt:TypeVector-type
  a sh:PropertyShape ;
  sh:class qudt:TypeVector ;
  sh:path qudt:type .

qudt:TypeVector-typeVector
  a sh:PropertyShape ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:path qudt:typeVector .

qudt:UNARY-FUNCTION
  a qudt:FunctionDatatype ;
  dcterms:description "This type identifies functions that have exactly one argument."^^rdf:HTML ;
  qudt:functionArity 1 ;
  rdfs:label "UNARY-FUNCTION" .

qudt:UTC-DATETIME
  a qudt:DateStringType ;
  dcterms:description "UTC is the time-scale maintained by the BIPM, with assistance from the IERS, which forms the basis of a coordinated dissemination of standard frequencies and time signals. It corresponds exactly in rate with  the international reference scale of atomic time (TAI) but differs from it by an integer number of seconds.  TAI, based on the second (SI), as realized on the rotating geoid, is formed by the BIPM on the basis of clock data supplied by cooperating establishments. It is in the form of a continuous scale, e.g. in days, hours, minutes and seconds from the origin 1 January, 1958 (adopted by the CGPM 1971). "^^rdf:HTML ;
  dtype:literal "utc-date" ;
  qudt:dimensionality 1 ;
  qudt:encodingDescription "YYYY-MM-DDThh:mm:ss[.dd] or YYYY-DDDThh:mm:ss[.dd], where 'YYYY' is the year, 'MM' is the two-digit month, 'DD' is the two-digit day, 'DDD' is the three digit day of year, 'T' is constant, 'hh:mm:ss[.dd]' is the UTC time in hours, minutes, seconds, and optional fractional seconds. As many 'd' characters to the right of the period as required may be used to obtain the required precision. All fields require leading zeros." ;
  qudt:exactMatch qudt:DATETIME ;
  qudt:rdfsDatatype xsd:dateTime ;
  rdfs:label "UTC Date Time" .

qudt:UTC-DAYTIME
  a qudt:DateStringType ;
  dtype:literal "utc-dayTime" ;
  qudt:dimensionality 1 ;
  qudt:encodingDescription "YYYY-DDDThh:mm:ss.ddZ, where each character is an ASCII character using one octet with the following meanings: YYYY = Year in four-character subfield with values 0001-9999, DDD = Day of year in three-character subfield with values 001-365 or -366, T =  Calendar-Time separator, hh = Hour in two-character subfield with values 00-23,  mm = Minute in two-character subfield with values 00-59, ss = Second in two-character subfield with values 00-59 (-58 or -60 during leap seconds), dd = Decimal fraction of second in one- to n-character subfield, each d has values 0-9, and Z = time code terminator (optional)" ;
  qudt:rdfsDatatype qudt:UTC-DayTime ;
  rdfs:label "UTC DAY TIME" .

qudt:UTC-DayTime
  a owl:DataRange, rdfs:Datatype ;
  dcterms:description "YYYY-DDDThh:mm:ss.ddZ, where each character is an ASCII character using one octet with the following meanings: YYYY = Year in four-character subfield with values 0001-9999, DDD = Day of year in three-character subfield with values 001-365 or -366, T =  Calendar-Time separator, hh = Hour in two-character subfield with values 00-23,  mm = Minute in two-character subfield with values 00-59, ss = Second in two-character subfield with values 00-59 (-58 or -60 during leap seconds), dd = Decimal fraction of second in one- to n-character subfield, each d has values 0-9, and Z = time code terminator (optional)" ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:length 22 ;
    ] [
      xsd:pattern "[0-9]{4}\\\\-[0-9]{3}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\\\.[0-9]{2}Z?" ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "UTC Day time" ;
  rdfs:subClassOf xsd:string .

qudt:UTF16-STRING
  a qudt:StringUTF16 ;
  dtype:literal "utf16" ;
  qudt:dimensionality 1 ;
  qudt:elementType qudt:UTF16-CHAR ;
  qudt:encoding qudt:UTF16-StringEncoding ;
  rdfs:label "UTF16 String" .

qudt:UTF16-StringEncoding
  a qudt:StringEncodingType ;
  rdfs:label "UTF-16 String" .

qudt:UTF8-STRING
  a qudt:StringUTF8 ;
  dcterms:description "String consisting of UTF-8 characters"^^rdf:HTML ;
  dtype:literal "utf8" ;
  qudt:dimensionality 1 ;
  qudt:elementType qudt:UTF8-CHAR ;
  qudt:encoding qudt:UTF8-StringEncoding ;
  qudt:exactMatch qudt:STRING ;
  rdfs:label "UTF8 String" .

qudt:UTF8-StringEncoding
  a qudt:StringEncodingType ;
  qudt:bytes 8 ;
  rdfs:label "UTF-8 Encoding" .

qudt:Unpublished
  a qudt:PubEnumeratedType ;
  dtype:literal "unpublished" ;
  rdfs:label "Pub unpublished type" .

qudt:UnsignedBigIntegerType-abbreviation
  a sh:PropertyShape ;
  sh:hasValue "UI64" ;
  sh:path qudt:abbreviation .

qudt:UnsignedBigIntegerType-maxInclusive
  a sh:PropertyShape ;
  sh:hasValue "2^{64}-1" ;
  sh:or qudt:NumericUnionList ;
  sh:path qudt:maxInclusive .

qudt:UnsignedBigIntegerType-minInclusive
  a sh:PropertyShape ;
  sh:hasValue "0" ;
  sh:or ( [
    sh:datatype xsd:string ;
  ] [
    sh:datatype xsd:integer ;
  ] [
    sh:datatype xsd:float ;
  ] [
    sh:datatype xsd:decimal ;
  ] ) ;
  sh:path qudt:minInclusive .

qudt:UnsignedIntegerEncoding
  a qudt:IntegerEncodingType ;
  qudt:bytes 4 ;
  rdfs:label "Unsigned Integer Encoding" .

qudt:UnsignedLongIntegerType-maxInclusive
  a sh:PropertyShape ;
  sh:hasValue "2^{32}-1" ;
  sh:or qudt:NumericUnionList ;
  sh:path qudt:maxInclusive .

qudt:UnsignedLongIntegerType-minInclusive
  a sh:PropertyShape ;
  sh:hasValue "0" ;
  sh:or ( [
    sh:datatype xsd:string ;
  ] [
    sh:datatype xsd:integer ;
  ] [
    sh:datatype xsd:float ;
  ] [
    sh:datatype xsd:decimal ;
  ] ) ;
  sh:path qudt:minInclusive .

qudt:UnsignedShortIntegerType-abbreviation
  a sh:PropertyShape ;
  sh:hasValue "UI16" ;
  sh:path qudt:abbreviation .

qudt:UnsignedShortIntegerType-maxInclusive
  a sh:PropertyShape ;
  sh:hasValue "2^{16}-1" ;
  sh:path qudt:maxInclusive .

qudt:UnsignedShortIntegerType-minInclusive
  a sh:PropertyShape ;
  sh:hasValue "0" ;
  sh:path qudt:minInclusive .

qudt:UnsignedType-signedness
  a sh:PropertyShape ;
  sh:class qudt:SignednessType ;
  sh:hasValue qudt:UNSIGNED ;
  sh:path qudt:signedness .

qudt:UserModifiableParameter
  a qudt:ParameterModifiabilityType ;
  qudt:code "2" ;
  qudt:literal "user" ;
  rdfs:comment "Parameter is modifiable by a user." ;
  rdfs:label "User modifiable parameter" .

qudt:VECTOR
  a qudt:VectorType ;
  qudt:dimensionality 1 ;
  rdfs:label "VECTOR" .

qudt:VECTOR_3D
  a qudt:VectorType ;
  qudt:dimensionality 1 ;
  qudt:protocolBuffersName "Vector3D" ;
  rdfs:label "VECTOR 3D" .

qudt:VariableLengthIntegerType-maxBits
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:hasValue 64 ;
  sh:path qudt:maxBits .

qudt:VariableLengthIntegerType-minBits
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:hasValue 1 ;
  sh:path qudt:minBits .

qudt:Vector-dimension
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:dimension .

qudt:Vector-dimensionality
  a sh:PropertyShape ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:path qudt:dimensionality .

qudt:Vector-referenceFrame
  a sh:PropertyShape ;
  sh:class qudt:ReferenceFrame ;
  sh:maxCount 1 ;
  sh:path qudt:referenceFrame .

qudt:VectorArray-vector
  a sh:PropertyShape ;
  sh:class qudt:StateSpaceVectorType ;
  sh:path qudt:vector .

qudt:VehicleCoordinateSystem-pitchRotationDefinition
  a sh:PropertyShape ;
  sh:class qudt:AxialOrientationType ;
  sh:maxCount 1 ;
  sh:path qudt:pitchRotationDefinition .

qudt:VehicleCoordinateSystem-rollRotationDefinition
  a sh:PropertyShape ;
  sh:class qudt:AxialOrientationType ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:rollRotationDefinition .

qudt:VehicleCoordinateSystem-yawRotationDefinition
  a sh:PropertyShape ;
  sh:class qudt:AxialOrientationType ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
  sh:path qudt:yawRotationDefinition .

qudt:VisualCueEnumeration-defaultValue
  a sh:PropertyShape ;
  sh:class qudt:VisualCue ;
  sh:path qudt:defaultValue .

qudt:WDST_DRY
  a qudt:WetDryStateType ;
  dtype:literal "dry" ;
  qudt:code "2" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Dry" .

qudt:WDST_WET
  a qudt:WetDryStateType ;
  dtype:literal "wet" ;
  qudt:code "1" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "Wet" .

qudt:WordAligned
  a qudt:AlignmentType ;
  dtype:literal "word" ;
  rdfs:label "Word Aligned" .

qudt:YDT
  a qudt:DateStringType ;
  dtype:literal "YDT" ;
  qudt:dimensionality 1 ;
  qudt:encodingDescription "TBD" ;
  qudt:rdfsDatatype xsd:string ;
  rdfs:label "Year Day Time" .

qudt:Yes
  a qudt:YesNoType ;
  qudt:literal "Y" ;
  rdfs:label "Yes" .

qudt:cName
  rdfs:subPropertyOf qudt:id .

qudt:hexbinary
  a rdfs:Datatype ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:string ;
    owl:withRestrictions ( [
      xsd:pattern "[0-9A-F]*" ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "hexbinary" ;
  rdfs:subClassOf xsd:string .

qudt:integer1to12
  a owl:DataRange, rdfs:Datatype ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:integer ;
    owl:withRestrictions ( [
      xsd:minInclusive 1 ;
    ] [
      xsd:maxInclusive 12 ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "integer 1..12" ;
  rdfs:subClassOf xsd:integer .

qudt:integer1to31
  a owl:DataRange, rdfs:Datatype ;
  owl:equivalentClass [
    a rdfs:Datatype ;
    owl:onDatatype xsd:integer ;
    owl:withRestrictions ( [
      xsd:minInclusive 1 ;
    ] [
      xsd:maxInclusive 31 ;
    ] ) ;
  ] ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/datatype> ;
  rdfs:label "integer 1..31" ;
  rdfs:subClassOf xsd:integer .

qudt:negative
  a qudt:Polarity ;
  qudt:code "1" ;
  qudt:literal "negative" ;
  rdfs:label "negative" .

qudt:positive
  a qudt:Polarity ;
  qudt:code "2" ;
  qudt:literal "positive" ;
  rdfs:label "positive" .

vaem:CollectionGraph
  dcterms:description "A \"vaem:CollectionGraph\" is a graph that aggregates other graphs using \"owl:imports\" statements." .

vaem:ConfigurationGraph
  dcterms:description "A graph that serves as a registy or provides other parameter settings." .

vaem:ConnectSetGraph
  dcterms:description "A graph that specifies mapings between external data sources and a neutral model." .

vaem:ConstraintsGraph
  dcterms:description "A graph that is for defining constraints using SPIN." .

vaem:ControllersGraph
  dcterms:description "A graph that acts as a controller in an MVC-like framework." .

vaem:CurationGraph
  dcterms:description "A graph to hold metadata that is needed to describe, govern and provision another graph. A curation graph will likely use VOAG and VAEM for this purpose. The property \"vaem:curationGraph\" is used to link to the graph (or graphs) being curated" .

vaem:DataGraph
  dcterms:description "A graph that holds data instances." .

vaem:DocumentationGraph
  dcterms:description "A graph that is soley for the purpose of generating documentation." .

vaem:FunctionsGraph
  dcterms:description "A graph that defines SPIN functions." .

vaem:GMD_VAEM
  dcterms:description "VAEM stands for \"Vocabulary for Attaching Essential Metadata\". What VAEM regards as essential metadata is data about dates and times, confidentiality, and other characterisitic qualifiers of the ontology, but also references to where a ontology is documented and where to find ontology registration for governance, attribution and provenance. VAEM makes use of some properties from the DC terms vocabulary using the namespace prefix \"dct\"." .

vaem:LinkSetGraph
  dcterms:description "A graph that holds statements that specify links between resources." .

vaem:MappingGraph
  dcterms:description "A graph that specifies a transformation of a graph into another graph or graphs. Invariably this is a SPINMap graph using SPARQL Rules (SPIN) to express the transforms." .

vaem:ProxyGraph
  dcterms:description "A graph that represents an external data source, or schema, as an ontology model." .

vaem:ReferenceDataGraph
  dcterms:description "A graph that holds reference data." .

vaem:RulesGraph
  dcterms:description "A graph that holds SPIN rules." .

vaem:SchemaGraph
  dcterms:description "A graph that defines classes and properties for one or more namespaces." .

vaem:ScriptGraph
  dcterms:description "A graph that defines SWP templates that are of a general scripting nature." .

vaem:ServicesGraph
  dcterms:description "A graph that implements SWP services." .

vaem:TransformsGraph
  dcterms:description "A graph that uses SPIN to define transforms." .

vaem:ViewGraph
  dcterms:description "A graph that provides the access to services in an MVC-like framework." .

vaem:VocabularyGraph
  dcterms:description "A graph that is a controlled set of instances that define a terminology. Typically this is based on SKOS." .

xsd:dateTime
  dcterms:description "YYYY-MM-DDThh:mm:ss[.dd] or YYYY-DDDThh:mm:ss[.dd], where 'YYYY' is the year, 'MM' is the two-digit month, 'DD' is the two-digit day, 'DDD' is the three digit day of year, 'T' is constant, 'hh:mm:ss[.dd]' is the UTC time in hours, minutes, seconds, and optional fractional seconds. As many 'd' characters to the right of the period as required may be used to obtain the required precision. All fields require leading zeros." .

[
  a owl:Restriction ;
  owl:allValuesFrom qudt:ScalarDatatype ;
  owl:onProperty qudt:encoding ;
] .

[
  a owl:Restriction ;
  owl:cardinality 1 ;
  owl:onProperty qudt:realization ;
] .

[
  a owl:Restriction ;
  owl:cardinality 1 ;
  owl:onProperty qudt:xAxisDefinition ;
] .

[
  a owl:Restriction ;
  owl:cardinality 1 ;
  owl:onProperty qudt:xAxisDefinition ;
] .

[
  a owl:Restriction ;
  owl:cardinality 1 ;
  owl:onProperty qudt:yAxisDefinition ;
] .

[
  a owl:Restriction ;
  owl:cardinality 1 ;
  owl:onProperty qudt:yAxisDefinition ;
] .

[
  a owl:Restriction ;
  owl:cardinality 1 ;
  owl:onProperty qudt:zAxisDefinition ;
] .

[
  a owl:Restriction ;
  owl:cardinality 1 ;
  owl:onProperty qudt:zAxisDefinition ;
] .

[
  a owl:Restriction ;
  owl:maxCardinality 1 ;
  owl:onProperty qudt:bitOrder ;
] .

[
  a owl:Restriction ;
  owl:maxCardinality 1 ;
  owl:onProperty qudt:byteOrder ;
] .

[
  a owl:Restriction ;
  owl:maxCardinality 1 ;
  owl:onProperty qudt:xCoordinateDefinition ;
] .

[
  a owl:Restriction ;
  owl:maxCardinality 1 ;
  owl:onProperty qudt:yCoordinateDefinition ;
] .

[
  a owl:Restriction ;
  owl:maxCardinality 1 ;
  owl:onProperty qudt:zCoordinateDefinition ;
] .


