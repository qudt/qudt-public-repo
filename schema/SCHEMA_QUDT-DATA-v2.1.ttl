# baseURI: http://qudt.org/2.1/schema/data
# imports: http://qudt.org/2.1/schema/qudt

@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://qudt.org/2.0/schema/data>
  rdf:type owl:Ontology ;
  dcterms:contributor "Daniel Mekonnen" ;
  dcterms:contributor "James Masters" ;
  dcterms:creator "Irene Polikoff" ;
  dcterms:creator "Ralph Hodgson" ;
  dcterms:date "$Date: 2010-08-25 18:05:57 -0700 (Wed, 25 Aug 2010) $" ;
  dcterms:rights "<p>This ontology is issued under a restricted copyright license that prohibits reproduction, distribution, copying and any other form of sharing. The license agreement can be found at <a href='http://www.topquadrant.com/docs/legal/EULA.pdf'>http://www.topquadrant.com/docs/legal/EULA.pdf.</p>"^^rdf:HTML ;
  dcterms:subject "Data Structures" ;
  dcterms:title "The QUDT Data Ontology" ;
  qudd:intent "This ontology is to be used by other ontologies to specify data type definitions, hiearchies and constraints." ;
  qudd:namespace "http://qudt.org/schema/datastructure/" ;
  qudd:namespacePrefix "quds" ;
  qudd:role qudd:Schema ;
  qudd:specificity "1"^^xsd:int ;
  rdfs:comment "The n1data ontology defines classes, individuals and properties relevant to data types." ;
  rdfs:label "QUDT Data Structures" ;
  owl:imports <http://qudt.org/2.1/schema/datatype> ;
  owl:imports <http://qudt.org/2.1/schema/qudt> ;
.
<http://qudt.org/2.1/schema/data>
  rdf:type owl:Ontology ;
  owl:imports <http://qudt.org/2.1/schema/qudt> ;
.
qudd:numeric
  rdfs:label "numeric" ;
.
qudt:AbnormalCondition
  rdf:type owl:Class ;
  rdfs:comment "A subclass of data:Condition whose instances indicate that a system or situation is in an abnormal (i.e. non-functioning, stuck open, stuck closed, error state) condition. This class has at least the following instance(s): \"Valve stuck closed\", \"Valve stuck open\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Abnormal Condition" ;
  rdfs:subClassOf qudt:Condition ;
.
qudt:Array
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An array is a data structure consisting of a group of elements that are accessed by indexing. Typically, the elements of an array have the same data type, however this is not strictly enforced in all programming languages." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Array" ;
  rdfs:subClassOf qudt:StructuredData ;
  rdfs:subClassOf rdf:Seq ;
  sh:property qudt:Array-element ;
  sh:property qudt:Array-type ;
  sh:property qudt:Array-value ;
.
qudt:Array-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Object ;
.
qudt:Array-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:ArrayType ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
.
qudt:Array-value
  rdf:type sh:PropertyShape ;
  sh:path qudt:value ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:List ;
.
qudt:Ascii
  rdf:type qudt:FileFormat ;
  qudd:literal "ascii" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Ascii" ;
.
qudt:Attribute
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An attribute is a specification that defines a property of an object, element, or file. An attribute of an object usually consists of a name and a value." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Attribute" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:Attribute-type ;
  sh:property qudt:Attribute-value ;
.
qudt:Attribute-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:Attribute-value
  rdf:type sh:PropertyShape ;
  sh:path qudt:value ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
.
qudt:AxisType
  rdf:type owl:Class ;
  rdfs:comment "The elements of data:AxisType are used to identify which axis in a coordinate system is associated with a particular object or measurment. This class contains at minimum the following instances: \"X-Axis\", \"Y-Axis\", \"Z-Axis\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Axis type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
.
qudt:AxisTypeEnumeration
  rdf:type qudt:Enumeration ;
  qudt:element qudt:X-Axis ;
  qudt:element qudt:Y-Axis ;
  qudt:element qudt:Z-Axis ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Data Axis Type Enumeration" ;
.
qudt:BalancedTree
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  qudd:todo "Balanced trees are currently not supported." ;
  rdfs:comment "A balanced tree is a tree data structure in which all the leaf nodes have the same depth from the root node." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Balanced tree" ;
  rdfs:subClassOf qudt:Tree ;
  sh:property qudt:BalancedTree-type ;
.
qudt:BalancedTree-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:BalancedTreeType ;
.
qudt:Binary
  rdf:type qudt:FileFormat ;
  qudd:literal "binary" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Binary" ;
.
qudt:BinaryTree
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A binary tree is a tree data structure in which each node has at most two children. Typically the child nodes are called left and right. Binary trees are commonly used to implement binary search trees and binary heaps." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Binary tree" ;
  rdfs:subClassOf qudt:Tree ;
  owl:disjointWith qudt:OrderedTree ;
  sh:property qudt:BinaryTree-leftTree ;
  sh:property qudt:BinaryTree-rightTree ;
  sh:property qudt:BinaryTree-type ;
.
qudt:BinaryTree-leftTree
  rdf:type sh:PropertyShape ;
  sh:path qudt:leftTree ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:BinaryTree ;
  sh:maxCount 1 ;
.
qudt:BinaryTree-rightTree
  rdf:type sh:PropertyShape ;
  sh:path qudt:rightTree ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:BinaryTree ;
  sh:maxCount 1 ;
.
qudt:BinaryTree-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:BinaryTreeType ;
.
qudt:BitField
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of bit field data values, where a bit field is a sequence of bits. Typically, bit fields are constrained to be of a fixed or maximum length." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Bit field" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:BitField-type ;
.
qudt:BitField-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:BitFieldType ;
.
qudt:Boolean
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of boolean values. Booleans may be represented in various ways, 'true' and 'false'; 'yes' and 'no', '0' and '1', etc. The members of the type:BooleanType class determines the data type properties of the members of this class." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Boolean" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:Boolean-type ;
.
qudt:Boolean-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:BooleanType ;
.
qudt:BooleanStateType
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Boolean state type" ;
  rdfs:subClassOf qudt:DiscreteState ;
.
qudt:ByteOrderTypeEnumeration
  rdfs:label "Byte Order Type Enumeration" ;
.
qudt:COMPOSITION-TREE-EXAMPLE_1
  rdf:type qudt:CompositionTreeType ;
  qudt:function qudt:CFN_ConcatenateMatrixRows ;
  qudt:node qudt:TIME-SERIES-TABLE-C-4x4 ;
  qudt:subTrees qudt:TABLE-COMPOSTION-SUBTREE-LIST-EXAMPLE_1 ;
  qudt:type qudt:CompositionTreeType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TABLE-COMPOSITION-EXAMPLE_1" ;
.
qudt:Calibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A calibrator is a software routine or physical device that adjusts the scale of a measurment so that it can be read in the desired units" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Calibrator" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:Calibrator-calibrationType ;
.
qudt:Calibrator-calibrationType
  rdf:type sh:PropertyShape ;
  sh:path qudt:calibrationType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:CalibratorType ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:CalibratorEnumeratedValue
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Calibrator enumerated value" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
.
qudt:CalibratorType
  rdf:type owl:Class ;
  rdfs:comment "An enumeration of the following data calibration types: \"Enumeration calibration type\", \"Line segment calibration type\", \"Polynomial calibration type\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Calibrator Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
.
qudt:Character
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of all data values that denote a single character." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Character" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:Character-type ;
.
qudt:Character-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:CharacterType ;
.
qudt:Close
  rdf:type qudt:OpenCloseStateType ;
  qudd:code "0"^^xsd:nonNegativeInteger ;
  qudd:literal "close" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Close" ;
.
qudt:Coefficent
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A constant quantity that appears as the multiplicative factor of a variable in a polynomial expression or equation." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Coefficent" ;
  rdfs:subClassOf qudt:Constant ;
  sh:property qudt:Coefficent-type ;
.
qudt:Coefficent-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:NumericType ;
.
qudt:CollapsedStructuredData
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the class of data values that have been compressed or serialized into a format that is smaller in size than the original structure, yet retain all of the information necessary to reconstruct the original structure using a specialized algorithm." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Collapsed Structured Data" ;
  rdfs:subClassOf qudt:StructuredData ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:StructuredData
          [
            rdf:type owl:Restriction ;
            owl:hasValue "true"^^xsd:boolean ;
            owl:onProperty qudt:collapsed ;
          ]
        ) ;
    ] ;
  sh:property qudt:CollapsedStructuredData-collapsed ;
.
qudt:CollapsedStructuredData-collapsed
  rdf:type sh:PropertyShape ;
  sh:path qudt:collapsed ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:boolean ;
  sh:hasValue "true"^^xsd:boolean ;
.
qudt:Collection
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment """This is the class of collection data structures. Collections are set-like structures that contain other objects. Collections contain other objects that are called elements or members, and are associated with the collection via the property data:element. Collections may be ordered, in which case the collection elements (c.f. data:CollectionMember) are reified structures that carry with them their relative ordering in the collection.



Some useful subclasses of data:Collection include data:Set, data:Tree, and data:List.""" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Collection" ;
  rdfs:subClassOf qudt:StructuredData ;
  sh:property qudt:Collection-element ;
  sh:property qudt:Collection-type ;
  sh:property qudt:Collection-value ;
.
qudt:Collection-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Object ;
.
qudt:Collection-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:CollectionType ;
.
qudt:Collection-value
  rdf:type sh:PropertyShape ;
  sh:path qudt:value ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class rdfs:Container ;
.
qudt:CollectionMember
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment """<p>This class is closely related to the data:Collection class. Specifically, the elements of data:CollectionMember are the containers used to hold (c.f. data:holds) the values of the elements of data:Collection (c.f. data:element). Typically, the subclasses of data:Collection are mirrored by corresponding subclasses of data:CollectionMember.</p>

<p>The need for having 'container' structures for data:Collection elements arises because in many cases a collection element will have an order that must be captured by reifying a container for each element and stating the order properties on the container. See, for example, how the order of a list structure (either indexed or linked) is modeled using the collection subclass data:List and the corresponding collection member subclass data:ListMember.</p>"""^^rdf:HTML ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Collection Member" ;
  rdfs:subClassOf qudt:StructuredData ;
  sh:property qudt:CollectionMember-element ;
  sh:property qudt:CollectionMember-scalarValue ;
  sh:property qudt:CollectionMember-type ;
.
qudt:CollectionMember-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Object ;
.
qudt:CollectionMember-scalarValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:scalarValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
.
qudt:CollectionMember-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
.
qudt:ColumnVector
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Column Vector" ;
  rdfs:subClassOf qudt:Matrix ;
  sh:property qudt:ColumnVector-columnNumber ;
  sh:property qudt:ColumnVector-columnSpan ;
  sh:property qudt:ColumnVector-element ;
  sh:property qudt:ColumnVector-rowSpan ;
.
qudt:ColumnVector-columnNumber
  rdf:type sh:PropertyShape ;
  sh:path qudt:columnNumber ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:ColumnVector-columnSpan
  rdf:type sh:PropertyShape ;
  sh:path qudt:columnSpan ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:hasValue "1"^^xsd:int ;
.
qudt:ColumnVector-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:RowVector ;
.
qudt:ColumnVector-rowSpan
  rdf:type sh:PropertyShape ;
  sh:path qudt:rowSpan ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:ComplexNumber
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:TupleValue ;
  sh:property qudt:ComplexNumber-imaginaryPart ;
  sh:property qudt:ComplexNumber-realPart ;
.
qudt:ComplexNumber-imaginaryPart
  rdf:type sh:PropertyShape ;
  sh:path qudt:imaginaryPart ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudd:numericUnion ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:ComplexNumber-realPart
  rdf:type sh:PropertyShape ;
  sh:path qudt:realPart ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudd:numericUnion ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:ComplexNumberTuple
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:TwoTuple ;
.
qudt:CompositeTable
  rdf:type owl:Class ;
  rdfs:comment "A composite table is a table (element of data:Table) that is expressed as the (matrix) composition of two other tables." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Composite table" ;
  rdfs:subClassOf qudt:Table ;
.
qudt:CompositionTree
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This subclass of data:OrderedTree is used to model the composition of matricies and tables. In addition to having a node element, which holds a matrix or table, and a list of subtrees, it also has a list of operators (c.f. maths:Operator) which records the operations applied to the nodes of the subtrees in order to construct the top level matrix. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Composition tree" ;
  rdfs:subClassOf qudt:OrderedTree ;
  sh:property qudt:CompositionTree-treeOperator ;
.
qudt:Condition
  rdf:type owl:Class ;
  rdfs:comment "A description of the state of some object or situation. Conditions may be normal or abnormal, functioning or non-functioning, etc." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Condition" ;
  rdfs:subClassOf qudt:Concept ;
.
qudt:Constant
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A value that never changes." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Constant" ;
  rdfs:subClassOf qudt:DimensionalValue ;
  sh:property qudt:Constant-scalarValue ;
.
qudt:Constant-scalarValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:scalarValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:ConstantsListMember
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A constants list member is an ordered collection member which holds only constant values (c.f. data:Constant)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Constants List Member" ;
  rdfs:subClassOf qudt:IndexedCollectionMember ;
  sh:property qudt:ConstantsListMember-next ;
  sh:property qudt:ConstantsListMember-numericValue ;
  sh:property qudt:ConstantsListMember-previous ;
.
qudt:ConstantsListMember-next
  rdf:type sh:PropertyShape ;
  sh:path qudd:next ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:ConstantsListMember ;
.
qudt:ConstantsListMember-numericValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:numericValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudd:numericUnion ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:ConstantsListMember-previous
  rdf:type sh:PropertyShape ;
  sh:path qudd:previous ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:ConstantsListMember ;
.
qudt:ContentType
  rdf:type owl:Class ;
  rdfs:comment "The members of this class are used to identify the structural type of some information bearing thing. For example, information may be unstructured, semi-structured, or structured." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Content type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
.
qudt:ContentTypeEnumeration
  rdf:type qudt:Enumeration ;
  qudt:element qudt:SemiStructuredContent ;
  qudt:element qudt:StructuredContent ;
  qudt:element qudt:UnstructuredContent ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Data Content Type Enumeration" ;
.
qudt:DataAsset-dataElement
  rdf:type sh:PropertyShape ;
  sh:path qudt:dataElement ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:DataElement ;
.
qudt:DataElement
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A Data Element that has a quantity kind and units" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Quantified Data Element" ;
  rdfs:subClassOf qudt:Object ;
  rdfs:subClassOf qudt:Quantity ;
  sh:property qudt:DataElement-type ;
.
qudt:DataRecord
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A record (sometimes called a structure, struct, data record, or compound data) is a collection of fields, possibly of different data types, typically in fixed number and optionally in a sequence." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Data Record" ;
  rdfs:subClassOf qudt:StructuredData ;
  sh:property qudt:DataRecord-element ;
  sh:property qudt:DataRecord-type ;
.
qudt:DataRecord-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:CompositeDataStructure ;
  sh:minCount 0 ;
.
qudt:DataRecord-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:CompositeDataStructure ;
.
qudt:DatatypeStructuredData
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This class of structured data objects is used to define data types for complex data objects, such as matricies, vectors, trees, and arrays. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Datatype structured data" ;
  rdfs:subClassOf qudt:StructuredData ;
  sh:property qudt:DatatypeStructuredData-element ;
.
qudt:DatatypeStructuredData-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Object ;
.
qudt:Date
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of data values that denote calendar dates." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Date" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:Date-type ;
.
qudt:Date-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:DateStringType ;
.
qudt:DerivedTable
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the class of tables (elements of data:Table) that are derived from another table by applying some function, like scalar multiplication, to each element of the table." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Derived table" ;
  rdfs:subClassOf qudt:Table ;
  sh:property qudt:DerivedTable-derivedFrom ;
.
qudt:DerivedTable-derivedFrom
  rdf:type sh:PropertyShape ;
  sh:path qudt:derivedFrom ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Table ;
.
qudt:Dictionary
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A dictionary is an map composed of a collection of unique keys and a collection of values, where each key is associated with exactly one value." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Dictionary" ;
  rdfs:subClassOf qudt:Map ;
  sh:property qudt:Dictionary-type ;
.
qudt:Dictionary-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:DictionaryType ;
.
qudt:DimensionVector
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A dimension vector is a vector of non-negative integers that expresses each dimension of the dimensionality of an array. If its length is k then the array is k-dimensional, e.g. a matrix is a 2-dimensional array. The dimensions are indexed from one up to the values given in the dimension vector. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Dimension Vector" ;
  rdfs:subClassOf qudt:Concept ;
.
qudt:DimensionVector-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:DimensionVector ;
.
qudt:DimensionalAttribute
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A dimensional attribute is an attribute that has an assoicated unit of measure." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Dimensional Attribute" ;
  rdfs:subClassOf qudt:ScalarAttribute ;
  sh:property qudt:DimensionalAttribute-unit ;
.
qudt:DimensionalAttribute-unit
  rdf:type sh:PropertyShape ;
  sh:path qudt:unit ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Unit ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:DimensionalSpecificationAttribute
  rdf:type owl:Class ;
  rdfs:comment "A dimensional specification attribute is an attribute that has an associated unit of measure and has minimum, maximum, and target values." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Dimensional Specification Attribute" ;
  rdfs:subClassOf qudt:DimensionalAttribute ;
  rdfs:subClassOf qudt:SpecificationAttribute ;
.
qudt:DimensionalValue
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A 'DimensionalValue' is an abstract Class for representing typed values. This can be either a variable or a constant." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Dimensional Value" ;
  rdfs:subClassOf qudt:Object ;
  sh:property qudt:DimensionalValue-type ;
  sh:property qudt:DimensionalValue-unit ;
.
qudt:DimensionalValue-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:DimensionalDatatype ;
  sh:maxCount 1 ;
.
qudt:DimensionalValue-unit
  rdf:type sh:PropertyShape ;
  sh:path qudt:unit ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Unit ;
  sh:maxCount 1 ;
.
qudt:DiscreteState
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Discrete state" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
.
qudt:DiscreteStateEnumeration
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxCardinality "1"^^xsd:int ;
      owl:onProperty qudt:inverted ;
    ] ;
.
qudt:Double_X
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Double X" ;
  rdfs:subPropertyOf qudt:X ;
.
qudt:Double_Y
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Double X" ;
  rdfs:subPropertyOf qudt:Y ;
.
qudt:Double_Z
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Double Z" ;
  rdfs:subPropertyOf qudt:Z ;
.
qudt:Dry
  rdf:type qudt:WetDryStateType ;
  qudd:code 0 ;
  qudd:literal "dry" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Dry" ;
.
qudt:EndianTypeEnumeration
  rdf:type qudt:Enumeration ;
  qudt:element qudt:BigEndian ;
  qudt:element qudt:LittleEndian ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Data Endian Type Enumeration" ;
.
qudt:EnumeratedAttribute
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "" ;
  rdfs:comment "This class designates attribute classes whose members consist of an enumeration (a set of literals from which a single value is selected)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Enumerated attribute" ;
  rdfs:subClassOf qudt:Attribute ;
  sh:property qudt:EnumeratedAttribute-objectValue ;
  sh:property qudt:EnumeratedAttribute-type ;
.
qudt:EnumeratedAttribute-objectValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:objectValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:EnumeratedAttribute-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Enumeration ;
.
qudt:EnumeratedValue
  rdf:type owl:Class ;
  rdfs:comment "An enumerated value is a distinct member of an enumeration." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:EnumeratedValueAlias
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Enumerated value alias" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
  sh:property qudt:EnumeratedValueAlias-alias ;
  sh:property qudt:EnumeratedValueAlias-isAliasFor ;
.
qudt:EnumeratedValueAlias-alias
  rdf:type sh:PropertyShape ;
  sh:path qudt:alias ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 0 ;
  sh:minCount 0 ;
.
qudt:EnumeratedValueAlias-isAliasFor
  rdf:type sh:PropertyShape ;
  sh:path qudt:isAliasFor ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Enumeration ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:Enumeration
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Enumeration" ;
.
qudt:EnumerationCalibrationType
  rdf:type qudt:CalibratorType ;
  qudd:code 3 ;
  qudd:literal "enumeration" ;
  rdfs:comment "An enumeration for calibration, defined as the correlation of a text label to an unsigned integer value. The determination on whether the text label or unsigned integer value is the calibrated value is dependent on the context of its use. The unsigned integer must be 32 bits or less. The text label is case-insensitive. Up to 256 Text Label/Value pairs are supported for a single enumeration calibrator. Given that there are more potential values than labels, it is left to each System to define the label to be used should an undefined value be received in the telemetry. Commands cannot be issued using undefined values." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Enumeration calibration type" ;
.
qudt:EnumerationCalibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An enumeration calibrator is a calibrator whose type is determined by an element in an enumeration." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Enumeration calibrator" ;
  rdfs:subClassOf qudt:ForwardCalibrator ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Calibrator
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:EnumerationCalibrationType ;
            owl:onProperty qudt:calibrationType ;
          ]
        ) ;
    ] ;
  sh:property qudt:EnumerationCalibrator-calibrationType ;
  sh:property qudt:EnumerationCalibrator-element ;
.
qudt:EnumerationCalibrator-calibrationType
  rdf:type sh:PropertyShape ;
  sh:path qudt:calibrationType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:hasValue qudt:EnumerationCalibrationType ;
.
qudt:EnumerationCalibrator-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:CalibratorEnumeratedValue ;
.
qudt:False
  rdf:type qudt:BooleanStateType ;
  qudd:code 0 ;
  qudd:literal "false" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "false" ;
.
qudt:Field-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:CompositeDataStructure ;
  sh:maxCount 1 ;
.
qudt:FieldTypeList
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Field type list" ;
  rdfs:subClassOf qudt:TypeList ;
  sh:property qudt:FieldTypeList-first ;
  sh:property qudt:FieldTypeList-rest ;
.
qudt:FieldTypeList-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:CompositeDataStructure ;
.
qudt:FieldTypeList-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:FieldTypeList ;
.
qudt:File-fileExtension
  rdf:type sh:PropertyShape ;
  sh:path qudt:fileExtension ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:string ;
  sh:maxCount 1 ;
.
qudt:File-fileFormat
  rdf:type sh:PropertyShape ;
  sh:path qudt:fileFormat ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:FileFormat ;
  sh:maxCount 1 ;
.
qudt:File-mimeType
  rdf:type sh:PropertyShape ;
  sh:path qudt:mimeType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class <https://nst.nasa.gov/esmd/cx/mime.owl#MimeType> ;
  sh:maxCount 1 ;
.
qudt:FixedIntervalTimeSeriesArray
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A fixed interval time series array is a time series array in which the data points have been sampled using a uniform time interval." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Fixed interval time series array" ;
  rdfs:subClassOf qudt:TimeSeriesArray ;
  sh:property qudt:FixedIntervalTimeSeriesArray-increment ;
  sh:property qudt:FixedIntervalTimeSeriesArray-timeDatatype ;
  sh:property qudt:FixedIntervalTimeSeriesArray-type ;
.
qudt:FixedIntervalTimeSeriesArray-increment
  rdf:type sh:PropertyShape ;
  sh:path qudt:increment ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:FixedIntervalTimeSeriesArray-timeDatatype
  rdf:type sh:PropertyShape ;
  sh:path qudt:timeDatatype ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TimeStringType ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:FixedIntervalTimeSeriesArray-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:FixedIntervalTimeSeriesArrayType ;
.
qudt:Float_X
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Float X" ;
  rdfs:subPropertyOf qudt:X ;
.
qudt:Float_Y
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Float Y" ;
  rdfs:subPropertyOf qudt:Y ;
.
qudt:Float_Z
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Float Z" ;
  rdfs:subPropertyOf qudt:Z ;
.
qudt:FloatingPointSpecificationAttribute
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A \"Specification Attribute\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Floating Point Specification Attribute" ;
  rdfs:subClassOf qudt:SpecificationAttribute ;
  sh:property qudt:FloatingPointSpecificationAttribute-maxValue ;
  sh:property qudt:FloatingPointSpecificationAttribute-minValue ;
  sh:property qudt:FloatingPointSpecificationAttribute-scalarValue ;
  sh:property qudt:FloatingPointSpecificationAttribute-targetValue ;
.
qudt:FloatingPointSpecificationAttribute-maxValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:maxValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:float ;
.
qudt:FloatingPointSpecificationAttribute-minValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:minValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:float ;
.
qudt:FloatingPointSpecificationAttribute-scalarValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:scalarValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:float ;
.
qudt:FloatingPointSpecificationAttribute-targetValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:targetValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:float ;
.
qudt:ForwardCalibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:Calibrator ;
  owl:disjointWith qudt:InverseCalibrator ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Calibrator
          [
            rdf:type owl:Restriction ;
            owl:hasValue "false"^^xsd:boolean ;
            owl:onProperty qudt:inverse ;
          ]
        ) ;
    ] ;
  sh:property qudt:ForwardCalibrator-inverse ;
.
qudt:ForwardCalibrator-inverse
  rdf:type sh:PropertyShape ;
  sh:path qudt:inverse ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:boolean ;
  sh:hasValue "false"^^xsd:boolean ;
  sh:maxCount 1 ;
.
qudt:Graph
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A graph data structure. This clsss denotes actual graph values (individual graphs). The structure of the individual graphs is determined by their corresponding type. See type:Graph." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Graph" ;
  rdfs:subClassOf qudt:Collection ;
  sh:property qudt:Graph-type ;
.
qudt:Graph-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:GraphType ;
.
qudt:GraphMember
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A \"Collection Member\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Graph Member" ;
  rdfs:subClassOf qudt:CollectionMember ;
  sh:property qudt:GraphMember-next ;
  sh:property qudt:GraphMember-previous ;
.
qudt:GraphMember-next
  rdf:type sh:PropertyShape ;
  sh:path qudd:next ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:GraphMember ;
.
qudt:GraphMember-previous
  rdf:type sh:PropertyShape ;
  sh:path qudd:previous ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:GraphMember ;
.
qudt:HashTable
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A hash table is a data structure that associates keys with values. The primary operation it supports efficiently is a lookup: given a key (e.g., a person's name), find the corresponding value (e.g., that person's telephone number). It works by transforming the key using a hash function into a hash value, a number that is used as an index into an array to locate the desired \"bucket\" where the values should be." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Hash table" ;
  rdfs:subClassOf qudt:Map ;
  sh:property qudt:HashTable-type ;
.
qudt:HashTable-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:HashTableType ;
.
qudt:Heap
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A heap is a specialized tree-based data structure that satisfies the heap qudt: if B is a child node of A, then key(A) is greater than or equal to key(B). This implies that an element with the greatest key is always in the root node, and so such a heap is sometimes called a max heap. (Alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min heap.) This is why heaps are used to implement priority queues. The efficiency of heap operations is crucial in several graph algorithms." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Heap" ;
  rdfs:subClassOf qudt:Tree ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Tree
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:HEAP ;
            owl:onProperty qudt:type ;
          ]
        ) ;
    ] ;
  sh:property qudt:Heap-type ;
.
qudt:Heap-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Heap ;
  sh:hasValue qudt:HEAP ;
.
qudt:HexBinary
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of data values that denote HexBinary data. Compare with type:HexBinaryType" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Hex binary" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:HexBinary-type ;
.
qudt:HexBinary-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:HexBinaryType ;
.
qudt:Hold
  rdf:type qudt:ReleaseHoldStateType ;
  qudd:code "0"^^xsd:nonNegativeInteger ;
  qudd:literal "hold" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Hold" ;
.
qudt:IEEE754Number
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of all 64 bit signed floating point numbers, as defined by the IEEE 754 specification." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "IEEE754Number" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:IEEE754Number-type ;
.
qudt:IEEE754Number-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:RealDatatype ;
  sh:hasValue qudt:FLOAT-DP ;
.
qudt:Identifier
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Identifier" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:Identifier-identifies ;
  sh:property qudt:Identifier-type ;
.
qudt:Identifier-identifies
  rdf:type sh:PropertyShape ;
  sh:path qudt:identifies ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:Identifier-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:IndexedCollection
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An indexed collection is an ordered collection whose elements are ordered by an integer index that is asserted on the indexed collection members (c.f. data:IndexedCollectionMember)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Indexed collection" ;
  rdfs:subClassOf qudt:OrderedCollection ;
  sh:property qudt:IndexedCollection-element ;
.
qudt:IndexedCollection-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:IndexedCollectionMember ;
.
qudt:IndexedCollectionMember
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the subclass of qudt:CollectionMember that defines collection container structures which are ordered in some sense, typically either by having a unique index or by being linked to other collection members, as in a linked list." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Ordered Collection Member" ;
  rdfs:subClassOf qudt:CollectionMember ;
  sh:property qudt:IndexedCollectionMember-index ;
.
qudt:IndexedCollectionMember-index
  rdf:type sh:PropertyShape ;
  sh:path qudt:index ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
.
qudt:IndexedList
  rdf:type owl:Class ;
  rdfs:comment "An indexed list is a list in which the elements of the list are identified by a unique index that orders the elements of the list." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Indexed list" ;
  rdfs:subClassOf qudt:Sequence ;
.
qudt:IndexedListMember
  rdf:type owl:Class ;
  rdfs:comment "This class defines the collection members for indexed lists. It is the class intersection of data:IndexedCollectionMember and data:ListMember." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Indexed list member" ;
  rdfs:subClassOf qudt:IndexedCollectionMember ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:ListMember
          qudt:IndexedCollectionMember
        ) ;
    ] ;
.
qudt:IndexedTreeList
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the class of lists that are indexed (c.f. data:IndexedList) and whose members contain only trees (c.f. data:TreeList and data:Tree)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Indexed tree list" ;
  rdfs:subClassOf qudt:IndexedList ;
  rdfs:subClassOf qudt:TreeList ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:IndexedList
          qudt:TreeList
        ) ;
    ] ;
  sh:property qudt:IndexedTreeList-element ;
  sh:property qudt:IndexedTreeList-first ;
  sh:property qudt:IndexedTreeList-rest ;
.
qudt:IndexedTreeList-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:IndexedTreeListMember ;
.
qudt:IndexedTreeList-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:IndexedTreeListMember ;
.
qudt:IndexedTreeList-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:IndexedTreeList ;
.
qudt:IndexedTreeListMember
  rdf:type owl:Class ;
  rdfs:comment "This class defines the collection members for indexed lists where each member holds a tree (c.f. data:Tree). It is the class intersection of data:IndexedListMember and data:TreeListMember." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Indexed tree list member" ;
  rdfs:subClassOf qudt:IndexedListMember ;
  rdfs:subClassOf qudt:TreeListMember ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:IndexedListMember
          qudt:TreeListMember
        ) ;
    ] ;
.
qudt:Instance
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An abstract concept that allows instances of data to be values or types. This supports the need to have type representations in structures." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Instance" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:Instance-objectValueFor ;
  sh:property qudt:Instance-ordered ;
.
qudt:Instance-objectValueFor
  rdf:type sh:PropertyShape ;
  sh:path qudt:objectValueFor ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Object ;
.
qudt:Instance-ordered
  rdf:type sh:PropertyShape ;
  sh:path qudt:ordered ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:boolean ;
  sh:maxCount 1 ;
.
qudt:Integer
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of data values that denote integers." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Integer" ;
  rdfs:subClassOf qudt:Number ;
  sh:property qudt:Integer-type ;
.
qudt:Integer-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:IntegerDatatype ;
.
qudt:IntegerSpecificationAttribute
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A \"Specification Attribute\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Integer Specification Attribute" ;
  rdfs:subClassOf qudt:SpecificationAttribute ;
  sh:property qudt:IntegerSpecificationAttribute-maxValue ;
  sh:property qudt:IntegerSpecificationAttribute-minValue ;
  sh:property qudt:IntegerSpecificationAttribute-scalarValue ;
  sh:property qudt:IntegerSpecificationAttribute-targetValue ;
.
qudt:IntegerSpecificationAttribute-maxValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:maxValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:integer ;
.
qudt:IntegerSpecificationAttribute-minValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:minValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:integer ;
.
qudt:IntegerSpecificationAttribute-scalarValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:scalarValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:integer ;
.
qudt:IntegerSpecificationAttribute-targetValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:targetValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:integer ;
.
qudt:InterpolatedTable
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An interopolated table is a derived table that is constructed by interpolating between the values of some interpolation parameter." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Interpolated table" ;
  rdfs:subClassOf qudt:DerivedTable ;
  sh:property qudt:InterpolatedTable-interpolationParameter ;
  sh:property qudt:InterpolatedTable-masterTable ;
.
qudt:InterpolatedTable-interpolationParameter
  rdf:type sh:PropertyShape ;
  sh:path qudt:interpolationParameter ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:InterpolationParameter ;
  sh:maxCount 1 ;
.
qudt:InterpolatedTable-masterTable
  rdf:type sh:PropertyShape ;
  sh:path qudt:masterTable ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Table ;
  sh:maxCount 1 ;
.
qudt:InterpolationParameter
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Interpolation parameter" ;
  rdfs:subClassOf qudt:Parameter ;
.
qudt:InverseCalibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:Calibrator ;
  owl:disjointWith qudt:ForwardCalibrator ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Calibrator
          [
            rdf:type owl:Restriction ;
            owl:hasValue "true"^^xsd:boolean ;
            owl:onProperty qudt:inverse ;
          ]
        ) ;
    ] ;
  sh:property qudt:InverseCalibrator-inverse ;
.
qudt:InverseCalibrator-inverse
  rdf:type sh:PropertyShape ;
  sh:path qudt:inverse ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:boolean ;
  sh:hasValue "true"^^xsd:boolean ;
.
qudt:KeyValuePair
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A key value pair is a data structure that has two fields; a key and a value. The value can either be a scalar or a reference to a data object." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Key Value Pair" ;
  rdfs:subClassOf qudt:Object ;
  sh:property qudt:KeyValuePair-key ;
  sh:property qudt:KeyValuePair-objectValue ;
  sh:property qudt:KeyValuePair-scalarValue ;
.
qudt:KeyValuePair-key
  rdf:type sh:PropertyShape ;
  sh:path qudt:key ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:KeyValuePair-objectValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:objectValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Object ;
  sh:maxCount 1 ;
.
qudt:KeyValuePair-scalarValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:scalarValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
.
qudt:LineSegment
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Line Segment" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:LineSegment-inputValue ;
  sh:property qudt:LineSegment-outputValue ;
  sh:property qudt:LineSegment-segment ;
.
qudt:LineSegment-inputValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:inputValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudd:numericUnion ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:LineSegment-outputValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:outputValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudd:numericUnion ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:LineSegment-segment
  rdf:type sh:PropertyShape ;
  sh:path qudt:segment ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:LineSegmentCalibrationType
  rdf:type qudt:CalibratorType ;
  qudd:code 1 ;
  qudd:literal "line" ;
  rdfs:comment "Line segment calibration uses linear interpolation along a series of line segments to calculate a calibrated value. Extrapolation of data is not supported. The linear segments are each defined by a pair of points. Each point is defined by an uncalibrated Input Value and a calibrated Output Value. A parameter's uncalibrated input value is compared to the defined point pairs, and the calibrated output value is determined by linear interpolation between a pair of points. The attributes are composed of input value and output value pairs. At least two points must be specified to define a line segment, and up to 100 points are supported. However, the line segments must not be defined in such a way as to provide ambiguous results (e.g., an infinite slope is not allowed). To that end, the points are ordered by their unique Input Values to define the line segments of the calibrator." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Line segment calibration type" ;
.
qudt:LineSegmentCalibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Line segment calibrator" ;
  rdfs:subClassOf qudt:ForwardCalibrator ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Calibrator
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:LineSegmentCalibrationType ;
            owl:onProperty qudt:calibrationType ;
          ]
        ) ;
    ] ;
  sh:property qudt:LineSegmentCalibrator-calibrationType ;
  sh:property qudt:LineSegmentCalibrator-inverseCalibrator ;
  sh:property qudt:LineSegmentCalibrator-lineSegment ;
.
qudt:LineSegmentCalibrator-calibrationType
  rdf:type sh:PropertyShape ;
  sh:path qudt:calibrationType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:hasValue qudt:LineSegmentCalibrationType ;
.
qudt:LineSegmentCalibrator-inverseCalibrator
  rdf:type sh:PropertyShape ;
  sh:path qudt:inverseCalibrator ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LineSegmentInverseCalibrator ;
.
qudt:LineSegmentCalibrator-lineSegment
  rdf:type sh:PropertyShape ;
  sh:path qudt:lineSegment ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LineSegment ;
  sh:maxCount 100 ;
.
qudt:LineSegmentInverseCalibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Line Segment Inverse Calibrator" ;
  rdfs:subClassOf qudt:InverseCalibrator ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Calibrator
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:LineSegmentCalibrationType ;
            owl:onProperty qudt:calibrationType ;
          ]
        ) ;
    ] ;
  sh:property qudt:LineSegmentInverseCalibrator-calibrationType ;
  sh:property qudt:LineSegmentInverseCalibrator-lineSegment ;
.
qudt:LineSegmentInverseCalibrator-calibrationType
  rdf:type sh:PropertyShape ;
  sh:path qudt:calibrationType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:hasValue qudt:LineSegmentCalibrationType ;
.
qudt:LineSegmentInverseCalibrator-lineSegment
  rdf:type sh:PropertyShape ;
  sh:path qudt:lineSegment ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LineSegment ;
  sh:maxCount 100 ;
.
qudt:Link
  rdf:type owl:Class ;
  rdfs:comment "The class of all links that appear in graphs." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Link" ;
  rdfs:subClassOf qudt:GraphMember ;
.
qudt:LinkedCollectionMember
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the subclass of data:OrderedCollectionMember whose elements are ordered in a collection by linking them via previous and next properties." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Linked collection member" ;
  rdfs:subClassOf qudt:IndexedCollectionMember ;
  sh:property qudt:LinkedCollectionMember-next ;
  sh:property qudt:LinkedCollectionMember-previous ;
.
qudt:LinkedCollectionMember-next
  rdf:type sh:PropertyShape ;
  sh:path qudd:next ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedCollectionMember ;
  sh:maxCount 1 ;
.
qudt:LinkedCollectionMember-previous
  rdf:type sh:PropertyShape ;
  sh:path qudd:previous ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedCollectionMember ;
  sh:maxCount 1 ;
.
qudt:LinkedList
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A Linked List is a data structure comprised of a sequence of records, each of which has a (scalar or object) value and a reference to the next record in the list." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Linked List" ;
  rdfs:subClassOf qudt:List ;
  sh:property qudt:LinkedList-first ;
  sh:property qudt:LinkedList-last ;
  sh:property qudt:LinkedList-rest ;
.
qudt:LinkedList-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedListMember ;
  sh:maxCount 1 ;
.
qudt:LinkedList-last
  rdf:type sh:PropertyShape ;
  sh:path qudt:last ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedListMember ;
  sh:maxCount 1 ;
.
qudt:LinkedList-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedList ;
.
qudt:LinkedListMember
  rdf:type owl:Class ;
  rdfs:comment "This class defines the collection members for linked lists. It is the class intersection of data:LinkedCollectionMember and data:ListMember." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Linked list member" ;
  rdfs:subClassOf qudt:LinkedCollectionMember ;
  rdfs:subClassOf qudt:ListMember ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:LinkedCollectionMember
          qudt:ListMember
        ) ;
    ] ;
.
qudt:LinkedTreeList
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the class of lists that are linked (c.f. data:LinkedList) and whose members contain only trees (c.f. data:TreeList and data:Tree)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Linked tree list" ;
  rdfs:subClassOf qudt:LinkedList ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:LinkedList
          qudt:TreeList
        ) ;
    ] ;
  sh:property qudt:LinkedTreeList-element ;
  sh:property qudt:LinkedTreeList-first ;
  sh:property qudt:LinkedTreeList-last ;
  sh:property qudt:LinkedTreeList-rest ;
.
qudt:LinkedTreeList-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedTreeListMember ;
.
qudt:LinkedTreeList-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedTreeListMember ;
.
qudt:LinkedTreeList-last
  rdf:type sh:PropertyShape ;
  sh:path qudt:last ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedTreeListMember ;
.
qudt:LinkedTreeList-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:LinkedTreeList ;
.
qudt:LinkedTreeListMember
  rdf:type owl:Class ;
  rdfs:comment "This class defines the collection members for linked lists where each member holds a tree (c.f. data:Tree). It is the class intersection of data:LinkedListMember and data:TreeListMember." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Linked tree list member" ;
  rdfs:subClassOf qudt:LinkedListMember ;
  rdfs:subClassOf qudt:TreeListMember ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:TreeListMember
          qudt:LinkedListMember
        ) ;
    ] ;
.
qudt:List
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "an ordered multiset." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "List" ;
  rdfs:subClassOf qudt:OrderedCollection ;
  rdfs:subClassOf rdf:List ;
  sh:property qudt:List-first ;
  sh:property qudt:List-rest ;
  sh:property qudt:List-type ;
.
qudt:List-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:List-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:List ;
  sh:maxCount 1 ;
.
qudt:List-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:ListType ;
.
qudt:ListMember
  rdf:type owl:Class ;
  rdfs:comment "This class defines collection members for lists. It has three direct subclasses, data:LinkedListMember, data:IndexedListMember, and data:TreeListMember." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "List member" ;
  rdfs:subClassOf qudt:IndexedCollectionMember ;
.
qudt:MATRIX-TYPE_4x4-FLOATDP
  rdf:type qudt:MatrixType ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-1x1 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-1x2 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-1x3 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-1x4 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-2x1 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-2x2 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-2x3 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-2x4 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-3x1 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-3x2 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-3x3 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-3x4 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-4x1 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-4x2 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-4x3 ;
  qudt:element qudt:TYPE-MATRIX-ELEMENT-DP-4x4 ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-4by4-Double precision" ;
.
qudt:MajorMinorType
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Major/Minor Type" ;
  rdfs:subClassOf qudt:EnumeratedValue ;
.
qudt:Map
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  spin:constraint [] ;
  rdfs:comment "A map is a data structure composed of a collection of unique keys and a collection of values, where each key is associated with one or more values. If each key is associated with exactly one value, then the map is called a dictionary (c.f. data:Dictionary)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Map" ;
  rdfs:subClassOf qudt:StructuredData ;
  sh:property qudt:Map-type ;
.
qudt:Map-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:MapType ;
.
qudt:MassPropertiesArray
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:Array ;
  sh:property qudt:MassPropertiesArray-type ;
.
qudt:MassPropertiesArray-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:MassPropertiesArrayType ;
.
qudt:Matrix
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A matrix is a two-dimensional array, or an array of arrays for which each of the inner arrays has the same length. The length of the outer array is typically called the row length of the matrix, and the length of the inner arrays is typically called the column length of the matrix." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Matrix" ;
  rdfs:subClassOf qudt:Array ;
  rdfs:subClassOf qudt:MatrixElement ;
  sh:property qudt:Matrix-element ;
  sh:property qudt:MatrixType ;
.
qudt:Matrix-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:MatrixElement ;
.
qudt:MatrixElement
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This class defines the collection members that are containers for the cells of matrices and tables. Each matrix element has a unique row and column number (c.f. qudt:columnNumber and qudt:rowNumber)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Matrix Element" ;
  rdfs:subClassOf qudt:IndexedCollectionMember ;
  sh:property qudt:MatrixElement-columnNumber ;
  sh:property qudt:MatrixElement-rowNumber ;
.
qudt:MatrixElement-columnNumber
  rdf:type sh:PropertyShape ;
  sh:path qudt:columnNumber ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:datatype xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
.
qudt:MatrixElement-rowNumber
  rdf:type sh:PropertyShape ;
  sh:path qudt:rowNumber ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:datatype xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
.
qudt:MatrixType
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:Measure
  rdf:type owl:Class ;
  rdfs:comment "A measure is a value that is used to quantify a metric." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Measure" ;
  rdfs:subClassOf qudt:DimensionalValue ;
.
qudt:Memory
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Memory" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:Memory-first ;
  sh:property qudt:Memory-last ;
  sh:property qudt:Memory-size ;
.
qudt:Memory-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:MemoryMap ;
.
qudt:Memory-last
  rdf:type sh:PropertyShape ;
  sh:path qudt:last ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:MemoryMap ;
.
qudt:Memory-size
  rdf:type sh:PropertyShape ;
  sh:path qudt:size ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:DimensionalValue ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:MemoryAllocation
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Memory allocation" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:MemoryAllocation-memoryMap ;
  sh:property qudt:MemoryAllocation-offset ;
.
qudt:MemoryAllocation-memoryMap
  rdf:type sh:PropertyShape ;
  sh:path qudt:memoryMap ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:MemoryMap ;
.
qudt:MemoryAllocation-offset
  rdf:type sh:PropertyShape ;
  sh:path qudt:offset ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:MemoryMap
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Memory map" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:MemoryMap-highAddress ;
  sh:property qudt:MemoryMap-lowAddress ;
  sh:property qudt:MemoryMap-next ;
.
qudt:MemoryMap-highAddress
  rdf:type sh:PropertyShape ;
  sh:path qudt:highAddress ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:MemoryMap-lowAddress
  rdf:type sh:PropertyShape ;
  sh:path qudt:lowAddress ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:string ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:MemoryMap-next
  rdf:type sh:PropertyShape ;
  sh:path qudd:next ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:MemoryMap ;
  sh:maxCount 1 ;
.
qudt:NormalCondition
  rdf:type owl:Class ;
  rdfs:comment "A subclass of data:Condition whose instances indicate that a system or situation is in a \"normal\" (i.e. functioning, non-error state) condition." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Normal Condition" ;
  rdfs:subClassOf qudt:Condition ;
.
qudt:NormalizedAttribute
  rdf:type owl:Class ;
  rdfs:comment "A \"Dimensional Specification Attribute\" with the following instance(s): \"Certification factor\", \"Design life\", \"Development fabrication time span\", \"Manufacturing automation factor\", \"Producibility improvements factor\", \"Production rate factor\", \"Test frequency\", \"Test process improvement factor\", \"Test reduction factor\", \"Tooling availability factor\", \"Tooling cost improvement factor\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Normalized Attribute" ;
  rdfs:subClassOf qudt:DimensionalSpecificationAttribute ;
.
qudt:Number
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of all data structures that represent numbers. The data type properties of the members of this class are determined by the corresponding members of the type:NumericType class." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Number" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:Number-type ;
.
qudt:Number-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:NumericType ;
.
qudt:Object
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An abstract class for all value-bearing objects." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Object" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:Object-type ;
  sh:property qudt:Object-value ;
.
qudt:Object-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Datatype ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
.
qudt:Object-value
  rdf:type sh:PropertyShape ;
  sh:path qudt:value ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
.
qudt:Octet
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of data values that denote an octet." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Octet" ;
  rdfs:subClassOf qudt:Scalar ;
  sh:property qudt:Octet-type ;
.
qudt:Octet-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:OctetType ;
.
qudt:OrderedCollection
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An ordered collection is a collection (c.f. data:Collection) whose members carry an explicit ordering in the collection. Collections may be ordered by assigning each element a unique integer that orders the collection, or the elements may be ordered by explicitly linking them in a sequence." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Ordered Collection" ;
  rdfs:subClassOf qudt:Collection ;
  sh:property qudt:OrderedCollection-element ;
  sh:property qudt:OrderedCollection-type ;
.
qudt:OrderedCollection-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:IndexedCollectionMember ;
.
qudt:OrderedCollection-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:OrderedCollectionType ;
.
qudt:OrderedMultiSet
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Ordered multi set" ;
  rdfs:subClassOf qudt:Concept ;
.
qudt:OrderedSet
  rdf:type owl:Class ;
  rdfs:comment "A set with an explicitly defined ordering." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Ordered set" ;
  rdfs:subClassOf qudt:OrderedMultiSet ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:OrderedCollection
          qudt:Set
        ) ;
    ] ;
.
qudt:OrderedTree
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An ordered tree is a tree whose subtrees are given in an ordered structure. Specifically, the subtrees of an ordered tree are identified using the property data:subTrees and the object of this property is a list whose members hold the subtrees of the subject tree. The order of the subtrees is given by their positions in the list structure." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Ordered tree" ;
  rdfs:subClassOf qudt:Tree ;
  sh:property qudt:OrderedTree-subTrees ;
  sh:property qudt:OrderedTree-type ;
.
qudt:OrderedTree-subTrees
  rdf:type sh:PropertyShape ;
  sh:path qudt:subTrees ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TreeList ;
  sh:maxCount 1 ;
.
qudt:OrderedTree-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:OrderedTreeType ;
.
qudt:OrderedValue
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An OrderedValue associates an order ranking with a value. It can opitonally have links between values." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Ordered value" ;
  rdfs:subClassOf qudt:Value ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Instance
          [
            rdf:type owl:Restriction ;
            owl:hasValue "true"^^xsd:boolean ;
            owl:onProperty qudt:ordered ;
          ]
        ) ;
    ] ;
  sh:property qudt:OrderedValue-index ;
  sh:property qudt:OrderedValue-next ;
  sh:property qudt:OrderedValue-order ;
  sh:property qudt:OrderedValue-ordered ;
  sh:property qudt:OrderedValue-previous ;
.
qudt:OrderedValue-index
  rdf:type sh:PropertyShape ;
  sh:path qudt:index ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:string ;
  sh:maxCount 1 ;
.
qudt:OrderedValue-next
  rdf:type sh:PropertyShape ;
  sh:path qudd:next ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:OrderedValue ;
  sh:maxCount 1 ;
.
qudt:OrderedValue-order
  rdf:type sh:PropertyShape ;
  sh:path qudt:order ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:int ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:OrderedValue-ordered
  rdf:type sh:PropertyShape ;
  sh:path qudt:ordered ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:boolean ;
  sh:hasValue "true"^^xsd:boolean ;
.
qudt:OrderedValue-previous
  rdf:type sh:PropertyShape ;
  sh:path qudd:previous ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:OrderedValue ;
  sh:maxCount 1 ;
.
qudt:Parameter
  rdf:type owl:Class ;
  rdfs:comment "In mathematics, statistics, and the mathematical sciences, a parameter is a quantity that defines some property of a system or function. In the data ontology, a data:Parameter is a variable that represents some property (speed, temperature, etc.) of some system, device or piece of equipment." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Parameter" ;
  rdfs:subClassOf qudt:Variable ;
.
qudt:PartialArray
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A Partial Array, also known as a Sparse Array, is an array where the non-empty elements are specified by row and column and value vectors.  This specification is compatible with MATLAB. The length attribute determines how many values are present. The coordinates of each value are given by the row and column vectors." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Partial array" ;
  rdfs:subClassOf qudt:Array ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Array
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:PartialArray ;
            owl:onProperty qudt:type ;
          ]
        ) ;
    ] ;
  sh:property qudt:PartialArray-columnVector ;
  sh:property qudt:PartialArray-rowVector ;
  sh:property qudt:PartialArray-type ;
  sh:property qudt:PartialArray-valueVector ;
.
qudt:PartialArray-columnVector
  rdf:type sh:PropertyShape ;
  sh:path qudt:columnVector ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:PartialArray-rowVector
  rdf:type sh:PropertyShape ;
  sh:path qudt:rowVector ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:PartialArray-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:PartialArray ;
  sh:hasValue qudt:PartialArray ;
.
qudt:PartialArray-valueVector
  rdf:type sh:PropertyShape ;
  sh:path qudt:valueVector ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:PhysicalAddress
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A type of data that uniquely identifies a physical location in a memory bank." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Physical address" ;
  rdfs:subClassOf qudt:StructuredData ;
  sh:property qudt:PhysicalAddress-type ;
.
qudt:PhysicalAddress-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:PhysicalAddress ;
.
qudt:PhysicalConstant
  rdf:type owl:Class ;
  rdfs:comment "A \"Constant\"." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Physical Constant" ;
  rdfs:subClassOf qudt:Constant ;
.
qudt:Polynomial
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A polynomial in the 'data' namespace is restricted to be a single variable polynomial. More general polynomials are handled in the math namespace as 'PolynomialExpressions'." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:Polynomial-term ;
.
qudt:Polynomial-term
  rdf:type sh:PropertyShape ;
  sh:path qudt:term ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:PolynomialTuple ;
.
qudt:PolynomialCalibrationType
  rdf:type qudt:CalibratorType ;
  qudd:code 2 ;
  qudd:literal "polynomial" ;
  rdfs:comment "Polynomial calibration is the transformation of a parameter to another value using a polynomial equation. The input parameter is considered the uncalibrated value. The output is the calibrated value. Up to a 7th order polynomial is supported. The attributes are composed of exponent and coefficient pairs." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Polynomial calibration type" ;
.
qudt:PolynomialCalibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Polynomial calibrator" ;
  rdfs:subClassOf qudt:ForwardCalibrator ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Calibrator
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:PolynomialCalibrationType ;
            owl:onProperty qudt:calibrationType ;
          ]
        ) ;
    ] ;
  sh:property qudt:PolynomialCalibrator-calibrationType ;
  sh:property qudt:PolynomialCalibrator-polynomial ;
.
qudt:PolynomialCalibrator-calibrationType
  rdf:type sh:PropertyShape ;
  sh:path qudt:calibrationType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:hasValue qudt:PolynomialCalibrationType ;
.
qudt:PolynomialCalibrator-polynomial
  rdf:type sh:PropertyShape ;
  sh:path qudt:polynomial ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Polynomial ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:PolynomialInverseCalibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Polynomial Inverse Calibrator" ;
  rdfs:subClassOf qudt:InverseCalibrator ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Calibrator
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:PolynomialCalibrationType ;
            owl:onProperty qudt:calibrationType ;
          ]
        ) ;
    ] ;
  sh:property qudt:PolynomialInverseCalibrator-calibrationType ;
  sh:property qudt:PolynomialInverseCalibrator-polynomial ;
.
qudt:PolynomialInverseCalibrator-calibrationType
  rdf:type sh:PropertyShape ;
  sh:path qudt:calibrationType ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:hasValue qudt:PolynomialCalibrationType ;
.
qudt:PolynomialInverseCalibrator-polynomial
  rdf:type sh:PropertyShape ;
  sh:path qudt:polynomial ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Polynomial ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:PolynomialTerm
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:TupleValue ;
  sh:property qudt:PolynomialTerm-coefficient ;
  sh:property qudt:PolynomialTerm-exponent ;
.
qudt:PolynomialTerm-coefficient
  rdf:type sh:PropertyShape ;
  sh:path qudt:coefficient ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:or (
      [
        sh:datatype xsd:string ;
      ]
      [
        sh:datatype xsd:float ;
      ]
      [
        sh:datatype xsd:integer ;
      ]
      [
        sh:datatype xsd:double ;
      ]
      [
        sh:datatype xsd:decimal ;
      ]
    ) ;
.
qudt:PolynomialTerm-exponent
  rdf:type sh:PropertyShape ;
  sh:path qudt:exponent ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:PolynomialTuple
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An ordered 2-tuple  for the coefficient and exponent of a term within a polynomial." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:TwoTuple ;
  sh:property qudt:PolynomialTuple-value ;
.
qudt:PolynomialTuple-value
  rdf:type sh:PropertyShape ;
  sh:path qudt:value ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:PolynomialTerm ;
.
qudt:Precision
  rdf:type owl:Class ;
  rdfs:comment "The range of precision of a variable" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Precision" ;
  rdfs:subClassOf qudt:Concept ;
.
qudt:PriorityQueue
  rdf:type owl:Class ;
  rdfs:comment """A priority queue is an abstract data type in computer programming that supports the following three operations:
    * InsertWithPriority: add an element to the queue with an associated priority
    * GetNext: remove the element from the queue that has the highest priority, and return it (also known as \"PopElement(Off)\", or \"GetMinimum\")
    * PeekAtNext (optional): look at the element with highest priority without removing it""" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Priority queue" ;
  rdfs:subClassOf qudt:Queue ;
.
qudt:QUATERNION-MATRIX-I
  rdf:type qudt:QuaternionBasisMatrix ;
  qudt:scalarValue """0 -1 0 0
1 0 0 0
0 0 0 -1
0 0 1 0""" ;
  qudt:type qudt:MATRIX-TYPE_4x4-FLOATDP ;
  rdfs:comment "The 4 X 4 matrix representation of the quaternion i. Also called I in matrix notation." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "QUATERNION-MATRIX-I" ;
.
qudt:QUATERNION-MATRIX-J
  rdf:type qudt:QuaternionBasisMatrix ;
  qudt:scalarValue """0 0 1 0
0 0 0 1
-1 0 0 0
0 -1 0 0""" ;
  qudt:type qudt:MATRIX-TYPE_4x4-FLOATDP ;
  rdfs:comment "The 4 X 4 matrix representation of the quaternion j. Also called J in matrix notation." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "QUATERNION-MATRIX-J" ;
.
qudt:QUATERNION-MATRIX-K
  rdf:type qudt:QuaternionBasisMatrix ;
  qudt:scalarValue """0 0 0 1
0 0 -1 0
0 1 0 0
-1 0 0 0""" ;
  qudt:type qudt:MATRIX-TYPE_4x4-FLOATDP ;
  rdfs:comment "The 4 X 4 matrix representation of the quaternion k. Also called K in matrix notation." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "QUATERNION-MATRIX-K" ;
.
qudt:QUATERNION-MATRIX-U
  rdf:type qudt:QuaternionBasisMatrix ;
  qudt:scalarValue """1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1""" ;
  qudt:type qudt:MATRIX-TYPE_4x4-FLOATDP ;
  rdfs:comment "The 4 X 4 matrix representation of the quaternion 1. Also called U in matrix notation." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "QUATERNION-MATRIX-U" ;
.
qudt:QuaternionBasisMatrix
  rdf:type owl:Class ;
  rdfs:comment "This is the class of 4 X 4 matrices that represent the four basis elements in the quaternion algebra, 1, i, j, k. Any quaternion can be written as a linear combination of these four basis elements." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Quaternion basis matrix" ;
  rdfs:subClassOf qudt:QuaternionMatrix ;
.
qudt:QuaternionMatrix
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the class of 4 X 4 matrices that represent an element in the quaternion algebra. Any quaternion can be represented as a 4 X 4 matrix. This representation is useful for manipulating quaternions, because matrix addition and multiplication correspond to the same operations in the abstract algebra of quaternions, and because the elements of the matrix are floating point numbers. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Quaternion matrix" ;
  rdfs:subClassOf qudt:Matrix ;
  sh:property qudt:QuaternionMatrix-type ;
.
qudt:QuaternionMatrix-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:MatrixType ;
  sh:minCount 0 ;
.
qudt:Queue
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A collection of items in which only the earliest added item may be accessed. Basic operations are add (to the tail) or enqueue and delete (from the head) or dequeue. Delete returns the item removed. Also known as \"first-in, first-out\" or FIFO. [NIST Dictionary of Algorithms and Data Structures]" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Queue" ;
  rdfs:subClassOf qudt:OrderedCollection ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:OrderedCollection
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:Queue ;
            owl:onProperty qudt:type ;
          ]
        ) ;
    ] ;
  sh:property qudt:Queue-type ;
.
qudt:Queue-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Queue ;
  sh:hasValue qudt:Queue ;
.
qudt:Release
  rdf:type qudt:ReleaseHoldStateType ;
  qudd:code "1"^^xsd:nonNegativeInteger ;
  qudd:literal "release" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Release" ;
.
qudt:ReleaseHoldStateType
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Release Hold State Type" ;
  rdfs:subClassOf qudt:DiscreteState ;
.
qudt:RowVector
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Row vector" ;
  rdfs:subClassOf qudt:Matrix ;
  sh:property qudt:RowVector-columnSpan ;
  sh:property qudt:RowVector-element ;
  sh:property qudt:RowVector-rowNumber ;
  sh:property qudt:RowVector-rowSpan ;
.
qudt:RowVector-columnSpan
  rdf:type sh:PropertyShape ;
  sh:path qudt:columnSpan ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:RowVector-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:ColumnVector ;
.
qudt:RowVector-rowNumber
  rdf:type sh:PropertyShape ;
  sh:path qudt:rowNumber ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:RowVector-rowSpan
  rdf:type sh:PropertyShape ;
  sh:path qudt:rowSpan ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:hasValue "1"^^xsd:int ;
.
qudt:Scalar
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the class of all scalar data values such as characters, numbers, and boolean values, in contrast with data:StructuredData which contains more complex data structures such as arrays, trees, and lists. Compare with type:ScalarDatatype, whose members describe the data type properties of subclasses of this class." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Scalar" ;
  rdfs:subClassOf qudt:Object ;
  sh:property qudt:Scalar-type ;
.
qudt:Scalar-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:ScalarDatatype ;
.
qudt:ScalarAttribute
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "" ;
  rdfs:comment "This Attribute class has subclasses whose members are all scalar data values such as characters, numbers, and boolean values." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Scalar attribute" ;
  rdfs:subClassOf qudt:Attribute ;
  sh:property qudt:ScalarAttribute-scalarValue ;
  sh:property qudt:ScalarAttribute-type ;
.
qudt:ScalarAttribute-scalarValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:scalarValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:ScalarAttribute-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:ScalarDatatype ;
.
qudt:SemiStructuredContent
  rdf:type qudt:ContentType ;
  qudd:literal "semistructured" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Semi structured content" ;
.
qudt:Sequence
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Sequence" ;
  rdfs:subClassOf qudt:IndexedCollection ;
  sh:property qudt:Sequence-type ;
.
qudt:Sequence-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:SequenceType ;
.
qudt:Set
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A subclass of data:Collection; this class defines a 'set' data structure. Sets have elements (c.f. data:element) that are instances of data:CollectionMember, which in turn hold objects that are the members of the set." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Set" ;
  rdfs:subClassOf qudt:UnorderedMultiSet ;
  sh:property qudt:Set-type ;
.
qudt:Set-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:SetType ;
.
qudt:SortedMap
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Sorted map" ;
  rdfs:subClassOf qudt:Map ;
.
qudt:SortedSet
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Sorted set" ;
  rdfs:subClassOf qudt:Set ;
.
qudt:SpecificationAttribute
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A specification of an attribute that also has min, max and target values." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Specification Attribute" ;
  rdfs:subClassOf qudt:Attribute ;
  sh:property qudt:SpecificationAttribute-maxValue ;
  sh:property qudt:SpecificationAttribute-minValue ;
  sh:property qudt:SpecificationAttribute-targetValue ;
.
qudt:SpecificationAttribute-maxValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:maxValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudd:numericUnion ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:SpecificationAttribute-minValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:minValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:SpecificationAttribute-targetValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:targetValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudd:numericUnion ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:Spline
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Spline" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:Spline-extrapolate ;
  sh:property qudt:Spline-isComprisedOf ;
  sh:property qudt:Spline-order ;
.
qudt:Spline-extrapolate
  rdf:type sh:PropertyShape ;
  sh:path qudt:extrapolate ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:boolean ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:Spline-isComprisedOf
  rdf:type sh:PropertyShape ;
  sh:path qudt:isComprisedOf ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:SplinePoint ;
.
qudt:Spline-order
  rdf:type sh:PropertyShape ;
  sh:path qudt:order ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:int ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:SplineCalibrator
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Spline calibrator" ;
  rdfs:subClassOf qudt:Map ;
  sh:property qudt:SplineCalibrator-type ;
.
qudt:SplineCalibrator-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:SplineCalibratorType ;
.
qudt:SplinePoint
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Spline Point" ;
  rdfs:subClassOf qudt:Tuple ;
  sh:property qudt:SplinePoint-type ;
.
qudt:SplinePoint-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:SplinePointType ;
.
qudt:Stack
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A collection of items in which only the most recently added item may be removed. The latest added item is at the top. Basic operations are push and pop. Often top and isEmpty are available, too. Also known as \"last-in, first-out\" or LIFO. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Stack" ;
  rdfs:subClassOf qudt:OrderedCollection ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:OrderedCollection
          [
            rdf:type owl:Restriction ;
            owl:hasValue qudt:Stack ;
            owl:onProperty qudt:type ;
          ]
        ) ;
    ] ;
  sh:property qudt:Stack-type ;
.
qudt:Stack-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Datatype ;
  sh:hasValue qudt:Stack ;
.
qudt:StateSpaceMatrix
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "State space matrix" ;
  rdfs:subClassOf qudt:Matrix ;
  sh:property qudt:StateSpaceMatrix-type ;
.
qudt:StateSpaceMatrix-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:StateSpaceMatrixType ;
.
qudt:StateVector
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "State vector" ;
  rdfs:subClassOf qudt:Vector ;
  sh:property qudt:StateVector-type ;
.
qudt:StateVector-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:StateSpaceVectorType ;
.
qudt:StructuredContent
  rdf:type qudt:ContentType ;
  qudd:literal "structured" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Structured content" ;
.
qudt:StructuredData
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This is the class of data structures which are composed of other data structures. Examples include lists, arrays, and trees." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Structured Data" ;
  rdfs:subClassOf qudt:Object ;
  rdfs:subClassOf rdfs:Container ;
  sh:property qudt:StructuredData-length ;
  sh:property qudt:StructuredData-type ;
.
qudt:StructuredData-length
  rdf:type sh:PropertyShape ;
  sh:path qudt:length ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
.
qudt:StructuredData-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Datatype ;
.
qudt:TIME-SERIES-TABLE-A-2x4
  rdf:type qudt:Table ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-A-1x1 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-A-1x2 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-A-1x3 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-A-1x4 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-A-2x1 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-A-2x2 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-A-2x3 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-A-2x4 ;
  qudt:scalarValue """999.0000	0.5500	2.9389	3.2361
998.9900	0.5611	2.9643	3.2212""" ;
  qudt:type qudt:TABLE-TYPE_2x4 ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-2x4" ;
.
qudt:TIME-SERIES-TABLE-B-2x4
  rdf:type qudt:Matrix ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-B-1x1 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-B-1x2 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-B-1x3 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-B-1x4 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-B-2x1 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-B-2x2 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-B-2x3 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-B-2x4 ;
  qudt:scalarValue """998.9800	0.5722	2.9895	3.2063

998.9700	0.5835	3.0146	3.1912""" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-B-2x4" ;
.
qudt:TIME-SERIES-TABLE-C-4x4
  rdf:type qudt:CompositeTable ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-1x1 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-1x2 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-1x3 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-1x4 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-2x1 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-2x2 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-2x3 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-2x4 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-3x1 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-3x2 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-3x3 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-3x4 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-4x1 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-4x2 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-4x3 ;
  qudt:element qudt:TIME-SERIES-TABLE-MEMBER-C-4x4 ;
  qudt:scalarValue """999.0000	0.5500	2.9389	3.2361
998.9900	0.5611	2.9643	3.2212
998.9800	0.5722	2.9895	3.2063
998.9700	0.5835	3.0146	3.1912""" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-C-4x4" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-A-1x1
  rdf:type qudt:TableElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "999.0000"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-A-1x1" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-A-1x2
  rdf:type qudt:TableElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "0.5500"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-A-1x2" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-A-1x3
  rdf:type qudt:TableElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "2.9389"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-A-1x3" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-A-1x4
  rdf:type qudt:TableElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.2361"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-A-1x4" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-A-2x1
  rdf:type qudt:TableElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "998.9900"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-A-2x1" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-A-2x2
  rdf:type qudt:TableElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "0.5611"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-A-2x2" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-A-2x3
  rdf:type qudt:TableElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "2.9643"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-A-2x3" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-A-2x4
  rdf:type qudt:TableElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.2212"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-A-2x4" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-B-1x1
  rdf:type qudt:TableElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "998.9800"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-B-1x1" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-B-1x2
  rdf:type qudt:TableElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "0.5722"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-B-1x2" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-B-1x3
  rdf:type qudt:TableElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "2.9895"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-B-1x3" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-B-1x4
  rdf:type qudt:TableElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.2063"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-B-1x4" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-B-2x1
  rdf:type qudt:TableElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "998.9700"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-B-2x1" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-B-2x2
  rdf:type qudt:TableElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "0.5835"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-B-2x2" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-B-2x3
  rdf:type qudt:TableElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.0146"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-B-2x3" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-B-2x4
  rdf:type qudt:TableElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.1912"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-B-2x4" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-1x1
  rdf:type qudt:TableElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "999.0000"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-1x1" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-1x2
  rdf:type qudt:TableElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "0.5500"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-1x2" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-1x3
  rdf:type qudt:TableElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "2.9389"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-1x3" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-1x4
  rdf:type qudt:TableElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.2361"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-1x4" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-2x1
  rdf:type qudt:TableElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "998.9900"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-2x1" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-2x2
  rdf:type qudt:TableElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "0.5611"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-2x2" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-2x3
  rdf:type qudt:TableElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "2.9643"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-2x3" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-2x4
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.2212"^^xsd:float ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-2x4" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-3x1
  rdf:type qudt:TableElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "3"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "998.9800"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-3x1" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-3x2
  rdf:type qudt:TableElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "3"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "0.5722"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-3x2" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-3x3
  rdf:type qudt:TableElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "3"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "2.9895"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-3x3" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-3x4
  rdf:type qudt:TableElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "3"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.2063"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-3x4" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-4x1
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "4"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "998.9700"^^xsd:float ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-4x1" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-4x2
  rdf:type qudt:TableElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "4"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "0.5835"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-4x2" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-4x3
  rdf:type qudt:TableElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "4"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.0146"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-4x3" ;
.
qudt:TIME-SERIES-TABLE-MEMBER-C-4x4
  rdf:type qudt:TableElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "4"^^xsd:nonNegativeInteger ;
  qudt:scalarValue "3.1912"^^xsd:float ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TIME-SERIES-TABLE-MEMBER-C-4x4" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-1x1
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-1x1" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-1x2
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-1x2" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-1x3
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-1x3" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-1x4
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "1"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-1x4" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-2x1
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-2x1" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-2x2
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-2x2" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-2x3
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-2x3" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-2x4
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "2"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-2x4" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-3x1
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "3"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-3x1" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-3x2
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "3"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-3x2" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-3x3
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "3"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-3x3" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-3x4
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "3"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-3x4" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-4x1
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "1"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "4"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-4x1" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-4x2
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "2"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "4"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-4x2" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-4x3
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "3"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "4"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-4x3" ;
.
qudt:TYPE-MATRIX-ELEMENT-DP-4x4
  rdf:type qudt:MatrixElement ;
  qudt:columnNumber "4"^^xsd:nonNegativeInteger ;
  qudt:rowNumber "4"^^xsd:nonNegativeInteger ;
  qudt:type qudt:FLOAT-DP ;
  vaem:isMetadataFor <http://qudt.org/2.0/schema/datatype> ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "TYPE-MATRIX-DP-4x4" ;
.
qudt:Table
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A table is a matrix data structure where each of the columns and rows may have a label which defines or describes the data values that appear in each respective column or row." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Table" ;
  rdfs:subClassOf qudt:Matrix ;
  sh:property qudt:Table-columnSpan ;
  sh:property qudt:Table-rowSpan ;
  sh:property qudt:Table-scalarValue ;
  sh:property qudt:Table-type ;
.
qudt:Table-columnSpan
  rdf:type sh:PropertyShape ;
  sh:path qudt:columnSpan ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
.
qudt:Table-rowSpan
  rdf:type sh:PropertyShape ;
  sh:path qudt:rowSpan ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
.
qudt:Table-scalarValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:scalarValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
.
qudt:Table-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TableType ;
.
qudt:TableElement
  rdf:type owl:Class ;
  rdfs:comment "This class defines the collection members that are containers for the cells of tables." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Table Element" ;
  rdfs:subClassOf qudt:MatrixElement ;
.
qudt:TimeSeriesArray
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A time series is an array of data points where each data point is typically measured at successive times. The data may be sampled at uniform or non-uniform time intervals, and the successive array elements correspond to the successive time intervals." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Time series array" ;
  rdfs:subClassOf qudt:Array ;
  sh:property qudt:TimeSeriesArray-type ;
.
qudt:TimeSeriesArray-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TimeSeriesArrayType ;
.
qudt:Transformer
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Transformer" ;
  rdfs:subClassOf qudt:Concept ;
.
qudt:Tree
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A tree is type of ordered collection. A tree is a data structure that has at most one node and zero or more sub-trees. A tree's node is identified using the property data:node. Trees may be binary (each tree has exactly one left and one right subtree) or they may be ordered. The properties that are used to identify the sub-trees of a tree are data:tree (and its sub-properties data:leftTree and data:rightTree) and data:subTrees. In the latter case, the object of data:subTrees is a list whose elements contain the subtrees of the subject tree." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Tree" ;
  rdfs:subClassOf qudt:Graph ;
  sh:property qudt:Tree-node ;
  sh:property qudt:Tree-tree ;
  sh:property qudt:Tree-type ;
.
qudt:Tree-node
  rdf:type sh:PropertyShape ;
  sh:path qudt:node ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Object ;
  sh:maxCount 1 ;
.
qudt:Tree-tree
  rdf:type sh:PropertyShape ;
  sh:path qudt:tree ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Tree ;
.
qudt:Tree-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TreeType ;
.
qudt:TreeLeaf
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A tree leaf is a tree data structure that has no sub-trees." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Tree leaf" ;
  rdfs:subClassOf qudt:Tree ;
  owl:equivalentClass [
      rdf:type owl:Class ;
      owl:intersectionOf (
          qudt:Tree
          [
            rdf:type owl:Class ;
            owl:unionOf (
                [
                  rdf:type owl:Restriction ;
                  owl:cardinality "0"^^xsd:int ;
                  owl:onProperty qudt:subTrees ;
                ]
                [
                  rdf:type owl:Restriction ;
                  owl:cardinality "0"^^xsd:int ;
                  owl:onProperty qudt:tree ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  sh:property qudt:TreeLeaf-subTrees ;
.
qudt:TreeLeaf-subTrees
  rdf:type sh:PropertyShape ;
  sh:path qudt:subTrees ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 0 ;
  sh:minCount 0 ;
.
qudt:TreeList
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A tree list is a list (c.f. data:List) whose members (c.f. data:ListMember) hold only trees (c.f. data:holds and data:Tree). Tree lists may be either linked lists or indexed lists. The data:TreeList class contains subclasses for each of these options. C.f. data:LinkedTreeList and data:IndexedTreeList." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Tree list" ;
  rdfs:subClassOf qudt:List ;
  sh:property qudt:TreeList-element ;
  sh:property qudt:TreeList-first ;
  sh:property qudt:TreeList-rest ;
.
qudt:TreeList-element
  rdf:type sh:PropertyShape ;
  sh:path qudt:element ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TreeListMember ;
.
qudt:TreeList-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TreeListMember ;
.
qudt:TreeList-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TreeList ;
.
qudt:TreeListMember
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "This class defines the collection members for lists where each member holds a tree (c.f. data:Tree). It has two subclasses, data:LinkedTreeListMember and data:IndexedTreeListMember." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Tree list member" ;
  rdfs:subClassOf qudt:ListMember ;
  sh:property qudt:TreeListMember-value ;
.
qudt:TreeListMember-value
  rdf:type sh:PropertyShape ;
  sh:path qudt:value ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Tree ;
.
qudt:TreeRoot
  rdf:type owl:Class ;
  spin:constraint [
      rdf:type sp:Ask ;
      sp:where (
          [
            sp:object spin:_this ;
            sp:predicate qudt:tree ;
            sp:subject [
                sp:varName "some" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "A tree root is a tree that is not a subtree of another tree." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Tree root" ;
  rdfs:subClassOf qudt:Tree ;
.
qudt:Tuple
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "The class of all Tuple data values. Compare with type:Tuple which defines the properties of the corresponding data type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Tuple" ;
  rdfs:subClassOf qudt:StructuredData ;
  sh:property qudt:Tuple-type ;
.
qudt:Tuple-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Tuple ;
.
qudt:TupleValue
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:Concept ;
.
qudt:TwoTuple
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:subClassOf qudt:Tuple ;
.
qudt:TypeArray
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Type array" ;
  rdfs:subClassOf qudt:Array ;
.
qudt:TypeList
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Type list" ;
  rdfs:subClassOf qudt:List ;
  sh:property qudt:TypeList-first ;
  sh:property qudt:TypeList-rest ;
.
qudt:TypeList-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Datatype ;
.
qudt:TypeList-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TypeList ;
.
qudt:UnorderedMultiSet
  rdf:type owl:Class ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Unordered multi set" ;
  rdfs:subClassOf qudt:Concept ;
.
qudt:UnstructuredContent
  rdf:type qudt:ContentType ;
  qudd:literal "unstructured" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Unstructured content" ;
.
qudt:UserModifiableParameter
  rdf:type qudt:ParameterModifiabilityType ;
  qudd:code 2 ;
  qudd:literal "user" ;
  rdfs:comment "Parameter is modifiable by a user." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "User modifiable parameter" ;
.
qudt:Value
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "An object that holds data for a data object. The type of the data is specified on the variable itself." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Value_1" ;
  rdfs:subClassOf qudt:Instance ;
  sh:property qudt:Value-scalarValue ;
.
qudt:Value-scalarValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:scalarValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:ValueRange
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Value Range" ;
  rdfs:subClassOf qudt:Concept ;
  sh:property qudt:ValueRange-highValueLimit ;
  sh:property qudt:ValueRange-lowValueLimit ;
.
qudt:ValueRange-highValueLimit
  rdf:type sh:PropertyShape ;
  sh:path qudt:highValueLimit ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:or (
      [
        sh:datatype xsd:string ;
      ]
      [
        sh:datatype xsd:float ;
      ]
      [
        sh:datatype xsd:integer ;
      ]
      [
        sh:datatype xsd:double ;
      ]
      [
        sh:datatype xsd:decimal ;
      ]
    ) ;
.
qudt:ValueRange-lowValueLimit
  rdf:type sh:PropertyShape ;
  sh:path qudt:lowValueLimit ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
  sh:or (
      [
        sh:datatype xsd:string ;
      ]
      [
        sh:datatype xsd:float ;
      ]
      [
        sh:datatype xsd:integer ;
      ]
      [
        sh:datatype xsd:double ;
      ]
      [
        sh:datatype xsd:decimal ;
      ]
    ) ;
.
qudt:ValveStuckClosed
  rdf:type qudt:AbnormalCondition ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Valve stuck closed" ;
.
qudt:ValveStuckOpen
  rdf:type qudt:AbnormalCondition ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Valve stuck open" ;
.
qudt:Variable
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A quantity that has values that may change over time. The values are stored in one or more 'Value' objects." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Variable" ;
  rdfs:subClassOf qudt:DimensionalValue ;
  sh:property qudt:Variable-attribute ;
  sh:property qudt:Variable-objectValue ;
.
qudt:Variable-attribute
  rdf:type sh:PropertyShape ;
  sh:path qudt:attribute ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Attribute ;
.
qudt:Variable-objectValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:objectValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Value ;
.
qudt:VariableIntervalTimeSeriesArray
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:comment "A variable interval time series array is a time series array where the data points have been sampled at non-uniform time intervals. The successive time intervals may follow a repeating pattern, or may be completely random." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Variable Interval time series array" ;
  rdfs:subClassOf qudt:TimeSeriesArray ;
  sh:property qudt:VariableIntervalTimeSeriesArray-elementCount ;
  sh:property qudt:VariableIntervalTimeSeriesArray-startTime ;
  sh:property qudt:VariableIntervalTimeSeriesArray-type ;
.
qudt:VariableIntervalTimeSeriesArray-elementCount
  rdf:type sh:PropertyShape ;
  sh:path qudt:elementCount ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class xsd:nonNegativeInteger ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:VariableIntervalTimeSeriesArray-startTime
  rdf:type sh:PropertyShape ;
  sh:path qudt:startTime ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:Time ;
  sh:maxCount 1 ;
  sh:minCount 1 ;
.
qudt:VariableIntervalTimeSeriesArray-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:VariableIntervalTimeSeriesArrayType ;
.
qudt:VariableTimeIncrementStateVectorTypeVector
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Variable time increment state vector type vector" ;
  rdfs:subClassOf qudt:TypeList ;
  sh:property qudt:VariableTimeIncrementStateVectorTypeVector-first ;
  sh:property qudt:VariableTimeIncrementStateVectorTypeVector-rest ;
.
qudt:VariableTimeIncrementStateVectorTypeVector-first
  rdf:type sh:PropertyShape ;
  sh:path rdf:first ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:TimeStringType ;
.
qudt:VariableTimeIncrementStateVectorTypeVector-rest
  rdf:type sh:PropertyShape ;
  sh:path rdf:rest ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:VariableTimeIncrementStateVectorTypeVector ;
.
qudt:Vector
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Vector" ;
  rdfs:subClassOf qudt:Array ;
  sh:property qudt:Vector-objectValue ;
  sh:property qudt:Vector-type ;
.
qudt:Vector-objectValue
  rdf:type sh:PropertyShape ;
  sh:path qudt:objectValue ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:maxCount 1 ;
  sh:minCount 0 ;
.
qudt:Vector-type
  rdf:type sh:PropertyShape ;
  sh:path qudt:type ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  sh:class qudt:VectorType ;
.
qudt:X
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "X coordinate value - the range is set by restrictions at the point of use to allow for single and double precision specification." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "X" ;
  rdfs:subPropertyOf qudt:coordinate ;
.
qudt:X-Axis
  rdf:type qudt:AxisType ;
  qudd:code 1 ;
  qudd:literal "x-axis" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "X-Axis" ;
.
qudt:Y
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Y coordinate value - the range is set by restrictions at the point of use to allow for single and double precision specification." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Y" ;
  rdfs:subPropertyOf qudt:coordinate ;
.
qudt:Y-Axis
  rdf:type qudt:AxisType ;
  qudd:code 2 ;
  qudd:literal "y-axis" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Y-Axis" ;
.
qudt:Z
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Z coordinate value - the range is set by restrictions at the point of use to allow for single and double precision specification." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Z" ;
  rdfs:subPropertyOf qudt:coordinate ;
.
qudt:Z-Axis
  rdf:type qudt:AxisType ;
  qudd:code 3 ;
  qudd:literal "z-axis" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Z-Axis" ;
.
qudt:alias
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "alias" ;
  owl:inverseOf qudt:isAliasFor ;
.
qudt:applicationDependency
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "application dependency" ;
.
qudt:array
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "array" ;
.
qudt:arrayDimensions
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This property identifies a vector of non-negative integers that holds the maximum number of elements for each dimension of an an array." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "array dimensions" ;
.
qudt:arrayIndex
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "array index" ;
.
qudt:arrayRank
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "the number of dimensions for an array" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "array rank" ;
.
qudt:attribute
  rdf:type owl:ObjectProperty ;
  rdfs:comment "An attribute of a variable, parameter, constant or other data entity." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "attribute" ;
.
qudt:axialOrientation
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "axial orientation" ;
.
qudt:base
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:FunctionalProperty ;
  rdfs:comment "This property identifies the \"base\" for a number expressed in mantissa, base, exponent form. Any rational number can be expressed in the form x=m*b^e, where m (the mantissa), b (the base), and e (the exponent) are integers. Typically, b is chosen to be either 2 or 10, and then the values of m and e are determined given the choice of base." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "base" ;
.
qudt:bitsPerSample
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Bits Per Sample" ;
.
qudt:bitsPerSecond
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Bits Per Second" ;
.
qudt:boolean
  rdf:type rdfs:Datatype ;
  rdf:type owl:DataRange ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "boolean" ;
  rdfs:subClassOf xsd:boolean ;
.
qudt:booleanValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "boolean value" ;
  rdfs:subPropertyOf qudt:scalarValue ;
.
qudt:bytes
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "bytes" ;
.
qudt:calibrationType
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "calibration type" ;
.
qudt:calibrator
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "calibrator" ;
.
qudt:child
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "child" ;
.
qudt:childNode
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "child node" ;
  rdfs:subPropertyOf qudt:node ;
  owl:inverseOf qudt:parentNode ;
.
qudt:coefficient
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:collapsed
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "A boolean flag to specify that a structure's components are collapsed in-line when the structure is translated to a program or markup representation. The effect of this is to place content referenced by pointers with in-line representations." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "collapsed" ;
.
qudt:columnNumber
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:FunctionalProperty ;
  rdfs:comment "This property relates a matrix or table element to its column index." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "column number" ;
.
qudt:columnSpan
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:FunctionalProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "column span" ;
.
qudt:columnVector
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A list of indices used to locate elements in a Partial Array." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "column vector" ;
.
qudt:columns
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:FunctionalProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "columns" ;
.
qudt:contentType
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "content type" ;
.
qudt:coordinate
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "coordinate" ;
.
qudt:coordinates
  rdf:type owl:ObjectProperty ;
  rdfs:comment "2D or 3D coordinates for locating a point in 2D or 3D space respectively." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "coordinates" ;
.
qudt:dataElement
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "data element" ;
.
qudt:decimalValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "decimal value" ;
  rdfs:subPropertyOf qudt:numericValue ;
.
qudt:default
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A reference to a default value that is not of a scalar type. For example, an eumeration may have a default value and this reference would be to a literal instance." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "default" ;
.
qudt:defaultValue
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "default value" ;
.
qudt:degree
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:denotation
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "denotation" ;
.
qudt:derivedFrom
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "derived from" ;
.
qudt:descriptor
  rdf:type rdf:Property ;
  rdfs:comment "A pointer to the specification of an entity." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "descriptor" ;
.
qudt:dimensions
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "The vector, 'dimensions', holds the number of elements for each dimension in the dimensionality of the array." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "dimensions" ;
.
qudt:doubleValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "double value" ;
  rdfs:subPropertyOf qudt:numericValue ;
.
qudt:duration
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:element
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This property is used to relate a collection (c.f. data:Collection) to its members (c.f. data:CollectionMember)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "element" ;
  rdfs:subPropertyOf rdfs:member ;
.
qudt:elementCount
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "element count" ;
.
qudt:elements
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "elements" ;
.
qudt:encodedValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "encoded value" ;
.
qudt:encodingDescription
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "encoding description" ;
.
qudt:engineeringValue
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "engineering value" ;
.
qudt:extrapolate
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "extrapolate" ;
.
qudt:fileExtension
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "file extension" ;
.
qudt:fileFormat
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "format" ;
.
qudt:fileType
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A reference to a file type specification." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "file type" ;
.
qudt:floatValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "float value" ;
  rdfs:subPropertyOf qudt:numericValue ;
.
qudt:frameCoordinateSystem
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "coordinate frame of" ;
  rdfs:subPropertyOf <https://nst.nasa.gov/esmd/cx/math.owl#frameCoordinateSystem> ;
  owl:inverseOf qudt:referenceFrame ;
.
qudt:function
  rdf:type owl:FunctionalProperty ;
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This property relates a composition tree (c.f. data:CompositionTree) with a function that is performed on the root nodes of its subtrees. Note that the arity of the operator should match the number of subtrees, since the arguments to the operator come from the root nodes of the subtrees, in the order provided by the subtree list structure (c.f. qudt:TreeList)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "function" ;
.
qudt:group
  rdf:type owl:ObjectProperty ;
  rdfs:comment "a reference to a group of entities." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "group" ;
.
qudt:highAddress
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "high address" ;
.
qudt:highValueLimit
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Defines the maximum expected value for a value" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "high value limit" ;
  rdfs:subPropertyOf qudt:limit ;
.
qudt:identifiedBy
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "identified by" ;
.
qudt:identifies
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "identifies" ;
  owl:inverseOf qudt:identifiedBy ;
.
qudt:imaginaryPart
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:inclination
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "inclination" ;
  rdfs:subPropertyOf qudt:parameter ;
.
qudt:increment
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "increment" ;
.
qudt:incrementDatatype
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The data type of an increment used for example in a uniform time series. For this case an increment may be minutes, seconds, milliseconds, or some other measure of duration." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Increment Data Type" ;
  rdfs:subPropertyOf qudt:timeDatatype ;
.
qudt:index
  rdf:type rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "index" ;
.
qudt:informationType
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "information type" ;
.
qudt:inline
  rdf:type owl:AnnotationProperty ;
  rdfs:comment "When set to true indicates to a generator that the referenced object should be expressed in-line." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "inline" ;
.
qudt:inlineStructure
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "inline structure" ;
.
qudt:inputValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "input value" ;
.
qudt:integerValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "integer value" ;
  rdfs:subPropertyOf qudt:numericValue ;
.
qudt:interpolationParameter
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "interpolation parameter" ;
.
qudt:inverse
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:inverseCalibrator
  rdf:type owl:ObjectProperty ;
  rdf:type owl:SymmetricProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:inverted
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "The 'inverted' property is used to specify that the sense of a boolean value is inverted." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "inverted" ;
.
qudt:isAliasFor
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "alias for" ;
.
qudt:key
  rdf:type rdf:Property ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "key" ;
.
qudt:last
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "last" ;
.
qudt:leftTree
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "left tree" ;
  rdfs:subPropertyOf qudt:tree ;
.
qudt:length
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "length" ;
.
qudt:limit
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:lineSegment
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "line segment" ;
.
qudt:listOrder
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "list order" ;
.
qudt:longitudeOfAscendingNode
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "longitude of ascending node" ;
  rdfs:subPropertyOf qudt:parameter ;
.
qudt:lowAddress
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "low address" ;
.
qudt:lowValueLimit
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Defines the minimum expected value for a value" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "low value limit" ;
  rdfs:subPropertyOf qudt:limit ;
.
qudt:masterTable
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The master table is used for example by an interpolated table to specify which table defines the basis for interpolation." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "master table" ;
.
qudt:maxValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "maximum value" ;
.
qudt:member
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:memoryMap
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "memory map" ;
.
qudt:mimeType
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A reference to one or more of a controlled vocabulary of MIME types" ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "mime type" ;
.
qudt:minValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "min value" ;
.
qudt:modelProperty
  rdf:type owl:AnnotationProperty ;
  rdfs:comment "A property that is only for the OWL model. In other words, one that does not get generated." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "model property" ;
.
qudt:node
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This property is used to relate a tree (c.f. data:Tree) to an object that is the node of the tree." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "node" ;
  rdfs:subPropertyOf qudt:objectValue ;
.
qudt:numericValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "numeric value" ;
  rdfs:subPropertyOf qudt:scalarValue ;
.
qudt:objectValue
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This property identifies the value of a data structure when the value is a reference to an object. " ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "data" ;
  rdfs:subPropertyOf qudt:value ;
.
qudt:objectValueFor
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "object value for" ;
  owl:inverseOf qudt:objectValue ;
.
qudt:offset
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "offset" ;
.
qudt:order
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "order" ;
.
qudt:orderInField
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "order in field" ;
  rdfs:subPropertyOf qudt:order ;
.
qudt:orderInStructure
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "orderInStructure" ;
  rdfs:subPropertyOf qudt:order ;
.
qudt:ordered
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "ordered" ;
.
qudt:outputValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "output value" ;
.
qudt:parameter
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "parameter" ;
  owl:inverseOf qudt:parameterOf ;
.
qudt:parameterOf
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Parameter Of" ;
.
qudt:parentNode
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "parent node" ;
.
qudt:pedigree
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "pedigree" ;
.
qudt:polarity
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "polarity" ;
.
qudt:polynomial
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:qualifier
  rdf:type owl:FunctionalProperty ;
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "qualifier" ;
.
qudt:rawDataValueLimits
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Indicates whether the Low Limit and High Limit values are defined with respect to the encoded value or the engineering unit value. The value is 'true' if the limit values are with respect to the encoded value. The value is 'false' if the limit values are with respect to the engineering unit value." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "raw data value limits" ;
.
qudt:rawValue
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "raw value" ;
.
qudt:realPart
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:rightTree
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "right tree" ;
  rdfs:subPropertyOf qudt:tree ;
.
qudt:rowNumber
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:FunctionalProperty ;
  rdfs:comment "This property relates a matrix or table element to its row index." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "row number" ;
  rdfs:subPropertyOf qudt:index ;
.
qudt:rowSpan
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:FunctionalProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "row span" ;
.
qudt:rowVector
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A list of indices used to locate elements in a Partial Array." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "row vector" ;
.
qudt:rows
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "rows" ;
.
qudt:samplePerSecond
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "Sample Per Second" ;
.
qudt:scalarValue
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Holds the value of a variable, parameter or constant as an XSD Simple Type." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "value" ;
  rdfs:subPropertyOf qudt:value ;
.
qudt:segment
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "segment" ;
.
qudt:setMember
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "set member" ;
.
qudt:setNumber
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "set number" ;
.
qudt:size
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "size" ;
.
qudt:specificationAttribute
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "specification attribute" ;
  rdfs:subPropertyOf qudt:attribute ;
.
qudt:startIndex
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "start index" ;
.
qudt:startTime
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "start time" ;
.
qudt:subTrees
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This property is used to relate an ordered tree (c.f. data:OrderedTree) to a list of its sub-trees. The list structure (either linked or indexed) orders the sub-trees." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "sub trees" ;
  rdfs:subPropertyOf qudt:child ;
.
qudt:subgroup
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A relation between groups, where one group is a sub-group of another." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "sub-group" ;
.
qudt:subgroupOf
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "subgroup of" ;
  owl:inverseOf qudt:subgroup ;
.
qudt:subset
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A relation between sets, where one set is a subset of another." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "subset" ;
.
qudt:symbol
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "symbol" ;
.
qudt:targetValue
  rdf:type owl:DatatypeProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "target value" ;
.
qudt:term
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
.
qudt:tree
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This property relates a tree (c.f. data:Tree) to its sub-trees. It has two sub-properties, data:leftTree and data:rightTree, which are used in the special case of binary trees (c.f. data:BinaryTree)." ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "tree" ;
  rdfs:subPropertyOf qudt:element ;
.
qudt:variable
  rdf:type owl:ObjectProperty ;
  rdfs:isDefinedBy <http://qudt.org/2.1/schema/data> ;
  rdfs:label "variable" ;
.
[
  rdf:type qudt:PolynomialTerm ;
  qudt:coefficient "1.0"^^xsd:float ;
  qudt:exponent 0 ;
].
[
  rdf:type qudt:PolynomialTerm ;
  qudt:coefficient "2.5"^^xsd:float ;
  qudt:exponent 1 ;
].
[
  rdf:type owl:Class ;
  owl:intersectionOf (
      qudt:StructuredData
      [
        rdf:type owl:Restriction ;
        owl:hasValue "true"^^xsd:boolean ;
        owl:onProperty qudt:collapsed ;
      ]
    ) ;
].
