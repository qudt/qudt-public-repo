# baseURI: http://qudt.org/2.0/vocab/types/oracle
# imports: http://qudt.org/2.0/schema/datatype
# imports: http://qudt.org/2.0/schema/qudt
# imports: http://qudt.org/2.0/vocab/datatypes
# imports: http://www.linkedmodel.org/schema/dtype
# imports: http://www.linkedmodel.org/schema/vaem

@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type.oracle: <http://qudt.org/vocab/type/oracle/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

dc:contributor
  rdf:type owl:AnnotationProperty ;
  rdfs:label "contributor"^^xsd:string ;
  rdfs:range xsd:string ;
.
dc:creator
  rdf:type owl:AnnotationProperty ;
  rdfs:label "creator"^^xsd:string ;
  rdfs:range xsd:string ;
.
dc:description
  rdf:type owl:AnnotationProperty ;
  rdfs:label "description"^^xsd:string ;
  rdfs:range xsd:string ;
.
dc:rights
  rdf:type owl:AnnotationProperty ;
  rdfs:label "rights"^^xsd:string ;
  rdfs:range xsd:string ;
.
dc:subject
  rdf:type owl:AnnotationProperty ;
  rdfs:label "subject"^^xsd:string ;
  rdfs:range xsd:string ;
.
dc:title
  rdf:type owl:AnnotationProperty ;
  rdfs:label "title"^^xsd:string ;
  rdfs:range xsd:string ;
.
<http://qudt.org/2.0/vocab/types/oracle>
  rdf:type owl:Ontology ;
  dc:contributor "Chip Masters"^^xsd:string ;
  dc:contributor "Daniel Mekonnen"^^xsd:string ;
  dc:creator "Ralph Hodgson"^^xsd:string ;
  dc:description "The QUDT 'Oracle Datatypes' ontology provides a full specification of ORACLE datatypes."^^xsd:string ;
  dc:subject "Datatypes"^^xsd:string ;
  dc:title "The QUDT ORACLE Datatypea Vocabulary"^^xsd:string ;
  vaem:hasCatalogEntry voag:QUDT-SchemaCatalogEntry ;
  vaem:hasGraphRole vaem:SchemaGraph ;
  vaem:hasLicenseType voag:CC-SHAREALIKE_3PT0-US ;
  vaem:intent "This vocabulary is to be used by other ontologies that need to reference type definitions."^^xsd:string ;
  vaem:namespace "https://nst.nasa.gov/esmd/cx/type.owl#"^^xsd:string ;
  vaem:namespacePrefix "type"^^xsd:string ;
  vaem:specificity "1"^^xsd:int ;
  vaem:url "https://nst.nasa.gov/esmd/cx/n1type.owl"^^xsd:anyURI ;
  rdfs:label "QUDT Vocabulary of ORACLE Datatypes - v2.1.19"^^xsd:string ;
  owl:imports <http://qudt.org/2.0/schema/datatype> ;
  owl:imports <http://qudt.org/2.1/schema/facade/qudt> ;
  owl:imports <http://qudt.org/2.0/vocab/datatypes> ;
  owl:imports <http://www.linkedmodel.org/schema/dtype> ;
  owl:imports <http://www.linkedmodel.org/schema/vaem> ;
.
qudt:Concept
  rdfs:subClassOf owl:Thing ;
.
qudt:Term
  rdfs:subClassOf owl:Thing ;
.
qudt.type.oracle:BINARY_DOUBLE
  rdf:type qudt:NumericType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  rdfs:label "BINARY_DOUBLE"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:BINARY_FLOAT
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  rdfs:label "BINARY_FLOAT"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:BINARY_INTEGER
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  qudt:bytes "4"^^xsd:nonNegativeInteger ;
  dcterms:description "You use the BINARY_INTEGER datatype to store signed integers. Its magnitude range is -2**31 .. 2**31. Like PLS_INTEGER values, BINARY_INTEGER values require less storage than NUMBER values. However, most BINARY_INTEGER operations are slower than PLS_INTEGER operations."^^xsd:string ;
  qudt:maxExclusive "2^31"^^xsd:string ;
  qudt:minInclusive "-2^31"^^xsd:string ;
  qudt:oracleSQLName "BINARY_INTEGER"^^xsd:string ;
  qudt:sameAs <http://qudt.org/vocab/type/SIGNED-LONG-INTEGER> ;
  rdfs:label "BINARY_INTEGER"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:PLS_INTEGER ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:BLOB
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "You use the BLOB datatype to store large binary objects in the database, in-line or out-of-line. Every BLOB variable stores a locator, which points to a large binary object. The size of a BLOB cannot exceed four gigabytes. BLOBs participate fully in transactions, are recoverable, and can be replicated. Changes made by package DBMS_LOB can be committed or rolled back. BLOB locators can span transactions (for reads only), but they cannot span sessions."^^xsd:string ;
  qudt:oracleSQLName "BLOB"^^xsd:string ;
  rdfs:label "BLOB"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:CLOB ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:BOOLEAN
  rdf:type qudt:BooleanType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "You use the BOOLEAN datatype to store the logical values TRUE, FALSE, and NULL (which stands for a missing, unknown, or inapplicable value). Only logic operations are allowed on BOOLEAN variables. The BOOLEAN datatype takes no parameters. Only the values TRUE, FALSE, and NULL can be assigned to a BOOLEAN variable. You cannot insert the values TRUE and FALSE into a database column. Also, you cannot select or fetch column values into a BOOLEAN variable."^^xsd:string ;
  qudt:oracleSQLName "BOOLEAN"^^xsd:string ;
  rdfs:label "BOOLEAN"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:CHAR
  rdf:type qudt:CharacterType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description """You use the CHAR datatype to store fixed-length character data. How the data is represented internally depends on the database character set. The CHAR datatype takes an optional parameter that lets you specify a maximum size up to 32767 bytes. You can specify the size in terms of bytes or characters, where each character contains one or more bytes, depending on the character set encoding. The syntax follows:

CHAR[(maximum_size [CHAR | BYTE] )]

You cannot use a symbolic constant or variable to specify the maximum size; you must use an integer literal in the range 1 .. 32767.

If you do not specify a maximum size, it defaults to 1. If you specify the maximum size in bytes rather than characters, a CHAR(n) variable might be too small to hold n multibyte characters. To avoid this possibility, use the notation CHAR(n CHAR)so that the variable can hold n characters in the database character set, even if some of those characters contain multiple bytes. When you specify the length in characters, the upper limit is still 32767 bytes. So for double-byte and multibyte character sets, you can only specify 1/2 or 1/3 as many characters as with a single-byte character set.

Although PL/SQL character variables can be relatively long, the maximum width of a CHAR database column is 2000 bytes. So, you cannot insert CHAR values longer than 2000 bytes into a CHAR database column.

You can insert any CHAR(n) value into a LONG database column because the maximum width of a LONG column is 2**31 bytes or two gigabytes. However, you cannot retrieve a value longer than 32767 bytes from a LONG column into a CHAR(n) variable.

When you do not use the CHAR or BYTE qualifiers, the default is determined by the setting of the NLS_LENGTH_SEMANTICS initialization parameter. When a PL/SQL procedure is compiled, the setting of this parameter is recorded, so that the same setting is used when the procedure is recompiled after being invalidated."""^^xsd:string ;
  qudt:oracleSQLName "CHAR"^^xsd:string ;
  rdfs:label "CHAR"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:CHARACTER
  rdf:type qudt:CharacterType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "The CHAR subtype CHARACTER has the same range of values as its base type. That is, CHARACTER is just another name for CHAR. You can use this subtype for compatibility with ANSI/ISO and IBM types or when you want an identifier more descriptive than CHAR."^^xsd:string ;
  qudt:oracleSQLName "CHARACTER"^^xsd:string ;
  rdfs:label "CHARACTER"^^xsd:string ;
  rdfs:subClassOf qudt.type.oracle:CHAR ;
.
qudt.type.oracle:CLOB
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "You use the CLOB datatype to store large blocks of character data in the database, in-line or out-of-line. Both fixed-width and variable-width character sets are supported. Every CLOB variable stores a locator, which points to a large block of character data. The size of a CLOB cannot exceed four gigabytes.nCLOBs participate fully in transactions, are recoverable, and can be replicated. Changes made by package DBMS_LOB can be committed or rolled back. CLOB locators can span transactions (for reads only), but they cannot span sessions."^^xsd:string ;
  qudt:oracleSQLName "CLOB"^^xsd:string ;
  rdfs:label "CLOB"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:BLOB ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:DATE
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  rdfs:label "DATE"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:DEC
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "DEC is a NUMBER subtype for compatibility with ANSI/ISO and IBM types or when you want a more descriptive name. Use DEC to declare fixed-point numbers with a maximum precision of 38 decimal digits."^^xsd:string ;
  qudt:oracleSQLName "DEC"^^xsd:string ;
  rdfs:label "DEC"^^xsd:string ;
  rdfs:subClassOf qudt.type.oracle:NUMBER ;
.
qudt.type.oracle:DECIMAL
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "DECIMAL is a NUMBER subtype for compatibility with ANSI/ISO and IBM types or when you want a more descriptive name. Use DECIMAL to declare fixed-point numbers with a maximum precision of 38 decimal digits."^^xsd:string ;
  qudt:oracleSQLName "DECIMAL"^^xsd:string ;
  rdfs:label "DECIMAL"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:BINARY_INTEGER ;
  rdfs:seeAlso qudt.type.oracle:DEC ;
  rdfs:subClassOf qudt.type.oracle:NUMBER ;
.
qudt.type.oracle:DOUBLE_PRECISION
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "The subtype DOUBLE PRECISION and FLOAT are used to declare floating-point numbers with a maximum precision of 126 binary digits, which is roughly equivalent to 38 decimal digits. Or, use the subtype REAL to declare floating-point numbers with a maximum precision of 63 binary digits, which is roughly equivalent to 18 decimal digits."^^xsd:string ;
  qudt:oracleSQLName "DOUBLE PRECISION"^^xsd:string ;
  rdfs:label "DOUBLE PRECISION"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:FLOAT ;
  rdfs:subClassOf qudt:NumericType ;
  rdfs:subClassOf qudt.type.oracle:NUMBER ;
.
qudt.type.oracle:Datatype
  rdf:type rdfs:Class ;
  rdfs:label "Datatype"^^xsd:string ;
  rdfs:subClassOf rdfs:Datatype ;
.
qudt.type.oracle:FLOAT
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "The subtype FLOAT is used to declare floating-point numbers with a maximum precision of 126 binary digits, which is roughly equivalent to 38 decimal digits. Or, use the subtype REAL to declare floating-point numbers with a maximum precision of 63 binary digits, which is roughly equivalent to 18 decimal digits."^^xsd:string ;
  qudt:oracleSQLName "FLOAT"^^xsd:string ;
  rdfs:label "FLOAT"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:DOUBLE_PRECISION ;
  rdfs:subClassOf qudt.type.oracle:NUMBER ;
.
qudt.type.oracle:INT
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "Use the subtypes INTEGER, INT, and SMALLINT to declare integers with a maximum precision of 38 decimal digits"^^xsd:string ;
  qudt:oracleSQLName "INT"^^xsd:string ;
  rdfs:label "INT"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:INTEGER ;
  rdfs:seeAlso qudt.type.oracle:SMALLINT ;
  rdfs:subClassOf qudt.type.oracle:NUMBER ;
.
qudt.type.oracle:INTEGER
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "Use the subtypes INTEGER, INT, and SMALLINT to declare integers with a maximum precision of 38 decimal digits"^^xsd:string ;
  qudt:oracleSQLName "INTEGER"^^xsd:string ;
  rdfs:label "INTEGER"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:INT ;
  rdfs:seeAlso qudt.type.oracle:SMALLINT ;
  rdfs:subClassOf qudt.type.oracle:NUMBER ;
.
qudt.type.oracle:NATURAL
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "For convenience, PL/SQL predefines the BINARY_INTEGER subtype 'NATURAL'. The subtypes NATURAL (and POSITIVE) let you restrict an integer variable to non-negative or positive values, respectively. NATURALN and POSITIVEN prevent the assigning of nulls to an integer variable. SIGNTYPE lets you restrict an integer variable to the values -1, 0, and 1, which is useful in programming tri-state logic."^^xsd:string ;
  qudt:oracleSQLName "NATURAL"^^xsd:string ;
  rdfs:label "NATURAL"^^xsd:string ;
  rdfs:subClassOf qudt.type.oracle:BINARY_INTEGER ;
.
qudt.type.oracle:NATURALN
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "For convenience, PL/SQL predefines the BINARY_INTEGER subtype 'NATURALN'.  NATURALN (and POSITIVEN) prevent the assigning of nulls to an integer variable."^^xsd:string ;
  qudt:oracleSQLName "NATURALN"^^xsd:string ;
  rdfs:label "NATURALN"^^xsd:string ;
  rdfs:subClassOf qudt.type.oracle:BINARY_INTEGER ;
.
qudt.type.oracle:NCHAR
  rdf:type qudt:StringType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description """You use the NCHAR datatype to store fixed-length (blank-padded if necessary) national character data. How the data is represented internally depends on the national character set specified when the database was created, which might use a variable-width encoding (UTF8) or a fixed-width encoding (AL16UTF16). Because this type can always accommodate multibyte characters, you can use it to hold any Unicode character data.

The NCHAR datatype takes an optional parameter that lets you specify a maximum size in characters. The syntax follows:

NCHAR[(maximum_size)]

Because the physical limit is 32767 bytes, the maximum value you can specify for the length is 32767/2 in the AL16UTF16 encoding, and 32767/3 in the UTF8 encoding.

You cannot use a symbolic constant or variable to specify the maximum size; you must use an integer literal.

If you do not specify a maximum size, it defaults to 1. The value always represents the number of characters, unlike CHAR which can be specified in either characters or bytes.

my_string NCHAR(100);  -- maximum size is 100 characters

The maximum width of an NCHAR database column is 2000 bytes. So, you cannot insert NCHAR values longer than 2000 bytes into an NCHAR column.

If the NCHAR value is shorter than the defined width of the NCHAR column, Oracle blank-pads the value to the defined width.

You can interchange CHAR and NCHAR values in statements and expressions. It is always safe to turn a CHAR value into an NCHAR value, but turning an NCHAR value into a CHAR value might cause data loss if the character set for the CHAR value cannot represent all the characters in the NCHAR value. Such data loss can result in characters that usually look like question marks (?)."""^^xsd:string ;
  qudt:dimensionality 1 ;
  qudt:oracleSQLName "NCHAR"^^xsd:string ;
  rdfs:label "NCHAR"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:NCLOB
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "You use the NCLOB datatype to store large blocks of NCHAR data in the database, in-line or out-of-line. Both fixed-width and variable-width character sets are supported. Every NCLOB variable stores a locator, which points to a large block of NCHAR data. The size of an NCLOB cannot exceed four gigabytes. NCLOBs participate fully in transactions, are recoverable, and can be replicated. Changes made by package DBMS_LOB can be committed or rolled back. NCLOB locators can span transactions (for reads only), but they cannot span sessions."^^xsd:string ;
  qudt:oracleSQLName "NCLOB"^^xsd:string ;
  rdfs:label "NCLOB"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:BLOB ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:NUMBER
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description """The NUMBER datatype is used to store fixed-point or floating-point numbers. Its magnitude range is 1E-130 .. 10E125. If the value of an expression falls outside this range, you get a numeric overflow or underflow error. You can specify precision, which is the total number of digits, and scale, which is the number of digits to the right of the decimal point. The syntax is: NUMBER[(precision,scale)].To declare fixed-point numbers, for which you must specify scale, use the following form: NUMBER(precision,scale).

You cannot use constants or variables to specify precision and scale; you must use integer literals. The maximum precision of a NUMBER value is 38 decimal digits. If you do not specify precision, it defaults to 38 or the maximum supported by your system, whichever is less.

Scale, which can range from -84 to 127, determines where rounding occurs. For instance, a scale of 2 rounds to the nearest hundredth (3.456 becomes 3.46). A negative scale rounds to the left of the decimal point. For example, a scale of -3 rounds to the nearest thousand (3456 becomes 3000). A scale of 0 rounds to the nearest whole number. If you do not specify scale, it defaults to 0."""^^xsd:string ;
  rdfs:label "NUMBER"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:NVARCHAR
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  rdfs:label "NVARCHAR"^^xsd:string ;
  rdfs:subClassOf qudt.type.oracle:NVARCHAR2 ;
.
qudt.type.oracle:NVARCHAR2
  rdf:type qudt:StringType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description """You use the NVARCHAR2 datatype to store variable-length Unicode character data. How the data is represented internally depends on the national character set specified when the database was created, which might use a variable-width encoding (UTF8) or a fixed-width encoding (AL16UTF16). Because this type can always accommodate multibyte characters, you can use it to hold any Unicode character data.

The NVARCHAR2 datatype takes a required parameter that specifies a maximum size in characters. The syntax follows:

NVARCHAR2(maximum_size)

Because the physical limit is 32767 bytes, the maximum value you can specify for the length is 32767/2 in the AL16UTF16 encoding, and 32767/3 in the UTF8 encoding.

You cannot use a symbolic constant or variable to specify the maximum size; you must use an integer literal.

The maximum size always represents the number of characters, unlike VARCHAR2 which can be specified in either characters or bytes.

my_string NVARCHAR2(200);  -- maximum size is 200 characters

The maximum width of a NVARCHAR2 database column is 4000 bytes. Therefore, you cannot insert NVARCHAR2 values longer than 4000 bytes into a NVARCHAR2 column.

You can interchange VARCHAR2 and NVARCHAR2 values in statements and expressions. It is always safe to turn a VARCHAR2 value into an NVARCHAR2 value, but turning an NVARCHAR2 value into a VARCHAR2 value might cause data loss if the character set for the VARCHAR2 value cannot represent all the characters in the NVARCHAR2 value. Such data loss can result in characters that usually look like question marks (?)."""^^xsd:string ;
  qudt:oracleSQLName "NVARCHAR2"^^xsd:string ;
  rdfs:label "NVARCHAR2"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:PLS_INTEGER
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description """You use the PLS_INTEGER datatype to store signed integers. Its magnitude range is -2**31 .. 2**31. PLS_INTEGER values require less storage than NUMBER values. Also, PLS_INTEGER operations use machine arithmetic, so they are faster than NUMBER and BINARY_INTEGER operations, which use library arithmetic. For efficiency, use PLS_INTEGER for all calculations that fall within its magnitude range.

Although PLS_INTEGER and BINARY_INTEGER have the same magnitude range, they are not fully compatible. When a PLS_INTEGER calculation overflows, an exception is raised. However, when a BINARY_INTEGER calculation overflows, no exception is raised if the result is assigned to a NUMBER variable.

Because of this small semantic difference, you might want to continue using BINARY_INTEGER in old applications for compatibility. In new applications, always use PLS_INTEGER for better performance."""^^xsd:string ;
  qudt:oracleSQLName "PLS_INTEGER"^^xsd:string ;
  rdfs:label "PLS_INTEGER"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:BINARY_INTEGER ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:POSITIVE
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "For convenience, PL/SQL predefines the BINARY_INTEGER subtype 'POSITIVE'. "^^xsd:string ;
  qudt:oracleSQLName "POSITIVE"^^xsd:string ;
  rdfs:label "POSITIVE"^^xsd:string ;
  rdfs:subClassOf qudt.type.oracle:BINARY_INTEGER ;
.
qudt.type.oracle:POSITIVEN
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "For convenience, PL/SQL predefines the BINARY_INTEGER subtype 'POSITIVEN'.  POSITIVEN prevents the assigning of nulls to an integer variable."^^xsd:string ;
  qudt:oracleSQLName "POSITIVEN"^^xsd:string ;
  rdfs:label "POSITIVEN"^^xsd:string ;
  rdfs:subClassOf qudt.type.oracle:BINARY_INTEGER ;
.
qudt.type.oracle:SIGNTYPE
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "For convenience, PL/SQL predefines the BINARY_INTEGER subtype 'SIGNTYPE'. SIGNTYPE lets you restrict an integer variable to the values -1, 0, and 1, which is useful in programming tri-state logic."^^xsd:string ;
  qudt:oracleSQLName "SIGNTYPE"^^xsd:string ;
  rdfs:label "SIGNTYPE"^^xsd:string ;
  rdfs:subClassOf qudt.type.oracle:BINARY_INTEGER ;
.
qudt.type.oracle:SMALLINT
  rdf:type qudt:IntegerDatatype ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description "Use the subtypes INTEGER, INT, and SMALLINT to declare integers with a maximum precision of 38 decimal digits"^^xsd:string ;
  qudt:oracleSQLName "SMALLINT"^^xsd:string ;
  rdfs:label "SMALLINT"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:INT ;
  rdfs:seeAlso qudt.type.oracle:INTEGER ;
  rdfs:subClassOf qudt.type.oracle:NUMBER ;
.
qudt.type.oracle:STRING
  rdf:type qudt:CharacterType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/b_char.htm#2126"^^xsd:anyURI ;
  dcterms:description "The VARCHAR2 subtype STRING has the same range of values as their base type. You can use this for compatibility with ANSI/ISO and IBM types."^^xsd:string ;
  qudt:oracleSQLName "STRING"^^xsd:string ;
  rdfs:label "STRING"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:VARCHAR ;
  rdfs:subClassOf qudt.type.oracle:VARCHAR2 ;
.
qudt.type.oracle:TIMESTAMP
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  rdfs:label "TIMESTAMP"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:VARCHAR
  rdf:type qudt:CharacterType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:description """The VARCHAR2 subtype VARCHAR has the same range of values as their base type. You can use this for compatibility with ANSI/ISO and IBM types.

Note: Currently, VARCHAR is synonymous with VARCHAR2. However, in future releases of PL/SQL, to accommodate emerging SQL standards, VARCHAR might become a separate datatype with different comparison semantics. So, it is a good idea to use VARCHAR2 rather than VARCHAR."""^^xsd:string ;
  qudt:oracleSQLName "VARCHAR"^^xsd:string ;
  rdfs:label "VARCHAR"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:VARCHAR2 ;
  rdfs:subClassOf qudt.type.oracle:VARCHAR2 ;
.
qudt.type.oracle:VARCHAR2
  rdf:type qudt:CharacterType ;
  rdf:type qudt.type.oracle:Datatype ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/03_types.htm"^^xsd:anyURI ;
  dcterms:source "http://docs.oracle.com/cd/B10500_01/appdev.920/a96624/b_char.htm#2126"^^xsd:anyURI ;
  dcterms:description """You use the VARCHAR2 datatype to store variable-length character data. How the data is represented internally depends on the database character set. The VARCHAR2 datatype takes a required parameter that specifies a maximum size up to 32767 bytes. The syntax follows:

VARCHAR2(maximum_size [CHAR | BYTE])

You cannot use a symbolic constant or variable to specify the maximum size; you must use an integer literal in the range 1 .. 32767.

Small VARCHAR2 variables are optimized for performance, and larger ones are optimized for efficient memory use. The cutoff point is 2000 bytes. For a VARCHAR2 that is 2000 bytes or longer, PL/SQL dynamically allocates only enough memory to hold the actual value. For a VARCHAR2 variable that is shorter than 2000 bytes, PL/SQL preallocates the full declared length of the variable. For example, if you assign the same 500-byte value to a VARCHAR2(2000 BYTE) variable and to a VARCHAR2(1999 BYTE) variable, the former takes up 500 bytes and the latter takes up 1999 bytes.

If you specify the maximum size in bytes rather than characters, a VARCHAR2(n) variable might be too small to hold n multibyte characters. To avoid this possibility, use the notation VARCHAR2(n CHAR)so that the variable can hold n characters in the database character set, even if some of those characters contain multiple bytes. When you specify the length in characters, the upper limit is still 32767 bytes. So for double-byte and multibyte character sets, you can only specify 1/2 or 1/3 as many characters as with a single-byte character set.

Although PL/SQL character variables can be relatively long, the maximum width of a VARCHAR2 database column is 4000 bytes. So, you cannot insert VARCHAR2 values longer than 4000 bytes into a VARCHAR2 database column.

You can insert any VARCHAR2(n) value into a LONG database column because the maximum width of a LONG column is 2**31 bytes. However, you cannot retrieve a value longer than 32767 bytes from a LONG column into a VARCHAR2(n) variable.

When you do not use the CHAR or BYTE qualifiers, the default is determined by the setting of the NLS_LENGTH_SEMANTICS initialization parameter. When a PL/SQL procedure is compiled, the setting of this parameter is recorded, so that the same setting is used when the procedure is recompiled after being invalidated.

When you assign a character value to a VARCHAR2 variable, if the value is shorter than the declared length of the variable, PL/SQL neither blank-pads the value nor strips trailing blanks. Character values are assigned intact, so no information is lost. If the character value is longer than the declared length of the VARCHAR2 variable, PL/SQL aborts the assignment and raises VALUE_ERROR. PL/SQL neither truncates the value nor tries to trim trailing blanks."""^^xsd:string ;
  qudt:oracleSQLName "VARCHAR2"^^xsd:string ;
  rdfs:label "VARCHAR2"^^xsd:string ;
  rdfs:seeAlso qudt.type.oracle:VARCHAR ;
  rdfs:subClassOf rdfs:Resource ;
.
qudt.type.oracle:databaseDatatype
  rdf:type owl:ObjectProperty ;
  rdfs:domain rdf:Property ;
  rdfs:label "database datatype"^^xsd:string ;
  rdfs:range qudt.type.oracle:Datatype ;
.
qudt.type.oracle:maxLength
  rdf:type owl:DatatypeProperty ;
  rdfs:domain rdf:Property ;
  rdfs:label "max length"^^xsd:string ;
  rdfs:range xsd:integer ;
.
qudt.type.oracle:nullable
  rdf:type owl:DatatypeProperty ;
  rdfs:domain rdf:Property ;
  rdfs:label "nullable"^^xsd:string ;
  rdfs:range xsd:boolean ;
.
